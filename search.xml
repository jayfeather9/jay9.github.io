<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>计算机组成 P3 CPU 设计文档</title>
    <url>/2022/10/31/CO-P3-CPU/</url>
    <content><![CDATA[<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<h3 id="1-通过fsm理解cpu"><a class="markdownIt-Anchor" href="#1-通过fsm理解cpu"></a> 1 通过FSM理解CPU</h3>
<p>单周期CPU所用到的模块中，发挥状态存储功能的包括IFU（PC寄存器），GRF（通过寄存器组存储状态），DM（使用RAM存储状态）；发挥状态转移功能的包括IFU（实现PC地址不断自增），Controller（实现将指令转移为控制信号），ALU（计算得到目标结果）。</p>
<h3 id="2-存储元件合理性"><a class="markdownIt-Anchor" href="#2-存储元件合理性"></a> 2 存储元件合理性</h3>
<ul>
<li>IM使用ROM：IM一次只需要读取一条指令，且IM中存储的指令不可被修改，符合ROM大容量存储且只读的特点，同时现实中的计算机需要保证在关闭电源后也能保存指令，因此不能使用断电会丢失数据的RAM。</li>
<li>DM使用RAM：DM一次只需要读取一个地址对应的数据且需要支持可读写，符合RAM大容量存储且可反复读写的特点，同时现实中的寄存器单位存储大小的价格远高于RAM，对于没有那么刚需读写速度的DM而言使用RAM成本最为合适。</li>
<li>GRF使用寄存器：基本上CPU执行每条指令都涉及到对于GRF的读写，且常常需要一次读取两个不同寄存器的值，Logisim中的RAM和ROM都不支持同时读取两个地址值加写入数据（ROM甚至完全不支持写入），因此需要使用分开来的寄存器组实现同时读取数据和写入数据。且现实中的寄存器读写速度远高于RAM和ROM，符合CPU需要频繁读取和写入GRF的特点。</li>
<li>为何不使用Logisim提供的其他触发器：其他触发器是组成寄存器的基础电路，使用其他触发器再行包装的话与直接使用寄存器元件效果并无不同，却更容易在包装过程中造成问题，为了减少开发难度选择不使用这些元件。</li>
</ul>
<h3 id="3-其他模块"><a class="markdownIt-Anchor" href="#3-其他模块"></a> 3 其他模块</h3>
<p>无其他模块</p>
<h3 id="4-nop指令"><a class="markdownIt-Anchor" href="#4-nop指令"></a> 4 nop指令</h3>
<p>对于nop指令，由于Controller采用的电路连接方式，op和func全0时AND_logic输出也是全0，对应OR_logic输出也是全0，所以不会执行指令跳转，不会执行任何GRF或DM写入，因此此时不会执行任何改变当前状态的操作，等价于nop空指令需要达成的效果。</p>
<h3 id="5-mars导出指令"><a class="markdownIt-Anchor" href="#5-mars导出指令"></a> 5 MARS导出指令</h3>
<p>在课程MIPS要求的设置下，Data从0x00000000开始，Text即代码部分从0x00003000开始，则可以直接通过单独区分J型指令并将其对应指令地址与0x00003000相减即可，增加一个减法器即可解决问题，不需要手工修改最终的机器码。</p>
<p>但在本次P3题目中，由于Compact设置为Data从0x00000000开始，且唯一的跳转指令beq并不涉及指令地址的绝对位置，只涉及相对位置，因此并不需要进行相关修改。</p>
<h3 id="6-pre的mips测试样例强度"><a class="markdownIt-Anchor" href="#6-pre的mips测试样例强度"></a> 6 Pre的MIPS测试样例强度</h3>
<h4 id="各个指令的覆盖率分析"><a class="markdownIt-Anchor" href="#各个指令的覆盖率分析"></a> 各个指令的覆盖率分析</h4>
<ul>
<li>ori 立即数范围可以更扩大，测试边界情况（如0xffff）时的情况</li>
<li>lui 应增加被改变寄存器本来已存有值的情况，比如lui误实现为“将立即数置于高位但保留原数低16位”的情况就不能检测到</li>
<li>add 没有检测到寄存器自增自减的情况</li>
<li>sw 没有测试同寄存器同时作为地址存储和被写入寄存器的情况</li>
<li>lw 同上，且测试范围不够，可以考虑测试更多边界条件。</li>
<li>beq 没有考察立即数是负数的情况（向前跳跃）</li>
</ul>
<h2 id="测试方案"><a class="markdownIt-Anchor" href="#测试方案"></a> 测试方案</h2>
<ol>
<li>采用github上的hex2mips工具将所给的P3_Testcode.txt转回汇编语言后，逐行运行对比观察模块行为，处理不同的位置并定位bug。</li>
<li>采用自己书写的测试MIPS汇编代码，通过自动化测试工具（使用python在已有MIPS模拟器的基础上进行更改、修复与扩展后输出对应信息到logisim自动测试模块内进行评测并定位问题，进而处理bug，详见自动化测试文件提交。</li>
</ol>
<h2 id="指令集综述"><a class="markdownIt-Anchor" href="#指令集综述"></a> 指令集综述</h2>
<h3 id="简要说明"><a class="markdownIt-Anchor" href="#简要说明"></a> 简要说明</h3>
<p>包含指令集如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add sub ori lw sw beq lui nop</span><br></pre></td></tr></table></figure>
<h3 id="r-i-j-型指令说明"><a class="markdownIt-Anchor" href="#r-i-j-型指令说明"></a> R I J 型指令说明</h3>
<h4 id="r型"><a class="markdownIt-Anchor" href="#r型"></a> R型</h4>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add sub and or nor sll srl jr</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">五位立即数</td>
<td style="text-align:center">操作码</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">shamt (sa)</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">恒为0x0</td>
<td style="text-align:center">第一参</td>
<td style="text-align:center">第二参</td>
<td style="text-align:center">目的参</td>
<td style="text-align:center">移位量</td>
<td style="text-align:center">指示操作类型</td>
</tr>
</tbody>
</table>
<h3 id="i型"><a class="markdownIt-Anchor" href="#i型"></a> I型</h3>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addi andi ori xori lw sw beq bne lui</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">立即数</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">imm</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">指示操作类型</td>
<td style="text-align:center">第一参</td>
<td style="text-align:center">目的参</td>
<td style="text-align:center">立即数</td>
</tr>
</tbody>
</table>
<h3 id="j型"><a class="markdownIt-Anchor" href="#j型"></a> J型</h3>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">j jal</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~0 (26)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">指令地址</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">address</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">指示操作类型</td>
<td style="text-align:center">目标跳转位置</td>
</tr>
</tbody>
</table>
<h3 id="无符号加-add"><a class="markdownIt-Anchor" href="#无符号加-add"></a> （无）符号加 add</h3>
<p>按照要求，依照add的机器码处理，但加法依照无符号数加法完成。取两个寄存器中的数，无符号相加（不考虑溢出）后存入目标寄存器。为R型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">0</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000000</td>
<td style="text-align:center">第一加数地址</td>
<td style="text-align:center">第二加数地址</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">100000</td>
</tr>
</tbody>
</table>
<h3 id="无符号减-sub"><a class="markdownIt-Anchor" href="#无符号减-sub"></a> （无）符号减 sub</h3>
<p>按照要求，依照sub的机器码处理，但减法依照无符号数加法完成。无符号相减（不考虑溢出）后存入目标寄存器。为R型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">0</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000000</td>
<td style="text-align:center">被减数地址</td>
<td style="text-align:center">减数地址</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">100010</td>
</tr>
</tbody>
</table>
<h3 id="或立即数-ori"><a class="markdownIt-Anchor" href="#或立即数-ori"></a> 或立即数 ori</h3>
<p>按照要求，即为将某寄存器中数或一个16位立即数，将得到的数存到目标寄存器中。为I型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">imm</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">001101</td>
<td style="text-align:center">被或数地址</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">立即数</td>
</tr>
</tbody>
</table>
<h3 id="加载字-lw"><a class="markdownIt-Anchor" href="#加载字-lw"></a> 加载字 lw</h3>
<p>取内存中的一字长的内容存入目标寄存器。为I型指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addr &lt;- GPR[base] + sign_ext(offset)</span><br><span class="line">GPR[rt] &lt;- memory[addr]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">base</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">offset</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">100011</td>
<td style="text-align:center">内存地址所在寄存器</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">内存地址偏移量（立即数）</td>
</tr>
</tbody>
</table>
<h3 id="存储字-sw"><a class="markdownIt-Anchor" href="#存储字-sw"></a> 存储字 sw</h3>
<p>将目标寄存器中的内容存入内存中一字长的位置。为I型指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addr &lt;- GPR[base] + sign_ext(offset)</span><br><span class="line">memory[addr] &lt;- GPR[rt] </span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">base</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">offset</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">101011</td>
<td style="text-align:center">内存地址所在寄存器</td>
<td style="text-align:center">目标寄存器地址</td>
<td style="text-align:center">内存地址偏移量（立即数）</td>
</tr>
</tbody>
</table>
<h3 id="相等时转移-beq"><a class="markdownIt-Anchor" href="#相等时转移-beq"></a> 相等时转移 beq</h3>
<p>当两个目标寄存器中存储的值相等时转移到目标指令处。为I型指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (GPR[rs] == GPR[rt])</span><br><span class="line">	PC &lt;- PC + 4 + sign_extend(&#123;offset,2&#123;0&#125;&#125;)</span><br><span class="line">else</span><br><span class="line">	PC &lt;- PC + 4</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">offset</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000100</td>
<td style="text-align:center">第一目标寄存器</td>
<td style="text-align:center">第二目标寄存器</td>
<td style="text-align:center">转移目标指令地址</td>
</tr>
</tbody>
</table>
<h3 id="立即数加载至高位-lui"><a class="markdownIt-Anchor" href="#立即数加载至高位-lui"></a> 立即数加载至高位 lui</h3>
<p>将立即数赋值到目标寄存器的高16位。为I型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">0</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">imm</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">001111</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">目标寄存器</td>
<td style="text-align:center">立即数</td>
</tr>
</tbody>
</table>
<h3 id="空指令-nop"><a class="markdownIt-Anchor" href="#空指令-nop"></a> 空指令 nop</h3>
<p>机器码为0x00000000，不进行任何有效行为。</p>
<h2 id="ifu-取指令单元"><a class="markdownIt-Anchor" href="#ifu-取指令单元"></a> IFU 取指令单元</h2>
<h3 id="功能要求"><a class="markdownIt-Anchor" href="#功能要求"></a> 功能要求</h3>
<ul>
<li>内部包括 PC（程序计数器）、IM（指令存储器）及相关逻辑。</li>
<li>PC 用寄存器实现，应具有<strong>异步复位</strong>功能，复位值为起始地址。</li>
<li><strong>起始地址：0x00000000。</strong></li>
<li>IM 用 ROM 实现，容量为 32bit × 32字。</li>
<li>IM 实际地址宽度仅为 5 位，需要使用恰当的方法将 PC 中储存的地址同 IM 联系起来。</li>
</ul>
<h3 id="输入端口"><a class="markdownIt-Anchor" href="#输入端口"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset 异步复位信号</li>
<li>ALUZero 代表Branch指令是否满足要求</li>
<li>PCSrc [1:0] 指示当前的指令类型，00代表指令不影响跳转，01代表Branch指令，10代表J型指令（跳转到标记），11代表jr类指令（跳转到寄存器地址）</li>
<li>PCBranch [7:0] Branch后的新指令地址</li>
<li>PCJAL [31:0] 连接RD1，对应jal取出的寄存器内存储的值。</li>
</ul>
<h3 id="输出端口"><a class="markdownIt-Anchor" href="#输出端口"></a> 输出端口</h3>
<ul>
<li>Inst [31:0] 取得的指令</li>
<li>PCNxt [7:0] 下一条要执行的指令地址</li>
</ul>
<h3 id="行为逻辑"><a class="markdownIt-Anchor" href="#行为逻辑"></a> 行为逻辑</h3>
<ul>
<li>任何时刻，输出当前PC寄存器对应ROM地址中的指令</li>
<li>每个clk上沿将当前PC寄存器存储的地址+4并输出到PCNxt，PCSrc为00时将该值存储到PC寄存器中</li>
<li>每个clk上沿PCSrc为01时，判断ALUZero是否为真，为真则将PCBranch存入PC寄存器中，为假将PC+4存入PC寄存器中。</li>
<li>每个clk上沿PCSrc为10或11时，分别对应J型和jr类指令，按照相应方式处理。</li>
</ul>
<h2 id="alu-算术逻辑单元"><a class="markdownIt-Anchor" href="#alu-算术逻辑单元"></a> ALU 算术逻辑单元</h2>
<h3 id="功能要求-2"><a class="markdownIt-Anchor" href="#功能要求-2"></a> 功能要求</h3>
<ul>
<li>提供 32 位加、减、或运算及大小比较功能。</li>
<li>加减法按无符号处理（不考虑溢出）。</li>
</ul>
<h3 id="输入端口-2"><a class="markdownIt-Anchor" href="#输入端口-2"></a> 输入端口</h3>
<ul>
<li>SrcA [31:0] 第一个参数输入</li>
<li>SrcB [31:0] 第二个参数输入</li>
<li>ALUCtrl [2:0] ALU操作类型控制码</li>
</ul>
<h3 id="输出端口-2"><a class="markdownIt-Anchor" href="#输出端口-2"></a> 输出端口</h3>
<ul>
<li>Zero 输出结果是否为0</li>
<li>ALUResult [31:0] 计算结果</li>
</ul>
<h3 id="控制信号说明"><a class="markdownIt-Anchor" href="#控制信号说明"></a> 控制信号说明</h3>
<ul>
<li>或运算 000</li>
<li>与运算 001</li>
<li>加法运算（无符号无溢出） 010</li>
<li>减法运算（无符号无溢出） 011</li>
<li>立即数加载至高位 100</li>
<li>或立即数（将SrcB取低16位进行0扩展后和SrcA取或） 101</li>
</ul>
<h2 id="grf-通用寄存器组"><a class="markdownIt-Anchor" href="#grf-通用寄存器组"></a> GRF 通用寄存器组</h2>
<h3 id="功能要求-3"><a class="markdownIt-Anchor" href="#功能要求-3"></a> 功能要求</h3>
<ul>
<li>用具有写使能的寄存器实现，寄存器总数为 32 个，应具有<strong>异步复位</strong>功能。</li>
<li><strong>0 号寄存器</strong>的值始终保持为 0。其他寄存器<strong>初始值（复位后）均为 0</strong>，无需专门设置。</li>
</ul>
<h3 id="输入端口-3"><a class="markdownIt-Anchor" href="#输入端口-3"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset 异步复位信号</li>
<li>WE 写使能信号</li>
<li>A1 [4:0] 第一读取地址</li>
<li>A2 [4:0] 第二读取地址</li>
<li>A3 [4:0] 写入地址</li>
<li>WD [31:0] 写入数据输入</li>
</ul>
<h3 id="输出端口-3"><a class="markdownIt-Anchor" href="#输出端口-3"></a> 输出端口</h3>
<ul>
<li>RD1 [31:0] 第一读取输出 输出A1地址的寄存器中的数据</li>
<li>RD2 [31:0] 第二读取输出 输出A2地址的寄存器中的数据</li>
</ul>
<h3 id="功能说明"><a class="markdownIt-Anchor" href="#功能说明"></a> 功能说明</h3>
<ul>
<li>任何时刻，RD1和RD2都输出A1和A2对应地址的寄存器中的数据</li>
<li>Reset异步复位，将所有寄存器复位为0</li>
<li>0号寄存器永远保持为0</li>
<li>当WE为真时，将WD的数据在clk上沿写入A3对应地址的寄存器</li>
</ul>
<h2 id="dm-数据存储器内存"><a class="markdownIt-Anchor" href="#dm-数据存储器内存"></a> DM 数据存储器（内存）</h2>
<h3 id="功能要求-4"><a class="markdownIt-Anchor" href="#功能要求-4"></a> 功能要求</h3>
<ul>
<li>使用 RAM 实现，容量为 32bit × 32字，应具有<strong>异步复位</strong>功能，复位值为 0x00000000。</li>
<li><strong>起始地址：0x00000000</strong>。</li>
<li>RAM 应使用双端口模式，即设置 RAM 的 <strong>Data Interface</strong> 属性为 <strong>Separate load and store ports</strong>。</li>
</ul>
<h3 id="输入端口-4"><a class="markdownIt-Anchor" href="#输入端口-4"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset 异步复位信号</li>
<li>WE 写使能信号</li>
<li>Addr [4:0] 写入/读取地址</li>
<li>WD [31:0] 写入数据</li>
</ul>
<h3 id="输出端口-4"><a class="markdownIt-Anchor" href="#输出端口-4"></a> 输出端口</h3>
<ul>
<li>RD [31:0] 读取结果数据</li>
</ul>
<h3 id="功能说明-2"><a class="markdownIt-Anchor" href="#功能说明-2"></a> 功能说明</h3>
<ul>
<li>任何时刻，在RD输出AddrR对应内存地址的内存数据</li>
<li>当WE为真时，将WD的数据在clk上沿写入AddrW对应内存地址</li>
</ul>
<h2 id="controller-控制器"><a class="markdownIt-Anchor" href="#controller-控制器"></a> Controller 控制器</h2>
<h3 id="功能要求-5"><a class="markdownIt-Anchor" href="#功能要求-5"></a> 功能要求</h3>
<p>将输入的opcode和funct转化为CPU各部分对应信号输出</p>
<h3 id="实现方式"><a class="markdownIt-Anchor" href="#实现方式"></a> 实现方式</h3>
<p>将Controller分为将opcode和funct转化为各个指令对应的独热输出的AND_logic模块和将各个指令对应到不同输出信号的OR_logic模块，两模块不额外进行封装，直接在顶层模块中进行连接，这样可以通过两模块中间线的高亮直观判断当前在执行何种指令。</p>
<h3 id="输入端口-5"><a class="markdownIt-Anchor" href="#输入端口-5"></a> 输入端口</h3>
<ul>
<li>OP [5:0] 标识命令种类的指令，按MIPS汇编标准执行</li>
<li>func [5:0] 标识R型指令具体种类的指令，按MIPS汇编标准执行</li>
</ul>
<h3 id="输出端口-5"><a class="markdownIt-Anchor" href="#输出端口-5"></a> 输出端口</h3>
<ul>
<li>Mem2Reg [1:0] 决定GRF写入数据来源，00代表ALU输出，01代表DM输出</li>
<li>MemWrite 决定DM是否允许写入</li>
<li>Branch [1:0] 指示当前的指令类型，00代表指令不影响跳转，01代表Branch指令，10代表J型指令（跳转到标记），11代表jr类指令（跳转到寄存器地址）</li>
<li>ALUCtrl [2:0] 决定当前ALU执行何种运算，具体见ALU说明</li>
<li>ALUSrc 决定ALU的第二参来自GRF的RD2（对应值0）还是立即数（对应值1）</li>
<li>RegDest [1:0] 决定寄存器写入地址来源是Inst[15:11]（对应值01）还是Inst[20:16]（对应值00）</li>
<li>RegWrite 决定GRF是否允许写入</li>
<li>ExtSign 决定扩展方式，0代表0扩展，1代表符号扩展。</li>
</ul>
<h3 id="各指令对应controller输出"><a class="markdownIt-Anchor" href="#各指令对应controller输出"></a> 各指令对应Controller输出</h3>
<table>
<thead>
<tr>
<th>func</th>
<th>10 0000</th>
<th>10 0010</th>
<th>-</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>op</strong></td>
<td><strong>00 0000</strong></td>
<td><strong>00 0000</strong></td>
<td><strong>00 1101</strong></td>
<td><strong>10 0011</strong></td>
<td><strong>10 1011</strong></td>
<td><strong>00 0100</strong></td>
<td><strong>00 1111</strong></td>
</tr>
<tr>
<td></td>
<td>add</td>
<td>sub</td>
<td>ori</td>
<td>lw</td>
<td>sw</td>
<td>beq</td>
<td>lui</td>
</tr>
<tr>
<td>Mem2Reg</td>
<td>00</td>
<td>00</td>
<td>00</td>
<td>01</td>
<td>-</td>
<td>-</td>
<td>0</td>
</tr>
<tr>
<td>MemWrite</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>Branch</td>
<td>00</td>
<td>00</td>
<td>00</td>
<td>00</td>
<td>00</td>
<td>01</td>
<td>00</td>
</tr>
<tr>
<td>ALUCtrl</td>
<td>2</td>
<td>3</td>
<td>5</td>
<td>2</td>
<td>2</td>
<td>3</td>
<td>4</td>
</tr>
<tr>
<td>(CalcMode)</td>
<td>add</td>
<td>sub</td>
<td>ori</td>
<td>add</td>
<td>add</td>
<td>sub</td>
<td>lui</td>
</tr>
<tr>
<td>ALUSrc</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>RegDest</td>
<td>01</td>
<td>01</td>
<td>00</td>
<td>00</td>
<td>-</td>
<td>-</td>
<td>00</td>
</tr>
<tr>
<td>RegWrite</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>ExtSign</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>Arch</tag>
        <tag>CO</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成 P5 CPU 设计文档</title>
    <url>/2022/12/09/CO-P5-CPU/</url>
    <content><![CDATA[<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<h3 id="1-提前分支判断"><a class="markdownIt-Anchor" href="#1-提前分支判断"></a> 1 提前分支判断</h3>
<p>提前分支判断，就代表要提前判断对应寄存器值是否相等（或大于小于等），也就是说要提前用到这些值，也就是说，让 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>u</mi><mi>s</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{use}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 减少到了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，这可能让本来可以通过转发解决的数据冒险必须通过阻塞一周期来解决，反而降低了效率。示例汇编代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li $t0, 0</span><br><span class="line">li $s0, 10</span><br><span class="line">for:</span><br><span class="line">...</span><br><span class="line">add $t0, $t0, 1</span><br><span class="line">bne $t0, $s0, for</span><br><span class="line">for_end:</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这里我们用汇编进行了一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span> 次的循环，每次循环结束后add都会对t0寄存器自增1，随后由bne指令判断是否结束循环。如果不采用提前分支判断，这里add计算出结果后刚好可以转发给来到E级进行分支判断的bne指令；但如果采用提前分支判断，就必须要使用阻塞才能保证bne使用了正确的数据。</p>
<h3 id="2-跳转链接指令写回-pc-8"><a class="markdownIt-Anchor" href="#2-跳转链接指令写回-pc-8"></a> 2 跳转链接指令写回 PC + 8</h3>
<p>对于jal等跳转并链接的指令，写回$ra寄存器的地址值对应着 “返回后继续执行的指令地址”，在单周期cpu中是PC + 4，但是由于延迟槽的存在，PC + 4 这条指令，即延迟槽内的指令应是在跳转指令的下一步执行，因此不应该在 “返回后” 被执行。举例来说就是，在使用函数时，jal这类指令一般用于进入函数，此时延迟槽内指令应代表进入函数前（因为实际上这条指令在跳转进入函数之前执行）的最后一条指令，显然不应该在函数返回后再被执行。因此应该写回的地址是 PC + 8，即延迟槽的下条指令。</p>
<h3 id="3-转发数据的来源"><a class="markdownIt-Anchor" href="#3-转发数据的来源"></a> 3 转发数据的来源</h3>
<p>如果转发来源于功能部件，目标是功能部件，那么这样将大幅延长关键路径。准确来说，会让原模块的关键路径长度增加转发源模块的关键路径长度，相当于拖慢了CPU一倍的时钟频率。</p>
<p>此外，如果转发来自功能部件，目标功能部件，这样仅能实现 “本周期运算的数据被本周期前面模块使用” 的数据冒险，如果数据在下一周期才被使用（但下一周期数据尚未写回）则无法实现转发。</p>
<h3 id="4-gpr内部转发"><a class="markdownIt-Anchor" href="#4-gpr内部转发"></a> 4 GPR内部转发</h3>
<p>使用GPR内部转发，本质上相当于解决W级的结果数据要被D、E级使用的数据冒险问题。如果使用外部转发，即其他部件的转发方式，应该是从W级的 “目标流水寄存器” 的输出端口连接到使用数据的E级（显然W级结果不可能和M级发生数据冒险）输入部分。但是W级没有 “目标流水寄存器” ，准确来说对应的目标寄存器是GRF模块，所以按照原来的方式，我们应该从GRF将数据连接到E级的MUX。但是GRF有固定的输出端口，如果这么做需要额外添加一个 “W级输出”，再将对应输出链接到数据冒险处理模块，麻烦且影响模块局部性。</p>
<p>而使用GPR内部转发则不需要再进行额外链接，只需要在GRF内部进行判断即可，方便且简洁。</p>
<h3 id="5-转发通路"><a class="markdownIt-Anchor" href="#5-转发通路"></a> 5 转发通路</h3>
<p>首先，供给者是W级的情况已经在4中讨论过了，使用GPR内部转发解决，这里不再讨论。</p>
<p>供给者是M级时，需求者可能来自于D或E级，分别对应分支指令和计算类指令。对于分支指令，指令从GRF中取数据时恰好M级对应数据写入，通过GPR内部转发即可解决。对于计算类指令，需要从M/W流水线寄存器转发到E级输入。</p>
<p>供给者是E级时，需求者可能来自于D或E级，对应分支指令和计算类指令。对于分支指令，需要从E/M流水线寄存器转发到D级。对于计算类指令，需要从E/M流水线寄存器转发到E级。</p>
<h3 id="6-新指令扩展位置"><a class="markdownIt-Anchor" href="#6-新指令扩展位置"></a> 6 新指令扩展位置</h3>
<h4 id="计算指令"><a class="markdownIt-Anchor" href="#计算指令"></a> 计算指令</h4>
<p>对于类似add/addi这样，由两个寄存器的值或一个寄存器值和一个立即数进行某种运算，再将运算结果存回到某个寄存器内的计算类指令，只需要做如下两处修改：</p>
<ol>
<li>修改译码器：在对应R型指令部分或计算立即数部分增加分支，修改ALUCtrl的值（如有需要，还要修改ExtType的值）即可。</li>
<li>修改ALU：对于新增的ALUCtrl，在ALU中增加分支，进行相关计算</li>
</ol>
<h4 id="访存指令"><a class="markdownIt-Anchor" href="#访存指令"></a> 访存指令</h4>
<p>对于类似lw/sw这样对内存进行访问的指令，进行如下修改：</p>
<ol>
<li>修改译码器：对应读内存指令或者写内存指令部分修改对应的Memtype和ALUCtrl</li>
<li>修改ALU：对应不同的计算方式新增ALU计算方法的分支</li>
<li>修改DM：对应不同的Memtype修改访存方式</li>
</ol>
<h4 id="分支指令"><a class="markdownIt-Anchor" href="#分支指令"></a> 分支指令</h4>
<p>对于类似beq这样新增的分支指令，进行如下修改：</p>
<ol>
<li>修改译码器：对于分支指令一类的指令部分修改CMPType</li>
<li>修改比较器：对应新增CMPType新增比较方式</li>
</ol>
<h3 id="7-译码器架构"><a class="markdownIt-Anchor" href="#7-译码器架构"></a> 7 译码器架构</h3>
<p>采用了指令驱动型的方式，在两重case语句下（第二重对应OPCode==6’00_0000的情况）对应不同类型的指令进行分类，总共分如下几类：</p>
<ul>
<li>跳转到寄存器 jr</li>
<li>R型计算 add sub</li>
<li>I型计算 lui ori</li>
<li>分支 beq</li>
<li>读内存 lw</li>
<li>写内存 sw</li>
<li>J型指令 jal</li>
</ul>
<p>可以看到虽然按类别分，但是实际上每类只有一两个，这是因为指令集较小的缘故。当指令集增大时，除了乘除法指令需要再单开一类，其他指令均可以按类型分类到上述七个类别中。</p>
<p>对于每一类指令，大多数控制信号都是相同的，只需要单独修改某一两个控制信号即可。下面给出R型计算指令的示例：（有四个信号在OPCode == 6’b00_0000处已经统一赋值过了）</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">// R Type Calc</span></span><br><span class="line">    PCSrc   &lt;=      <span class="number">2&#x27;b00</span>;</span><br><span class="line"></span><br><span class="line">    RegDataSrc &lt;=   <span class="number">2&#x27;b00</span>;</span><br><span class="line">    RegDest &lt;=      <span class="number">2&#x27;b01</span>;</span><br><span class="line">    RegWrite   &lt;=   <span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line">    Tnew    &lt;=      <span class="number">4&#x27;d2</span>;</span><br><span class="line">    TuseE   &lt;=      <span class="number">4&#x27;d1</span>;</span><br><span class="line">    TuseM   &lt;=      <span class="number">4&#x27;d1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (func == <span class="number">6&#x27;b10_0000</span>) <span class="keyword">begin</span> <span class="comment">// add</span></span><br><span class="line">        ALUCtrl     &lt;=      <span class="number">4&#x27;b0010</span>;</span><br><span class="line">        ALUSrc      &lt;=      <span class="number">2&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (func == <span class="number">6&#x27;b10_0010</span>) <span class="keyword">begin</span> <span class="comment">// sub</span></span><br><span class="line">        ALUCtrl     &lt;=      <span class="number">4&#x27;b0011</span>;</span><br><span class="line">        ALUSrc      &lt;=      <span class="number">2&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        ALUCtrl     &lt;=      <span class="number">4&#x27;b0000</span>;</span><br><span class="line">        ALUSrc      &lt;=      <span class="number">2&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>可以看到，省去了同类指令相似端口的赋值。</p>
<p>注：这里没有采用宏，因为个人认为，宏定义每一种指令判断还需要到前文（当代码较长时，翻上去很麻烦）寻找具体的OPCode和func值，如果在宏定义中有一处bug是不太方便查找到的。相反的，如果直接把判断值写在对应判断位置，用注释进行标识，同样能达成说明的效果，按指令进行查错时很方便。</p>
<p>优势：便于指令添加，不容易出现某条指令少添加了一个控制信号的情况（出现了也很容易发现，数每个分支的赋值数即可），且相对直观，对于每个指令对应什么信号都很一目了然。</p>
<p>劣势：代码冗长，不能直观体现出每个指令有决定性的信号在哪里，为了在always块中进行赋值加入了reg，综合后可能会影响效率等。</p>
<h2 id="数据构造"><a class="markdownIt-Anchor" href="#数据构造"></a> 数据构造</h2>
<h3 id="转发测试"><a class="markdownIt-Anchor" href="#转发测试"></a> 转发测试</h3>
<ul>
<li>W-E转发，隔一条指令分别运行同寄存器lw和add</li>
<li>M-E转发，连续运行同寄存器递增的add</li>
<li>W-M转发，add后加sw操作同寄存器</li>
<li>GPR内部转发，隔两条指令运行的同寄存器add</li>
<li>M-D转发，隔一条指令分别运行同寄存器add</li>
</ul>
<p>将上述不同转发情况用生成程序+修改操作数进行多次叠加修改，测试多重转发，随机生成多组连续内容。</p>
<h3 id="阻塞测试"><a class="markdownIt-Anchor" href="#阻塞测试"></a> 阻塞测试</h3>
<ul>
<li>连续运行lw和add（同寄存器）</li>
<li>在beq前加操作相关寄存器的add sub ori lw</li>
<li>在jr前加操作相关寄存器的add sub ori lw</li>
</ul>
<h3 id="综合测试"><a class="markdownIt-Anchor" href="#综合测试"></a> 综合测试</h3>
<ul>
<li>随机生成大量连续add、sub、ori、lui、lw、sw指令（地址按固定寄存器值+随机数指定）</li>
<li>随机生成beq在其中，跳跃到+3条指令位置</li>
<li>随机生成jal跳跃到+3条指令地址</li>
<li>为寄存器赋值后jr到+3条指令地址</li>
</ul>
<h2 id="测试方法"><a class="markdownIt-Anchor" href="#测试方法"></a> 测试方法</h2>
<p>采用了TobyShi的修改版MARS生成对应汇编码，采用如下Python程序进行自动评测：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">file_name</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(file_name, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    s = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">bad_type = <span class="number">0</span></span><br><span class="line">first_bad = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp</span>(<span class="params">arr1, arr2</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(arr1) != <span class="built_in">len</span>(arr2)):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr1)):</span><br><span class="line">        <span class="keyword">if</span> (arr1[i] != arr2[i]):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp2</span>(<span class="params">arr1, arr2</span>):</span><br><span class="line">    <span class="keyword">global</span> bad_type</span><br><span class="line">    <span class="keyword">global</span> first_bad</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr1)):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(arr1) != <span class="built_in">len</span>(arr2) <span class="keyword">and</span> (i == <span class="built_in">len</span>(arr2)-<span class="number">1</span> <span class="keyword">or</span> i == <span class="built_in">len</span>(arr1)-<span class="number">1</span>)):</span><br><span class="line">            bad_type = <span class="number">1</span> <span class="keyword">if</span> <span class="built_in">len</span>(arr1) &gt; <span class="built_in">len</span>(arr2) <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (cmp(arr1[i], arr2[i]) == <span class="number">0</span>):</span><br><span class="line">            first_bad[<span class="number">0</span>] = arr1[i][:]</span><br><span class="line">            first_bad[<span class="number">1</span>] = arr2[i][:]</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">std = read_file(<span class="string">&quot;out.txt&quot;</span>)</span><br><span class="line">ans = read_file(<span class="string">&quot;cpuOut.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">data_pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;@([0-9a-fA-F]&#123;8&#125;): \*([0-9a-fA-F]&#123;8&#125;) &lt;= ([0-9a-fA-F]&#123;8&#125;)&quot;</span>)</span><br><span class="line">reg_pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;@([0-9a-fA-F]&#123;8&#125;): \$ ([1-9][0-9]&#123;0,1&#125;) &lt;= ([0-9a-fA-F]&#123;8&#125;)&quot;</span>)</span><br><span class="line"></span><br><span class="line">std_data_result = data_pattern.findall(std)</span><br><span class="line">std_reg_result = reg_pattern.findall(std)</span><br><span class="line">ans_data_result = data_pattern.findall(ans)</span><br><span class="line">ans_reg_result = reg_pattern.findall(ans)</span><br><span class="line"></span><br><span class="line">bad_type = <span class="number">0</span></span><br><span class="line">first_bad = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Good Data!&quot;</span> <span class="keyword">if</span> cmp2(std_data_result, ans_data_result) <span class="keyword">else</span> \</span><br><span class="line">    <span class="string">&quot;Data less results than std!&quot;</span> <span class="keyword">if</span> bad_type == <span class="number">1</span> <span class="keyword">else</span> \</span><br><span class="line">    <span class="string">&quot;Data more results than std!&quot;</span> <span class="keyword">if</span> bad_type == <span class="number">2</span> <span class="keyword">else</span> \</span><br><span class="line">    <span class="string">f&quot;Data not same results, get @<span class="subst">&#123;first_bad[<span class="number">1</span>][<span class="number">0</span>]&#125;</span>: *<span class="subst">&#123;first_bad[<span class="number">1</span>][<span class="number">1</span>]&#125;</span> &lt;= <span class="subst">&#123;first_bad[<span class="number">1</span>][<span class="number">2</span>]&#125;</span>\n \</span></span><br><span class="line"><span class="string">        expected @<span class="subst">&#123;first_bad[<span class="number">0</span>][<span class="number">0</span>]&#125;</span>: *<span class="subst">&#123;first_bad[<span class="number">0</span>][<span class="number">1</span>]&#125;</span> &lt;= <span class="subst">&#123;first_bad[<span class="number">0</span>][<span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line">bad_type = <span class="number">0</span></span><br><span class="line">first_bad = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Good Reg!&quot;</span> <span class="keyword">if</span> cmp2(std_reg_result, ans_reg_result) <span class="keyword">else</span> \</span><br><span class="line">    <span class="string">&quot;Reg less results than std!&quot;</span> <span class="keyword">if</span> bad_type == <span class="number">1</span> <span class="keyword">else</span> \</span><br><span class="line">    <span class="string">&quot;Reg more results than std!&quot;</span> <span class="keyword">if</span> bad_type == <span class="number">2</span> <span class="keyword">else</span> \</span><br><span class="line">    <span class="string">f&quot;Reg not same results, get @<span class="subst">&#123;first_bad[<span class="number">1</span>][<span class="number">0</span>]&#125;</span>: $<span class="subst">&#123;first_bad[<span class="number">1</span>][<span class="number">1</span>]&#125;</span> &lt;= <span class="subst">&#123;first_bad[<span class="number">1</span>][<span class="number">2</span>]&#125;</span>\n \</span></span><br><span class="line"><span class="string">        expected @<span class="subst">&#123;first_bad[<span class="number">0</span>][<span class="number">0</span>]&#125;</span>: $<span class="subst">&#123;first_bad[<span class="number">0</span>][<span class="number">1</span>]&#125;</span> &lt;= <span class="subst">&#123;first_bad[<span class="number">0</span>][<span class="number">2</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>通过简单的正则表达式提取输出内容并进行相关判断。</p>
<h2 id="指令集综述"><a class="markdownIt-Anchor" href="#指令集综述"></a> 指令集综述</h2>
<h3 id="简要说明"><a class="markdownIt-Anchor" href="#简要说明"></a> 简要说明</h3>
<p>包含指令集如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add sub ori lw sw beq lui jal jr nop</span><br></pre></td></tr></table></figure>
<h3 id="r-i-j-型指令说明"><a class="markdownIt-Anchor" href="#r-i-j-型指令说明"></a> R I J 型指令说明</h3>
<h4 id="r型"><a class="markdownIt-Anchor" href="#r型"></a> R型</h4>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add sub and or nor sll srl jr</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">五位立即数</td>
<td style="text-align:center">操作码</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">shamt (sa)</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">恒为0x0</td>
<td style="text-align:center">第一参</td>
<td style="text-align:center">第二参</td>
<td style="text-align:center">目的参</td>
<td style="text-align:center">移位量</td>
<td style="text-align:center">指示操作类型</td>
</tr>
</tbody>
</table>
<h3 id="i型"><a class="markdownIt-Anchor" href="#i型"></a> I型</h3>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addi andi ori xori lw sw beq bne lui</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">立即数</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">imm</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">指示操作类型</td>
<td style="text-align:center">第一参</td>
<td style="text-align:center">目的参</td>
<td style="text-align:center">立即数</td>
</tr>
</tbody>
</table>
<h3 id="j型"><a class="markdownIt-Anchor" href="#j型"></a> J型</h3>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">j jal</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~0 (26)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">指令地址</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">address</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">指示操作类型</td>
<td style="text-align:center">目标跳转位置</td>
</tr>
</tbody>
</table>
<h3 id="无符号加-add"><a class="markdownIt-Anchor" href="#无符号加-add"></a> （无）符号加 add</h3>
<p>按照要求，依照add的机器码处理，但加法依照无符号数加法完成。取两个寄存器中的数，无符号相加（不考虑溢出）后存入目标寄存器。为R型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">0</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000000</td>
<td style="text-align:center">第一加数地址</td>
<td style="text-align:center">第二加数地址</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">100000</td>
</tr>
</tbody>
</table>
<h3 id="无符号减-sub"><a class="markdownIt-Anchor" href="#无符号减-sub"></a> （无）符号减 sub</h3>
<p>按照要求，依照sub的机器码处理，但减法依照无符号数加法完成。无符号相减（不考虑溢出）后存入目标寄存器。为R型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">0</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000000</td>
<td style="text-align:center">被减数地址</td>
<td style="text-align:center">减数地址</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">100010</td>
</tr>
</tbody>
</table>
<h3 id="或立即数-ori"><a class="markdownIt-Anchor" href="#或立即数-ori"></a> 或立即数 ori</h3>
<p>按照要求，即为将某寄存器中数或一个16位立即数，将得到的数存到目标寄存器中。为I型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">imm</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">001101</td>
<td style="text-align:center">被或数地址</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">立即数</td>
</tr>
</tbody>
</table>
<h3 id="加载字-lw"><a class="markdownIt-Anchor" href="#加载字-lw"></a> 加载字 lw</h3>
<p>取内存中的一字长的内容存入目标寄存器。为I型指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addr &lt;- GPR[base] + sign_ext(offset)</span><br><span class="line">GPR[rt] &lt;- memory[addr]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">base</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">offset</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">100011</td>
<td style="text-align:center">内存地址所在寄存器</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">内存地址偏移量（立即数）</td>
</tr>
</tbody>
</table>
<h3 id="存储字-sw"><a class="markdownIt-Anchor" href="#存储字-sw"></a> 存储字 sw</h3>
<p>将目标寄存器中的内容存入内存中一字长的位置。为I型指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addr &lt;- GPR[base] + sign_ext(offset)</span><br><span class="line">memory[addr] &lt;- GPR[rt] </span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">base</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">offset</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">101011</td>
<td style="text-align:center">内存地址所在寄存器</td>
<td style="text-align:center">目标寄存器地址</td>
<td style="text-align:center">内存地址偏移量（立即数）</td>
</tr>
</tbody>
</table>
<h3 id="相等时转移-beq"><a class="markdownIt-Anchor" href="#相等时转移-beq"></a> 相等时转移 beq</h3>
<p>当两个目标寄存器中存储的值相等时转移到目标指令处。为I型指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (GPR[rs] == GPR[rt])</span><br><span class="line">	PC &lt;- PC + 4 + sign_extend(&#123;offset,2&#123;0&#125;&#125;)</span><br><span class="line">else</span><br><span class="line">	PC &lt;- PC + 4</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">offset</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000100</td>
<td style="text-align:center">第一目标寄存器</td>
<td style="text-align:center">第二目标寄存器</td>
<td style="text-align:center">转移目标指令地址</td>
</tr>
</tbody>
</table>
<h3 id="立即数加载至高位-lui"><a class="markdownIt-Anchor" href="#立即数加载至高位-lui"></a> 立即数加载至高位 lui</h3>
<p>将立即数赋值到目标寄存器的高16位。为I型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">0</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">imm</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">001111</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">目标寄存器</td>
<td style="text-align:center">立即数</td>
</tr>
</tbody>
</table>
<h3 id="跳转并链接-jal"><a class="markdownIt-Anchor" href="#跳转并链接-jal"></a> 跳转并链接 jal</h3>
<p>将当前的PC+4存储在GPR[31]（$ra）中，按照给定的地址进行跳转。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PC &lt;- &#123;PC[31:28], instr_index, &#123;2&#123;0&#125;&#125;&#125;</span><br><span class="line">GPR[31]($ra) &lt;- PC + 4</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~0 (26)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">instr_index</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000011</td>
<td style="text-align:center">目标跳转位置</td>
</tr>
</tbody>
</table>
<h3 id="跳转至寄存器-jr"><a class="markdownIt-Anchor" href="#跳转至寄存器-jr"></a> 跳转至寄存器 jr</h3>
<p>跳转到目标寄存器存储的地址指定的指令处</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PC &lt;- GPR[rs]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000000</td>
<td style="text-align:center">目标寄存器地址</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">001000</td>
</tr>
</tbody>
</table>
<h3 id="空指令-nop"><a class="markdownIt-Anchor" href="#空指令-nop"></a> 空指令 nop</h3>
<p>机器码为0x00000000，不进行任何有效行为。</p>
<h2 id="ifu-取指令单元-f"><a class="markdownIt-Anchor" href="#ifu-取指令单元-f"></a> IFU 取指令单元 (F)</h2>
<h3 id="功能要求"><a class="markdownIt-Anchor" href="#功能要求"></a> 功能要求</h3>
<ul>
<li>内部包括 PC（程序计数器）、IM（指令存储器）及相关逻辑。</li>
<li>PC <strong>同步复位</strong>，复位值为起始地址。</li>
<li><strong>起始地址：0x00003000。</strong></li>
<li>IM 容量为 32bit × 4096字（按字取的地址宽度12位）。</li>
<li>支持冻结</li>
<li><strong>可能出现问题，不确定，目前未考虑，后续debug可以测试</strong></li>
</ul>
<h3 id="输入端口"><a class="markdownIt-Anchor" href="#输入端口"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset 同步复位信号</li>
<li>Froze 冻结信号，收到该信号时忽略时钟上沿</li>
<li>PCSrc [1:0] 决定下条PC指令使用何处输入</li>
<li>CMPOut 对应CMP的输出，代表是否允许branch，1代表允许</li>
<li>PCImm [15:0] 符号扩展后的立即数（对应beq给定的立即数）</li>
<li>PCInstrIndex [25:0] J型指令的立即数值（对应jal给定的立即数）</li>
<li>PCJumpReg [31:0] 来自寄存器的跳转地址（对应jr指令对应地址读取到的值）</li>
</ul>
<h3 id="输出端口"><a class="markdownIt-Anchor" href="#输出端口"></a> 输出端口</h3>
<ul>
<li>Inst [31:0] 取得的指令</li>
<li>PCNxt [31:0] 对应PC+4，用于jal</li>
</ul>
<h3 id="行为逻辑"><a class="markdownIt-Anchor" href="#行为逻辑"></a> 行为逻辑</h3>
<ul>
<li>支持同步复位，复位到0x3000</li>
<li>任何时刻，输出当前PC寄存器对应地址中的指令</li>
<li>收到冻结信号时忽略clk上沿，PC &lt;= PC</li>
<li>每个clk上沿更新PC的值：</li>
</ul>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (PCSrc == <span class="number">2&#x27;b00</span> || (PCSrc == <span class="number">2&#x27;b01</span> &amp;&amp; ALUZero == <span class="number">0</span>)) <span class="keyword">begin</span> <span class="comment">// 无b/j指令或b指令无效，直接PC+=4</span></span><br><span class="line">  PC &lt;= PC + <span class="number">4</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (PCSrc == <span class="number">2&#x27;b01</span> &amp;&amp; ALUZero == <span class="number">1</span>) <span class="keyword">begin</span> <span class="comment">// b类指令生效</span></span><br><span class="line">  PC &lt;= PC + <span class="number">4</span> + &#123;&#123;<span class="number">14</span>&#123;PCImm[<span class="number">15</span>]&#125;&#125;, PCImm, &#123;<span class="number">2</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (PCSrc == <span class="number">2&#x27;b10</span>) <span class="keyword">begin</span> <span class="comment">// jal</span></span><br><span class="line">  PC &lt;= &#123;PC[<span class="number">31</span>:<span class="number">28</span>], PCInstrIndex, &#123;<span class="number">2</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span> <span class="comment">// jr</span></span><br><span class="line">  PC &lt;= PCJumpReg;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="controller-集中译码器-f"><a class="markdownIt-Anchor" href="#controller-集中译码器-f"></a> Controller 集中译码器 (F)</h2>
<h3 id="功能要求-2"><a class="markdownIt-Anchor" href="#功能要求-2"></a> 功能要求</h3>
<p>将输入的OPCode和func转化为CPU各部分对应信号输出，各信号随流水线逐级传递。</p>
<h3 id="实现方式"><a class="markdownIt-Anchor" href="#实现方式"></a> 实现方式</h3>
<p>分类判断后指定各项输出的值。</p>
<h3 id="输入端口-2"><a class="markdownIt-Anchor" href="#输入端口-2"></a> 输入端口</h3>
<ul>
<li>OPCode [5:0] 标识命令种类的指令，按MIPS汇编标准执行</li>
<li>func [5:0] 标识R型指令具体种类的指令，按MIPS汇编标准执行</li>
</ul>
<h3 id="输出端口-2"><a class="markdownIt-Anchor" href="#输出端口-2"></a> 输出端口</h3>
<ul>
<li>
<p>CmpType [3:0] 分支指令比较方法 -&gt;CMP</p>
</li>
<li>
<p>ExtType 决定扩展器扩展类型，0零扩展，1符号扩展 -&gt;EXT</p>
</li>
<li>
<p>PCSrc [1:0] 决定下条PC指令使用何处输入，00代表PC+=4，01代表branch，10代表jal，11代表jr -&gt;IFU</p>
</li>
<li>
<p>ALUCtrl [3:0] 决定当前ALU执行何种运算，具体见ALU说明</p>
</li>
<li>
<p>ALUSrc [1:0] 决定ALU的第二参来自GRF的RD2（对应值0）还是立即数（对应值1）还是shamt（对应值2）</p>
</li>
<li>
<p>MemWrite 决定DM是否允许写入</p>
</li>
<li>
<p>MemType [3:0] 向寄存器存储数据的类型（具体说明参考DM）</p>
</li>
<li>
<p>RegDataSrc [1:0] 决定GRF写入数据来源，00代表ALU输出，01代表DM输出，10代表PCNxt</p>
</li>
<li>
<p>RegDest [1:0]决定GRF写入地址来源是Inst[20:16]（rt, 对应值00，I型）还是Inst[15:11]（rd, 对应值01，R型），还是31即$ra（对应值10，jal）</p>
</li>
<li>
<p>RegWrite 决定GRF是否允许写入</p>
</li>
<li>
<p>Tnew [3:0] 对应A-T法的Tnew，为D端值，每经过一级寄存器Tnew = max{Tnew-1, 0}</p>
</li>
<li>
<p>TuseE [3:0] 对应A-T法的Tuse，对应A1参数的Tuse</p>
</li>
<li>
<p>TuseM [3:0] 对应A-T法的Tuse，对应A2参数的Tuse</p>
</li>
</ul>
<h2 id="cmp-比较模块-d"><a class="markdownIt-Anchor" href="#cmp-比较模块-d"></a> CMP 比较模块 (D)</h2>
<h3 id="功能要求-3"><a class="markdownIt-Anchor" href="#功能要求-3"></a> 功能要求</h3>
<ul>
<li>实现单周期CPU中ALU为分支指令实现的比较功能</li>
<li>纯组合逻辑</li>
</ul>
<h3 id="输入端口-3"><a class="markdownIt-Anchor" href="#输入端口-3"></a> 输入端口</h3>
<ul>
<li>RD1 [31:0] 第一参</li>
<li>RD2 [31:0] 第二参</li>
<li>CmpType [3:0] 比较方法</li>
</ul>
<h3 id="输出端口-3"><a class="markdownIt-Anchor" href="#输出端口-3"></a> 输出端口</h3>
<ul>
<li>CmpOut 输出是否可以进行分支</li>
</ul>
<h3 id="行为描述"><a class="markdownIt-Anchor" href="#行为描述"></a> 行为描述</h3>
<table>
<thead>
<tr>
<th>CmpType</th>
<th>比较行为描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>输出是否相等，即 RD1 == RD2</td>
</tr>
<tr>
<td>1</td>
<td>暂不定义</td>
</tr>
<tr>
<td>2</td>
<td>暂不定义</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<h2 id="ext-扩展器-d"><a class="markdownIt-Anchor" href="#ext-扩展器-d"></a> EXT 扩展器 (D)</h2>
<h3 id="功能要求-4"><a class="markdownIt-Anchor" href="#功能要求-4"></a> 功能要求</h3>
<ul>
<li>将输入的立即数进行扩展</li>
</ul>
<h3 id="输入端口-4"><a class="markdownIt-Anchor" href="#输入端口-4"></a> 输入端口</h3>
<ul>
<li>Imm [15:0] Inst指令中的立即数部分</li>
<li>ExtType 扩展方式</li>
</ul>
<h3 id="输出端口-4"><a class="markdownIt-Anchor" href="#输出端口-4"></a> 输出端口</h3>
<ul>
<li>ExtOut [31:0] 扩展后的结果</li>
</ul>
<h3 id="行为描述-2"><a class="markdownIt-Anchor" href="#行为描述-2"></a> 行为描述</h3>
<table>
<thead>
<tr>
<th>ExtType</th>
<th>扩展行为描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>进行零扩展，即返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mo stretchy="false">{</mo><mn>16</mn><mo stretchy="false">{</mo><msup><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi>b</mi><mn>0</mn><mo stretchy="false">}</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\{16\{1&#x27;b0\}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">6</span><span class="mopen">{</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mord">0</span><span class="mclose">}</span><span class="mclose">}</span></span></span></span>, Imm}</td>
</tr>
<tr>
<td>1</td>
<td>进行符号扩展，即返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mo stretchy="false">{</mo><mn>16</mn><mo stretchy="false">{</mo><mi>I</mi><mi>m</mi><mi>m</mi><mo stretchy="false">[</mo><mn>15</mn><mo stretchy="false">]</mo><mo stretchy="false">}</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\{16\{Imm[15]\}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">6</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">m</span><span class="mord mathnormal">m</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">5</span><span class="mclose">]</span><span class="mclose">}</span><span class="mclose">}</span></span></span></span>, Imm}</td>
</tr>
</tbody>
</table>
<h2 id="grf-通用寄存器组-d"><a class="markdownIt-Anchor" href="#grf-通用寄存器组-d"></a> GRF 通用寄存器组 (D)</h2>
<h3 id="功能要求-5"><a class="markdownIt-Anchor" href="#功能要求-5"></a> 功能要求</h3>
<ul>
<li>用具有写使能的寄存器实现，寄存器总数为 32 个，应具有<strong>同步复位</strong>功能。</li>
<li><strong>0 号寄存器</strong>的值始终保持为 0。其他寄存器<strong>初始值（复位后）均为 0</strong>，无需专门设置。</li>
<li>支持GPR内部转发，即读取地址等于写入地址时，直接输出写入数据。</li>
</ul>
<h3 id="输入端口-5"><a class="markdownIt-Anchor" href="#输入端口-5"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset同步复位信号</li>
<li>WE 写使能信号</li>
<li>A1 [4:0] 第一读取地址</li>
<li>A2 [4:0] 第二读取地址</li>
<li>A3 [4:0] 写入地址</li>
<li>WD [31:0] 写入数据输入</li>
</ul>
<h3 id="输出端口-5"><a class="markdownIt-Anchor" href="#输出端口-5"></a> 输出端口</h3>
<ul>
<li>RD1 [31:0] 第一读取输出 输出A1地址的寄存器中的数据</li>
<li>RD2 [31:0] 第二读取输出 输出A2地址的寄存器中的数据</li>
</ul>
<h3 id="功能说明"><a class="markdownIt-Anchor" href="#功能说明"></a> 功能说明</h3>
<ul>
<li>任何时刻，RD1和RD2都输出A1和A2对应地址的寄存器中的数据</li>
<li>Reset同步复位，将所有寄存器复位为0</li>
<li>0号寄存器永远保持为0</li>
<li>当WE为真时，将WD的数据在clk上沿写入A3对应地址的寄存器</li>
<li>读取地址等于写入地址时，直接输出写入数据。</li>
</ul>
<h2 id="alu-算术逻辑单元-e"><a class="markdownIt-Anchor" href="#alu-算术逻辑单元-e"></a> ALU 算术逻辑单元 (E)</h2>
<h3 id="功能要求-6"><a class="markdownIt-Anchor" href="#功能要求-6"></a> 功能要求</h3>
<ul>
<li>提供 32 位加、减、或运算及大小比较等功能。</li>
<li>加减法按无符号处理（不考虑溢出）。</li>
</ul>
<h3 id="输入端口-6"><a class="markdownIt-Anchor" href="#输入端口-6"></a> 输入端口</h3>
<ul>
<li>SrcA [31:0] 第一个参数输入</li>
<li>SrcB [31:0] 第二个参数输入</li>
<li>ALUCtrl [3:0] ALU操作类型控制码</li>
</ul>
<h3 id="输出端口-6"><a class="markdownIt-Anchor" href="#输出端口-6"></a> 输出端口</h3>
<ul>
<li>ALUResult [31:0] 计算结果</li>
</ul>
<h3 id="控制信号说明"><a class="markdownIt-Anchor" href="#控制信号说明"></a> 控制信号说明</h3>
<table>
<thead>
<tr>
<th>ALUCtrl</th>
<th>计算行为描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>按位或</td>
</tr>
<tr>
<td>1</td>
<td>按位与</td>
</tr>
<tr>
<td>2</td>
<td>不判断溢出的加法</td>
</tr>
<tr>
<td>3</td>
<td>不判断溢出的减法</td>
</tr>
<tr>
<td>4</td>
<td>立即数置高位</td>
</tr>
</tbody>
</table>
<h2 id="dm-数据存储器m"><a class="markdownIt-Anchor" href="#dm-数据存储器m"></a> DM 数据存储器（M）</h2>
<h3 id="功能要求-7"><a class="markdownIt-Anchor" href="#功能要求-7"></a> 功能要求</h3>
<ul>
<li>使用 RAM 实现，容量为 32bit × 3072字，应具有<strong>同步复位</strong>功能，复位值为 0x00000000。</li>
<li><strong>起始地址：0x00000000</strong>。</li>
</ul>
<h3 id="输入端口-7"><a class="markdownIt-Anchor" href="#输入端口-7"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset 同步复位信号</li>
<li>WE 写使能信号</li>
<li>MemType [3:0] 向内存存储数据的类型</li>
<li>Addr [31:0] 写入/读取地址</li>
<li>WD [31:0] 写入数据</li>
</ul>
<h3 id="输出端口-7"><a class="markdownIt-Anchor" href="#输出端口-7"></a> 输出端口</h3>
<ul>
<li>RD [31:0] 读取结果数据</li>
</ul>
<h3 id="功能说明-2"><a class="markdownIt-Anchor" href="#功能说明-2"></a> 功能说明</h3>
<ul>
<li>任何时刻，在RD输出Addr对应内存地址的内存数据</li>
<li>当WE为真时，将WD的数据在clk上沿写入Addr对应内存地址</li>
<li>MemType类型对应存储类型格式说明如下：</li>
</ul>
<table>
<thead>
<tr>
<th>MemType</th>
<th>对应指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>4‘d0</td>
<td>lw, sw</td>
<td>以字为单位进行存取</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<h2 id="hh-冒险处理模块"><a class="markdownIt-Anchor" href="#hh-冒险处理模块"></a> HH 冒险处理模块</h2>
<h3 id="功能要求-8"><a class="markdownIt-Anchor" href="#功能要求-8"></a> 功能要求</h3>
<ul>
<li>判断是否进行阻塞/转发操作并执行</li>
<li>组合逻辑</li>
</ul>
<h3 id="输入端口-8"><a class="markdownIt-Anchor" href="#输入端口-8"></a> 输入端口</h3>
<h4 id="重要说明"><a class="markdownIt-Anchor" href="#重要说明"></a> 重要说明</h4>
<p><strong>下面提到的A1和A2均指第一个读取值和第二个读取值！！！比如对R型指令就是rs和rt，对于I型指令可能是rs和rt（如beq）也可能是rs和无（如ori）！！！</strong></p>
<p><strong>而A3指的是写入值！！不一定是rd！！！对R型指令是rd，对有写入内容的I型指令是rt！！！</strong></p>
<h4 id="fd流水线寄存器"><a class="markdownIt-Anchor" href="#fd流水线寄存器"></a> F/D流水线寄存器</h4>
<ul>
<li>FD_TuseE [3:0] 此时F/D流水线寄存器中的TuseE</li>
<li>FD_TuseM [3:0] 此时F/D流水线寄存器中的TuseM</li>
<li>FD_A1 [4:0] F/D流水线寄存器中的A1地址</li>
<li>FD_A2 [4:0] F/D流水线寄存器中的A2地址</li>
<li>FD_RD1 [31:0] F/D流水线寄存器中的RD1</li>
<li>FD_RD2 [31:0] F/D流水线寄存器中的RD2</li>
</ul>
<h4 id="de流水线寄存器"><a class="markdownIt-Anchor" href="#de流水线寄存器"></a> D/E流水线寄存器</h4>
<ul>
<li>DE_TuseE [3:0] 此时D/E流水线寄存器中的TuseE</li>
<li>DE_TuseM [3:0] 此时D/E流水线寄存器中的TuseM</li>
<li>DE_A1 [4:0] D/E流水线寄存器中的A1地址</li>
<li>DE_A2 [4:0] D/E流水线寄存器中的A2地址</li>
<li>DE_A3 [4:0] D/E流水线寄存器中的A3地址</li>
<li>DE_RD1 [31:0] D/E流水线寄存器中的RD1</li>
<li>DE_RD2 [31:0] D/E流水线寄存器中的RD2</li>
<li>DE_Tnew [3:0] 此时D/E流水线寄存器中的Tnew</li>
<li>DE_RegWrite 此时D/E流水线寄存器中的RegWrite</li>
</ul>
<h4 id="em流水线寄存器"><a class="markdownIt-Anchor" href="#em流水线寄存器"></a> E/M流水线寄存器</h4>
<ul>
<li>EM_TuseM [3:0] 此时E/M流水线寄存器中的TuseM</li>
<li>EM_A2 [4:0] E/M流水线寄存器中的A2地址</li>
<li>EM_A3 [4:0] E/M流水线寄存器中的A3地址</li>
<li>EM_RD2 [31:0] E/M流水线寄存器中的RD2</li>
<li>EM_Tnew [3:0] 此时E/M流水线寄存器中的Tnew</li>
<li>EM_RegWrite E/M流水线寄存器中代表是否可写的指令</li>
<li>EM_RegData [31:0] E/M流水线寄存器中GRF写入数据</li>
</ul>
<h4 id="mw流水线寄存器"><a class="markdownIt-Anchor" href="#mw流水线寄存器"></a> M/W流水线寄存器</h4>
<ul>
<li>MW_Tnew [3:0] 此时E/M流水线寄存器中的Tnew</li>
<li>MW_RegWrite M/W流水线寄存器中代表是否可写的指令，同时指示当前是否有写入操作</li>
<li>MW_A3 [4:0] M/W流水线寄存器中的A3地址</li>
<li>MW_RD2 [31:0]</li>
<li>MW_RegData [31:0] M/W流水线寄存器中GRF写入数据</li>
</ul>
<h3 id="输出端口-8"><a class="markdownIt-Anchor" href="#输出端口-8"></a> 输出端口</h3>
<h4 id="f级"><a class="markdownIt-Anchor" href="#f级"></a> F级</h4>
<ul>
<li>IFUFroze IFU的冻结信号，代表禁止更新指令</li>
</ul>
<h4 id="fd流水线寄存器-2"><a class="markdownIt-Anchor" href="#fd流水线寄存器-2"></a> F/D流水线寄存器</h4>
<ul>
<li>FDFroze 向F/D流水线寄存器传递的冻结信号，代表输出nop而非寄存器值</li>
</ul>
<h4 id="d级"><a class="markdownIt-Anchor" href="#d级"></a> D级</h4>
<ul>
<li>RD1ForwardD  [31:0] 寄存器读取的第一参结果</li>
<li>RD2ForwardD  [31:0] 寄存器读取的第二参结果</li>
</ul>
<h4 id="e级"><a class="markdownIt-Anchor" href="#e级"></a> E级</h4>
<ul>
<li>RD1ForwardE  [31:0] 寄存器读取的第一参结果</li>
<li>RD2ForwardE  [31:0] 寄存器读取的第二参结果</li>
</ul>
<h4 id="m级"><a class="markdownIt-Anchor" href="#m级"></a> M级</h4>
<ul>
<li>WDForward  [31:0] DM写入的数据结果</li>
</ul>
<h2 id="各控制信号说明图表"><a class="markdownIt-Anchor" href="#各控制信号说明图表"></a> 各控制信号说明图表</h2>
<table>
<thead>
<tr>
<th>op</th>
<th>00 0000</th>
<th>00 0000</th>
<th>00 1101</th>
<th style="text-align:left">10 0011</th>
<th>10 1011</th>
<th>00 0100</th>
<th>00 1111</th>
<th>00 0011</th>
<th>00 0000</th>
<th>default</th>
</tr>
</thead>
<tbody>
<tr>
<td>func</td>
<td>10 0000</td>
<td>10 0010</td>
<td>-</td>
<td style="text-align:left">-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>00 1000</td>
<td></td>
</tr>
<tr>
<td></td>
<td>add</td>
<td>sub</td>
<td>ori</td>
<td style="text-align:left">lw</td>
<td>sw</td>
<td>beq</td>
<td>lui</td>
<td>jal</td>
<td>jr</td>
<td></td>
</tr>
<tr>
<td>CmpType</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td style="text-align:left">0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>ExtType</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td style="text-align:left">1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>PCSrc</td>
<td>00</td>
<td>00</td>
<td>00</td>
<td style="text-align:left">00</td>
<td>00</td>
<td>01</td>
<td>00</td>
<td>10</td>
<td>11</td>
<td>0</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ALUCtrl</td>
<td>2</td>
<td>3</td>
<td>5</td>
<td style="text-align:left">2</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>-</td>
<td>-</td>
<td>0</td>
</tr>
<tr>
<td>(CalcMode)</td>
<td>add</td>
<td>sub</td>
<td>ori</td>
<td style="text-align:left">add</td>
<td>add</td>
<td>sub</td>
<td>lui</td>
<td>-</td>
<td>-</td>
<td></td>
</tr>
<tr>
<td>ALUSrc</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td style="text-align:left">1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>-</td>
<td>-</td>
<td>0</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>MemWrite</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td style="text-align:left">0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>RegDataSrc</td>
<td>00</td>
<td>00</td>
<td>00</td>
<td style="text-align:left">01</td>
<td>-</td>
<td>-</td>
<td>00</td>
<td>10</td>
<td>-</td>
<td>0</td>
</tr>
<tr>
<td>RegDest</td>
<td>01</td>
<td>01</td>
<td>00</td>
<td style="text-align:left">00</td>
<td>-</td>
<td>-</td>
<td>00</td>
<td>10</td>
<td>-</td>
<td>0</td>
</tr>
<tr>
<td>MWWrite</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td style="text-align:left">1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>DEWrite</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td style="text-align:left">0</td>
<td>-</td>
<td>-</td>
<td>0</td>
<td>1</td>
<td>-</td>
<td>0</td>
</tr>
<tr>
<td>EMWrite</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td style="text-align:left">0</td>
<td>-</td>
<td>-</td>
<td>1</td>
<td>0</td>
<td>-</td>
<td>0</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left"></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>TuseE</td>
<td>1 rs</td>
<td>1 rs</td>
<td>1 rs</td>
<td style="text-align:left">1 base</td>
<td>1 base(rs)</td>
<td>0 rs</td>
<td>-</td>
<td>-</td>
<td>0 rs</td>
<td>15</td>
</tr>
<tr>
<td>TuseM</td>
<td>1 rt</td>
<td>1 rt</td>
<td>-</td>
<td style="text-align:left">-</td>
<td>2 rt</td>
<td>0 rt</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>15</td>
</tr>
<tr>
<td>TnewD</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td style="text-align:left">3</td>
<td>-</td>
<td>-</td>
<td>2</td>
<td>2</td>
<td>-</td>
<td>0</td>
</tr>
<tr>
<td>TnewE</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td style="text-align:left">2</td>
<td>-</td>
<td>-</td>
<td>1</td>
<td>1</td>
<td>-</td>
<td></td>
</tr>
<tr>
<td>TnewM</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td style="text-align:left">1</td>
<td>-</td>
<td>-</td>
<td>0</td>
<td>0</td>
<td>-</td>
<td></td>
</tr>
<tr>
<td>TnewW</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td style="text-align:left">0</td>
<td>-</td>
<td>-</td>
<td>0</td>
<td>0</td>
<td>-</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>Arch</tag>
        <tag>CO</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成 P4 CPU 设计文档</title>
    <url>/2022/11/06/CO-P4-CPU/</url>
    <content><![CDATA[<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<h3 id="1-dm输入示例"><a class="markdownIt-Anchor" href="#1-dm输入示例"></a> 1 DM输入示例</h3>
<p>addr信号从ALU的输出结果取[11:2]得到，使用到DM的指令有lw和sw，都需要将对应寄存器值和立即数相加，因此这里DM的地址应为对应的ALU输出的相加结果。</p>
<p>位数是[11:2]而不是[9:0]因为DM是按字对齐，（目前）仅支持按字读取和写入，且DM内部存储数据是以类似这样的格式存储：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] im_reg [<span class="number">0</span>:<span class="number">1023</span>]</span><br></pre></td></tr></table></figure>
<p>是按照32位数的数组进行存储的，因此如果输入时直接取[11:2]位（代表截去最低两位）可以直接取im_reg[addr]得到所需数据，不采用[9:0]的描述也是为了不混淆，明确展示这里取的是截取了末两位后取10位的ALU结果而不是直接取低10位的结果。</p>
<h3 id="2-两种不同控制器译码方式"><a class="markdownIt-Anchor" href="#2-两种不同控制器译码方式"></a> 2 两种不同控制器译码方式</h3>
<p>在Verilog编程中，记录<strong>指令对应的控制信号如何取值</strong>对应使用always @(*)模块，对于每个指令为控制信号赋值，以lui和jal指令为例，给出如下组合逻辑代码示例：（将输出各值定义为寄存器，此处为简便省略了default分支）</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">case</span>(OPCode)			</span><br><span class="line">		<span class="number">6&#x27;b00_1111</span>: <span class="keyword">begin</span></span><br><span class="line">    	<span class="comment">// lui</span></span><br><span class="line">    	Mem2Reg &lt;= <span class="number">2&#x27;b00</span>;</span><br><span class="line">      MemWrite &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">      PCSrc &lt;= <span class="number">2&#x27;b00</span>;</span><br><span class="line">      ALUCtrl &lt;= <span class="number">4&#x27;b0100</span>; <span class="comment">// lui</span></span><br><span class="line">      ALUSrc &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">      RegDest &lt;= <span class="number">2&#x27;b00</span>;</span><br><span class="line">      RegWrite &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">   	<span class="number">6&#x27;b00_0011</span>: <span class="keyword">begin</span></span><br><span class="line">    	<span class="comment">// jal</span></span><br><span class="line">      Mem2Reg &lt;= <span class="number">2&#x27;b10</span>;</span><br><span class="line">      MemWrite &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">      PCSrc &lt;= <span class="number">2&#x27;b10</span>;</span><br><span class="line">      ALUCtrl &lt;= <span class="number">4&#x27;b0000</span>;</span><br><span class="line">      ALUSrc &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">      RegDest &lt;= <span class="number">2&#x27;b10</span>;</span><br><span class="line">      RegWrite &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">// there should be a &quot;default&quot;, but too long so we don&#x27;t write it here</span></span><br><span class="line">  <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>而对于记录<strong>控制信号每种取值所对应的指令</strong>，对应使用assign模块直接判断指令是否是某个值，以jal和lw为例，给出如下组合逻辑代码：（省略了部分output数据）</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">wire</span> isJal, isLw;</span><br><span class="line"><span class="keyword">assign</span> isJal = (op == <span class="number">6&#x27;b00_0011</span>);</span><br><span class="line"><span class="keyword">assign</span> isLw = (op == <span class="number">6&#x27;b10_0011</span>);</span><br><span class="line"><span class="keyword">assign</span> Mem2Reg[<span class="number">0</span>] = isLw;</span><br><span class="line"><span class="keyword">assign</span> Mem2Reg[<span class="number">1</span>] = isJal;</span><br><span class="line"><span class="keyword">assign</span> RegWrite = isLw || isJal;</span><br><span class="line"><span class="comment">// there are more output wires but too long so we don&#x27;t write it here</span></span><br></pre></td></tr></table></figure>
<p>可以看到，第一种形式按照输入的指令类型进行区分，第二种形式根据输出的端口类型进行区分。第二种不需要额外增加reg变量且代码相对更加简便，对于许多种指令只需要每个控制码输出（的每个位）写一行，对所有该值取1的指令或一遍即可。但是第二种写法缺乏可读性，不能一目了然地得到每个指令对应的控制码，增加新指令时也容易写错，而第一种按照不同的指令区分，可读性较高。因此这里选择了第一种写法。</p>
<h3 id="3-对比同步异步复位"><a class="markdownIt-Anchor" href="#3-对比同步异步复位"></a> 3 对比同步异步复位</h3>
<p>同步复位中以clk上升沿为准，如果clk上升沿时有reset再复位，因此<strong>clk信号比reset信号优先</strong>。</p>
<p>异步复位中只要reset为真就进行复位，不考虑clk的值，因此<strong>reset信号比clk信号优先</strong>。</p>
<h3 id="4-解释addi-addiu以及add-addu的等价性"><a class="markdownIt-Anchor" href="#4-解释addi-addiu以及add-addu的等价性"></a> 4 解释addi addiu以及add addu的等价性</h3>
<p>在<em>MIPS32® Architecture For Programmers Volume II: The MIPS32® Instruction Set</em>中描述指令行为的部分，Add指令的行为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">temp &lt;- &#123;GPR[rs][31], GPR[rs][31:0]&#125; + &#123;GPR[rt][31], GPR[rt][31:0]&#125;</span><br><span class="line">if temp[32] != temp[31] then</span><br><span class="line">	SignalException(IntegerOverflow)</span><br><span class="line">else</span><br><span class="line">	GPR[rd] &lt;- temp</span><br><span class="line">endif</span><br></pre></td></tr></table></figure>
<p>而Addu指令行为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">temp &lt;- GPR[rs] + GPR[rt]</span><br><span class="line">GPR[rd] &lt;- temp</span><br></pre></td></tr></table></figure>
<p>（Addi和Addiu指令大同小异，只是将对应的第二参寄存器值替换为符号扩展到33位（addi）或32位（addiu）的立即数而已，这里不额外附上对应伪代码）</p>
<p>可以看到，“有符号”加法Add在计算中将两个加数符号扩展到33位数，加和之后判断结果数第33位和第32位是否相等，不等的话报错“整型溢出”。逻辑很好理解——如果扩展到33位后结果数的符号位（第33位）和最高位（第32位）不等，代表使用32位数无法正确表达结果的正负性，此时就发生了结果溢出。如果忽略溢出，也就是在32位数可表达范围内规定最大值+1得到最小值，最小值-1得到最大值，则显然不需要上述处理。同理对于addi和addiu也是如此。</p>
<h2 id="测试方法"><a class="markdownIt-Anchor" href="#测试方法"></a> 测试方法</h2>
<p>采用了讨论区中石睿知同学分享的自动生成输出的魔改MARS，并且使用了如下的自动生成测试汇编代码的python程序生成汇编代码，通过将运行结果比对来进行调试。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint <span class="keyword">as</span> rd</span><br><span class="line"></span><br><span class="line">reg_calci = [<span class="string">&quot;ori&quot;</span>]</span><br><span class="line">reg_calc = [<span class="string">&quot;add&quot;</span>, <span class="string">&quot;sub&quot;</span>]</span><br><span class="line">branch = [<span class="string">&quot;beq&quot;</span>]</span><br><span class="line"><span class="comment"># load_memory = [&quot;lw&quot;]</span></span><br><span class="line"><span class="comment"># write_memory = [&quot;sw&quot;]</span></span><br><span class="line">jump = [<span class="string">&quot;jal&quot;</span>]</span><br><span class="line">jump_reg = [<span class="string">&quot;jr&quot;</span>]</span><br><span class="line">load_high = [<span class="string">&quot;lui&quot;</span>]</span><br><span class="line">space = [<span class="string">&quot;nop&quot;</span>]</span><br><span class="line"></span><br><span class="line">IMM_HIGH = <span class="number">100</span></span><br><span class="line">IMM_LOW = <span class="number">1</span></span><br><span class="line">DATA_MAX = <span class="number">10</span></span><br><span class="line">auto_label_cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ran</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">return</span> arr[rd(<span class="number">0</span>, <span class="built_in">len</span>(arr)-<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ran_reg</span>():</span><br><span class="line">    <span class="keyword">return</span> rd(<span class="number">1</span>, <span class="number">31</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_calci</span>(<span class="params">pos = -<span class="number">1</span>, rt = get_ran_reg(<span class="params"></span>), rs = get_ran_reg(<span class="params"></span>), </span></span><br><span class="line"><span class="params">                imm = rd(<span class="params">IMM_LOW, IMM_HIGH</span>)</span>):</span><br><span class="line">    <span class="keyword">if</span> pos == -<span class="number">1</span>:</span><br><span class="line">        pos = rd(<span class="number">0</span>, <span class="built_in">len</span>(reg_calci)-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;%s $%d, $%d, %d&quot;</span> % (reg_calci[pos], rt, rs, imm)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_calc</span>(<span class="params">pos = -<span class="number">1</span>, rd = get_ran_reg(<span class="params"></span>), rs = get_ran_reg(<span class="params"></span>), </span></span><br><span class="line"><span class="params">            rt = get_ran_reg(<span class="params"></span>)</span>):</span><br><span class="line">    <span class="keyword">if</span> pos == -<span class="number">1</span>:</span><br><span class="line">        pos = rd(<span class="number">0</span>, <span class="built_in">len</span>(reg_calc)-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;%s $%d, $%d, $%d&quot;</span> % (reg_calc[pos], rd, rs, rt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_branch</span>(<span class="params">pos = -<span class="number">1</span>, rt = get_ran_reg(<span class="params"></span>), rs = get_ran_reg(<span class="params"></span>), </span></span><br><span class="line"><span class="params">                label = <span class="string">&quot;&quot;</span>, neg = <span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">global</span> auto_label_cnt</span><br><span class="line">    <span class="keyword">if</span> pos == -<span class="number">1</span>:</span><br><span class="line">        pos = rd(<span class="number">0</span>, <span class="built_in">len</span>(branch)-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> label == <span class="string">&quot;&quot;</span> <span class="keyword">and</span> neg:</span><br><span class="line">        auto_label_cnt += <span class="number">3</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;jal auto_label_%d\nauto_label_%d:\n%s\njal auto_label_%d\n&quot;</span> \</span><br><span class="line">                <span class="string">&quot;auto_label_%d\n%s $%d, $%d, auto_label_%d\nauto_label_%d:&quot;</span> % \</span><br><span class="line">                (auto_label_cnt-<span class="number">2</span>, auto_label_cnt-<span class="number">1</span>, put_calci(), auto_label_cnt, </span><br><span class="line">                auto_label_cnt-<span class="number">2</span>, branch[pos], rt, rs, auto_label_cnt-<span class="number">1</span>, auto_label_cnt)</span><br><span class="line">    <span class="keyword">if</span> label == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        auto_label_cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s $%d, $%d, auto_label_%d\n%s\nauto_label_%d:\n%s&quot;</span> % \</span><br><span class="line">                (branch[pos], rt, rs, auto_label_cnt, put_calci(), </span><br><span class="line">                auto_label_cnt, put_calci())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;%s $%d, $%d, %s&quot;</span> % (reg_calci[pos], rt, rs, label)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_lw</span>(<span class="params">base = get_ran_reg(<span class="params"></span>), rt = get_ran_reg(<span class="params"></span>), label = <span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> label == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        label = <span class="string">&quot;data_label%d&quot;</span> % rd(<span class="number">1</span>, DATA_MAX)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;lw $%d, %s($%d)&quot;</span> % (rt, label, base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_sw</span>(<span class="params">base = get_ran_reg(<span class="params"></span>), rt = get_ran_reg(<span class="params"></span>), label = <span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> label == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        label = <span class="string">&quot;data_label%d&quot;</span> % rd(<span class="number">1</span>, DATA_MAX)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;sw $%d, %s($%d)&quot;</span> % (rt, label, base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_lsw</span>(<span class="params">base = get_ran_reg(<span class="params"></span>), rt = get_ran_reg(<span class="params"></span>), label = <span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> label == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        label = <span class="string">&quot;data_label%d&quot;</span> % rd(<span class="number">1</span>, DATA_MAX)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;%s\n%s&quot;</span> % (put_lw(base=base, rt=rt, label=label),</span><br><span class="line">                       put_sw(base=base, rt=rt, label=label))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prepare_data</span>():</span><br><span class="line">    s = <span class="string">&quot;.data\n&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, DATA_MAX+<span class="number">1</span>):</span><br><span class="line">        s += <span class="string">&quot;data_label%d: .space 4\n&quot;</span> % i</span><br><span class="line">    s += <span class="string">&quot;\n.text\n&quot;</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>
<h2 id="指令集综述"><a class="markdownIt-Anchor" href="#指令集综述"></a> 指令集综述</h2>
<h3 id="简要说明"><a class="markdownIt-Anchor" href="#简要说明"></a> 简要说明</h3>
<p>包含指令集如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add sub ori lw sw beq lui jal jr nop</span><br></pre></td></tr></table></figure>
<h3 id="r-i-j-型指令说明"><a class="markdownIt-Anchor" href="#r-i-j-型指令说明"></a> R I J 型指令说明</h3>
<h4 id="r型"><a class="markdownIt-Anchor" href="#r型"></a> R型</h4>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add sub and or nor sll srl jr</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">五位立即数</td>
<td style="text-align:center">操作码</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">shamt (sa)</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">恒为0x0</td>
<td style="text-align:center">第一参</td>
<td style="text-align:center">第二参</td>
<td style="text-align:center">目的参</td>
<td style="text-align:center">移位量</td>
<td style="text-align:center">指示操作类型</td>
</tr>
</tbody>
</table>
<h3 id="i型"><a class="markdownIt-Anchor" href="#i型"></a> I型</h3>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addi andi ori xori lw sw beq bne lui</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">立即数</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">imm</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">指示操作类型</td>
<td style="text-align:center">第一参</td>
<td style="text-align:center">目的参</td>
<td style="text-align:center">立即数</td>
</tr>
</tbody>
</table>
<h3 id="j型"><a class="markdownIt-Anchor" href="#j型"></a> J型</h3>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">j jal</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~0 (26)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">指令地址</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">address</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">指示操作类型</td>
<td style="text-align:center">目标跳转位置</td>
</tr>
</tbody>
</table>
<h3 id="无符号加-add"><a class="markdownIt-Anchor" href="#无符号加-add"></a> （无）符号加 add</h3>
<p>按照要求，依照add的机器码处理，但加法依照无符号数加法完成。取两个寄存器中的数，无符号相加（不考虑溢出）后存入目标寄存器。为R型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">0</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000000</td>
<td style="text-align:center">第一加数地址</td>
<td style="text-align:center">第二加数地址</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">100000</td>
</tr>
</tbody>
</table>
<h3 id="无符号减-sub"><a class="markdownIt-Anchor" href="#无符号减-sub"></a> （无）符号减 sub</h3>
<p>按照要求，依照sub的机器码处理，但减法依照无符号数加法完成。无符号相减（不考虑溢出）后存入目标寄存器。为R型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">0</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000000</td>
<td style="text-align:center">被减数地址</td>
<td style="text-align:center">减数地址</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">100010</td>
</tr>
</tbody>
</table>
<h3 id="或立即数-ori"><a class="markdownIt-Anchor" href="#或立即数-ori"></a> 或立即数 ori</h3>
<p>按照要求，即为将某寄存器中数或一个16位立即数，将得到的数存到目标寄存器中。为I型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">imm</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">001101</td>
<td style="text-align:center">被或数地址</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">立即数</td>
</tr>
</tbody>
</table>
<h3 id="加载字-lw"><a class="markdownIt-Anchor" href="#加载字-lw"></a> 加载字 lw</h3>
<p>取内存中的一字长的内容存入目标寄存器。为I型指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addr &lt;- GPR[base] + sign_ext(offset)</span><br><span class="line">GPR[rt] &lt;- memory[addr]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">base</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">offset</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">100011</td>
<td style="text-align:center">内存地址所在寄存器</td>
<td style="text-align:center">结果存储地址</td>
<td style="text-align:center">内存地址偏移量（立即数）</td>
</tr>
</tbody>
</table>
<h3 id="存储字-sw"><a class="markdownIt-Anchor" href="#存储字-sw"></a> 存储字 sw</h3>
<p>将目标寄存器中的内容存入内存中一字长的位置。为I型指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addr &lt;- GPR[base] + sign_ext(offset)</span><br><span class="line">memory[addr] &lt;- GPR[rt] </span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">base</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">offset</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">101011</td>
<td style="text-align:center">内存地址所在寄存器</td>
<td style="text-align:center">目标寄存器地址</td>
<td style="text-align:center">内存地址偏移量（立即数）</td>
</tr>
</tbody>
</table>
<h3 id="相等时转移-beq"><a class="markdownIt-Anchor" href="#相等时转移-beq"></a> 相等时转移 beq</h3>
<p>当两个目标寄存器中存储的值相等时转移到目标指令处。为I型指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (GPR[rs] == GPR[rt])</span><br><span class="line">	PC &lt;- PC + 4 + sign_extend(&#123;offset,2&#123;0&#125;&#125;)</span><br><span class="line">else</span><br><span class="line">	PC &lt;- PC + 4</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">offset</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000100</td>
<td style="text-align:center">第一目标寄存器</td>
<td style="text-align:center">第二目标寄存器</td>
<td style="text-align:center">转移目标指令地址</td>
</tr>
</tbody>
</table>
<h3 id="立即数加载至高位-lui"><a class="markdownIt-Anchor" href="#立即数加载至高位-lui"></a> 立即数加载至高位 lui</h3>
<p>将立即数赋值到目标寄存器的高16位。为I型指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">0</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">imm</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">001111</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">目标寄存器</td>
<td style="text-align:center">立即数</td>
</tr>
</tbody>
</table>
<h3 id="跳转并链接-jal"><a class="markdownIt-Anchor" href="#跳转并链接-jal"></a> 跳转并链接 jal</h3>
<p>将当前的PC+4存储在GPR[31]（$ra）中，按照给定的地址进行跳转。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PC &lt;- &#123;PC[31:28], instr_index, &#123;2&#123;0&#125;&#125;&#125;</span><br><span class="line">GPR[31]($ra) &lt;- PC + 4</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~0 (26)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">instr_index</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000011</td>
<td style="text-align:center">目标跳转位置</td>
</tr>
</tbody>
</table>
<h3 id="跳转至寄存器-jr"><a class="markdownIt-Anchor" href="#跳转至寄存器-jr"></a> 跳转至寄存器 jr</h3>
<p>跳转到目标寄存器存储的地址指定的指令处</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PC &lt;- GPR[rs]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">000000</td>
<td style="text-align:center">目标寄存器地址</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">00000</td>
<td style="text-align:center">001000</td>
</tr>
</tbody>
</table>
<h3 id="空指令-nop"><a class="markdownIt-Anchor" href="#空指令-nop"></a> 空指令 nop</h3>
<p>机器码为0x00000000，不进行任何有效行为。</p>
<h2 id="ifu-取指令单元"><a class="markdownIt-Anchor" href="#ifu-取指令单元"></a> IFU 取指令单元</h2>
<h3 id="功能要求"><a class="markdownIt-Anchor" href="#功能要求"></a> 功能要求</h3>
<ul>
<li>内部包括 PC（程序计数器）、IM（指令存储器）及相关逻辑。</li>
<li>PC <strong>同步复位</strong>，复位值为起始地址。</li>
<li><strong>起始地址：0x00003000。</strong></li>
<li>IM 容量为 32bit × 4096字（按字取的地址宽度12位）。</li>
</ul>
<h3 id="输入端口"><a class="markdownIt-Anchor" href="#输入端口"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset 同步复位信号</li>
<li>PCSrc [1:0] 决定下条PC指令使用何处输入</li>
<li>ALUZero 对应ALU的Zero输出，代表是否允许branch，1代表允许</li>
<li>PCImm [15:0] 符号扩展后的立即数（对应beq给定的立即数）</li>
<li>PCInstrIndex [25:0] J型指令的立即数值（对应jal给定的立即数）</li>
<li>PCJumpReg [31:0] 来自寄存器的跳转地址（对应jr指令对应地址读取到的值）</li>
</ul>
<h3 id="输出端口"><a class="markdownIt-Anchor" href="#输出端口"></a> 输出端口</h3>
<ul>
<li>Inst [31:0] 取得的指令</li>
<li>PCNxt [31:0] 对应PC+4，用于jal</li>
</ul>
<h3 id="行为逻辑"><a class="markdownIt-Anchor" href="#行为逻辑"></a> 行为逻辑</h3>
<ul>
<li>支持同步复位</li>
<li>任何时刻，输出当前PC寄存器对应地址中的指令</li>
<li>每个clk上沿更新PC的值：</li>
</ul>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (PCSrc == <span class="number">2&#x27;b00</span> || (PCSrc == <span class="number">2&#x27;b01</span> &amp;&amp; ALUZero == <span class="number">0</span>)) <span class="keyword">begin</span> <span class="comment">// 无b/j指令或b指令无效，直接PC+=4</span></span><br><span class="line">  PC &lt;= PC + <span class="number">4</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (PCSrc == <span class="number">2&#x27;b01</span> &amp;&amp; ALUZero == <span class="number">1</span>) <span class="keyword">begin</span> <span class="comment">// b类指令生效</span></span><br><span class="line">  PC &lt;= PC + <span class="number">4</span> + &#123;&#123;<span class="number">14</span>&#123;PCImm[<span class="number">15</span>]&#125;&#125;, PCImm, &#123;<span class="number">2</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (PCSrc == <span class="number">2&#x27;b10</span>) <span class="keyword">begin</span> <span class="comment">// jal</span></span><br><span class="line">  PC &lt;= &#123;PC[<span class="number">31</span>:<span class="number">28</span>], PCInstrIndex, &#123;<span class="number">2</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span> <span class="comment">// jr</span></span><br><span class="line">  PC &lt;= PCJumpReg;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="alu-算术逻辑单元"><a class="markdownIt-Anchor" href="#alu-算术逻辑单元"></a> ALU 算术逻辑单元</h2>
<h3 id="功能要求-2"><a class="markdownIt-Anchor" href="#功能要求-2"></a> 功能要求</h3>
<ul>
<li>提供 32 位加、减、或运算及大小比较等功能。</li>
<li>加减法按无符号处理（不考虑溢出）。</li>
</ul>
<h3 id="输入端口-2"><a class="markdownIt-Anchor" href="#输入端口-2"></a> 输入端口</h3>
<ul>
<li>SrcA [31:0] 第一个参数输入</li>
<li>SrcB [31:0] 第二个参数输入</li>
<li>ALUCtrl [3:0] ALU操作类型控制码</li>
</ul>
<h3 id="输出端口-2"><a class="markdownIt-Anchor" href="#输出端口-2"></a> 输出端口</h3>
<ul>
<li>Zero 输出结果是否为0</li>
<li>ALUResult [31:0] 计算结果</li>
</ul>
<h3 id="控制信号说明"><a class="markdownIt-Anchor" href="#控制信号说明"></a> 控制信号说明</h3>
<ul>
<li>或运算 0000</li>
<li>与运算 0001</li>
<li>加法运算（无符号无溢出） 0010</li>
<li>减法运算（无符号无溢出） 0011</li>
<li>立即数加载至高位 0100</li>
<li>或立即数（将SrcB取低16位进行0扩展后和SrcA取或） 0101</li>
</ul>
<h2 id="grf-通用寄存器组"><a class="markdownIt-Anchor" href="#grf-通用寄存器组"></a> GRF 通用寄存器组</h2>
<h3 id="功能要求-3"><a class="markdownIt-Anchor" href="#功能要求-3"></a> 功能要求</h3>
<ul>
<li>用具有写使能的寄存器实现，寄存器总数为 32 个，应具有<strong>同步复位</strong>功能。</li>
<li><strong>0 号寄存器</strong>的值始终保持为 0。其他寄存器<strong>初始值（复位后）均为 0</strong>，无需专门设置。</li>
</ul>
<h3 id="输入端口-3"><a class="markdownIt-Anchor" href="#输入端口-3"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset同步复位信号</li>
<li>WE 写使能信号</li>
<li>A1 [4:0] 第一读取地址</li>
<li>A2 [4:0] 第二读取地址</li>
<li>A3 [4:0] 写入地址</li>
<li>WD [31:0] 写入数据输入</li>
</ul>
<h3 id="输出端口-3"><a class="markdownIt-Anchor" href="#输出端口-3"></a> 输出端口</h3>
<ul>
<li>RD1 [31:0] 第一读取输出 输出A1地址的寄存器中的数据</li>
<li>RD2 [31:0] 第二读取输出 输出A2地址的寄存器中的数据</li>
</ul>
<h3 id="功能说明"><a class="markdownIt-Anchor" href="#功能说明"></a> 功能说明</h3>
<ul>
<li>任何时刻，RD1和RD2都输出A1和A2对应地址的寄存器中的数据</li>
<li>Reset同步复位，将所有寄存器复位为0</li>
<li>0号寄存器永远保持为0</li>
<li>当WE为真时，将WD的数据在clk上沿写入A3对应地址的寄存器</li>
</ul>
<h2 id="dm-数据存储器内存"><a class="markdownIt-Anchor" href="#dm-数据存储器内存"></a> DM 数据存储器（内存）</h2>
<h3 id="功能要求-4"><a class="markdownIt-Anchor" href="#功能要求-4"></a> 功能要求</h3>
<ul>
<li>使用 RAM 实现，容量为 32bit × 3072字，应具有<strong>同步复位</strong>功能，复位值为 0x00000000。</li>
<li><strong>起始地址：0x00000000</strong>。</li>
</ul>
<h3 id="输入端口-4"><a class="markdownIt-Anchor" href="#输入端口-4"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset 同步复位信号</li>
<li>WE 写使能信号</li>
<li>Addr [31:0] 写入/读取地址</li>
<li>WD [31:0] 写入数据</li>
</ul>
<h3 id="输出端口-4"><a class="markdownIt-Anchor" href="#输出端口-4"></a> 输出端口</h3>
<ul>
<li>RD [31:0] 读取结果数据</li>
</ul>
<h3 id="功能说明-2"><a class="markdownIt-Anchor" href="#功能说明-2"></a> 功能说明</h3>
<ul>
<li>任何时刻，在RD输出Addr对应内存地址的内存数据</li>
<li>当WE为真时，将WD的数据在clk上沿写入Addr对应内存地址</li>
</ul>
<h2 id="ext-扩展器"><a class="markdownIt-Anchor" href="#ext-扩展器"></a> EXT 扩展器</h2>
<h3 id="功能要求-5"><a class="markdownIt-Anchor" href="#功能要求-5"></a> 功能要求</h3>
<ul>
<li>将输入的立即数进行扩展</li>
</ul>
<h3 id="输入端口-5"><a class="markdownIt-Anchor" href="#输入端口-5"></a> 输入端口</h3>
<ul>
<li>Imm [15:0] Inst指令中的立即数部分</li>
<li>ExtType 扩展方式</li>
</ul>
<h3 id="输出端口-5"><a class="markdownIt-Anchor" href="#输出端口-5"></a> 输出端口</h3>
<ul>
<li>ExtOut [31:0] 扩展后的结果</li>
</ul>
<h3 id="行为描述"><a class="markdownIt-Anchor" href="#行为描述"></a> 行为描述</h3>
<table>
<thead>
<tr>
<th>ExtType</th>
<th>扩展行为描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>进行零扩展，即返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mo stretchy="false">{</mo><mn>16</mn><mo stretchy="false">{</mo><msup><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi>b</mi><mn>0</mn><mo stretchy="false">}</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\{16\{1&#x27;b0\}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">6</span><span class="mopen">{</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mord">0</span><span class="mclose">}</span><span class="mclose">}</span></span></span></span>, Imm}</td>
</tr>
<tr>
<td>1</td>
<td>进行符号扩展，即返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mo stretchy="false">{</mo><mn>16</mn><mo stretchy="false">{</mo><mi>I</mi><mi>m</mi><mi>m</mi><mo stretchy="false">[</mo><mn>15</mn><mo stretchy="false">]</mo><mo stretchy="false">}</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\{16\{Imm[15]\}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">6</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">m</span><span class="mord mathnormal">m</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">5</span><span class="mclose">]</span><span class="mclose">}</span><span class="mclose">}</span></span></span></span>, Imm}</td>
</tr>
</tbody>
</table>
<h2 id="controller-控制器"><a class="markdownIt-Anchor" href="#controller-控制器"></a> Controller 控制器</h2>
<h3 id="功能要求-6"><a class="markdownIt-Anchor" href="#功能要求-6"></a> 功能要求</h3>
<p>将输入的opcode和funct转化为CPU各部分对应信号输出</p>
<h3 id="实现方式"><a class="markdownIt-Anchor" href="#实现方式"></a> 实现方式</h3>
<p>分类判断后指定各项输出的值。</p>
<h3 id="输入端口-6"><a class="markdownIt-Anchor" href="#输入端口-6"></a> 输入端口</h3>
<ul>
<li>OPCode [5:0] 标识命令种类的指令，按MIPS汇编标准执行</li>
<li>func [5:0] 标识R型指令具体种类的指令，按MIPS汇编标准执行</li>
</ul>
<h3 id="输出端口-6"><a class="markdownIt-Anchor" href="#输出端口-6"></a> 输出端口</h3>
<ul>
<li>ExtType 决定扩展器扩展类型，0零扩展，1符号扩展</li>
<li>Mem2Reg [1:0] 决定GRF写入数据来源，00代表ALU输出，01代表DM输出，10代表PCNxt</li>
<li>MemWrite 决定DM是否允许写入</li>
<li>PCSrc [1:0] 决定下条PC指令使用何处输入，00代表PC+=4，01代表branch，10代表jal，11代表jr</li>
<li>ALUCtrl [3:0] 决定当前ALU执行何种运算，具体见ALU说明</li>
<li>ALUSrc 决定ALU的第二参来自GRF的RD2（对应值0）还是立即数（对应值1）</li>
<li>RegDest [1:0]决定GRF写入地址来源是Inst[20:16]（rt, 对应值00，I型）还是Inst[15:11]（rd, 对应值01，R型），还是31即$ra（对应值10，jal）</li>
<li>RegWrite 决定GRF是否允许写入</li>
</ul>
<h3 id="各指令对应controller输出"><a class="markdownIt-Anchor" href="#各指令对应controller输出"></a> 各指令对应Controller输出</h3>
<table>
<thead>
<tr>
<th>op</th>
<th>00 0000</th>
<th>00 0000</th>
<th>00 1101</th>
<th>10 0011</th>
<th>10 1011</th>
<th>00 0100</th>
<th>00 1111</th>
<th>00 0011</th>
<th>00 0000</th>
</tr>
</thead>
<tbody>
<tr>
<td>func</td>
<td>10 0000</td>
<td>10 0010</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>00 1000</td>
</tr>
<tr>
<td></td>
<td>add</td>
<td>sub</td>
<td>ori</td>
<td>lw</td>
<td>sw</td>
<td>beq</td>
<td>lui</td>
<td>jal</td>
<td>jr</td>
</tr>
<tr>
<td>Mem2Reg</td>
<td>00</td>
<td>00</td>
<td>00</td>
<td>01</td>
<td>-</td>
<td>-</td>
<td>00</td>
<td>10</td>
<td>-</td>
</tr>
<tr>
<td>MemWrite</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>PCSrc</td>
<td>00</td>
<td>00</td>
<td>00</td>
<td>00</td>
<td>00</td>
<td>01</td>
<td>00</td>
<td>10</td>
<td>11</td>
</tr>
<tr>
<td>ALUCtrl</td>
<td>2</td>
<td>3</td>
<td>5</td>
<td>2</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>(CalcMode)</td>
<td>add</td>
<td>sub</td>
<td>ori</td>
<td>add</td>
<td>add</td>
<td>sub</td>
<td>lui</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>ALUSrc</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>RegDest</td>
<td>01</td>
<td>01</td>
<td>00</td>
<td>00</td>
<td>-</td>
<td>-</td>
<td>00</td>
<td>10</td>
<td>-</td>
</tr>
<tr>
<td>RegWrite</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>ExtSign</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>Arch</tag>
        <tag>CO</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成 P6 CPU 设计文档</title>
    <url>/2022/12/09/CO-P6-CPU/</url>
    <content><![CDATA[<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<h3 id="1-单独乘除法部件"><a class="markdownIt-Anchor" href="#1-单独乘除法部件"></a> 1 单独乘除法部件</h3>
<p>由于实际上乘除法计算需要不止一个时钟周期，如果放进ALU，在整个乘除法计算过程中就需要将整个CPU阻塞许多个时钟周期，而如果独立出来乘除法部件，就可以在进行乘除法计算的过程中“并行”地执行其他指令，而不会因为乘除法的计算延迟其他指令（比如add beq等）的进行，有助于提高CPU的效率（指降低总体运行周期数）</p>
<p>设置独立的HI、LO寄存器也是出于类似的考量。首先，如果将乘除法放进ALU，结果按照正常计算指令存入GRF，除了前文提到的会阻塞整个CPU之外，还会遇到另一个问题——乘除法需要同时写入两个寄存器HI和LO，而我们设计的GRF只有一个写入数据端口（也只有一个写入使能端），而且如果要更改为支持同时写入两个数据，不仅GRF需要更改，整个转发逻辑都要更改，会需要对整个CPU进行许多“只对乘除法有用”的修改。</p>
<p>而如果将乘除法模块独立出来，但不设置HI和LO寄存器，除了也会遇到上文中同时写入两个值的情况，还可能在乘除法结束计算时和别的指令“撞车”，就需要处理一系列复杂的阻塞情况。</p>
<p>而如果独立出来HI和LO寄存器，就不会遇到上述一系列问题，是在保持原CPU设计不进行大幅更改而能支持乘除法且保持高效的最好做法。</p>
<h3 id="2-真实的cpu实现乘除法"><a class="markdownIt-Anchor" href="#2-真实的cpu实现乘除法"></a> 2 真实的CPU实现乘除法</h3>
<p>首先是有无符号性，无符号情况直接运算即可，有符号情况下先记录原数符号，再将原数取绝对值后运算，运算结束后根据结果的符号来处理。</p>
<p>具体运算方面，类似实际运算中的竖式计算。</p>
<p>乘法采用一个64位寄存器（初始为0）记录结果，对于乘数A从小到大遍历每一位，如果是0就直接将结果寄存器的数左移一位，如果是1就将乘数B加进结果寄存器后再左移一位。</p>
<p>除法采用32位商寄存器和65位余数寄存器，首先将余数寄存器填充为被除数的绝对值（的零扩展），商寄存器填充0，每次将商寄存器左移一位，最低位填充1，余数寄存器减去除数寄存器内容，判断余数是否小于0：如果是则将商寄存器最低位置1并将余数寄存器减去的内容加回来。</p>
<p>乘除法均为完成32次迭代后输出结果。</p>
<h3 id="3-结合实现分析如何处理busy带来的周期阻塞"><a class="markdownIt-Anchor" href="#3-结合实现分析如何处理busy带来的周期阻塞"></a> 3 结合实现分析如何处理Busy带来的周期阻塞</h3>
<p>添加一个Busy信号，同时乘除法相关操作指令（mfhi mflo mthi mtlo）有对应的MNDUsage控制信号或MNDWE控制信号会置为非默认值（有对应宏定义）。当F/D流水线寄存器中的指令通过这两个信号判断是这类指令时，如果Busy为真，则进行阻塞。</p>
<h3 id="4-采用字节使能信号的好处"><a class="markdownIt-Anchor" href="#4-采用字节使能信号的好处"></a> 4 采用字节使能信号的好处</h3>
<p>清晰性：四个位每位对应一个字节，只要看信号的二进制表示就能清晰地看出需要写入哪几个字节，很明确也很简单。相比之下如果对不同位置sb/sh/sw进行编码，则需要4+2+1=7种信号，虽然只需要三位，但是读起来很不清楚，需要查信号的定义方法才能确定是怎么读信号，不够清晰。</p>
<p>统一性：如果采用上述7种信号3位编码，需要单独判断，单独处理sb/sh/sw三种情况，如果出现其他写内存方式还需要另行扩展，十分不便。而采用字节使能信号则可以直接判断每一字节对应信号是否是1，如果是1就写入对应数据即可，十分统一。</p>
<h3 id="5-使用字节读写的高效情况"><a class="markdownIt-Anchor" href="#5-使用字节读写的高效情况"></a> 5 使用字节读写的高效情况</h3>
<p>我们在进行lw和sw指令时，很多时候都是范围较小的数据，一个字长的范围有大部分内容在写入前后都是0（或读取时高位都是0，读不读不影响结果），因此“实际上”从DM取得的有效数据和向DM写入的有效数据不足一字长。在需要读取的数据能确定同一字长其他字节均为0的情况下，或需要写入的数据同字长其他字节均为0且写入内存同字其他部分也都为0的情况下，则不需要按字读写，只需要按字节读写（或类似地，按半字读写）能获得更高的效率。</p>
<h3 id="6-对抗复杂性的抽象和规范手段"><a class="markdownIt-Anchor" href="#6-对抗复杂性的抽象和规范手段"></a> 6 对抗复杂性的抽象和规范手段</h3>
<p>采用了分类译码的方式，在集中式译码器中通过多重case语句，先将同类语句分类，设置这一类语句共同的控制信号值，再用内层case对每一种不同语句设置特定控制信号值。</p>
<p>同时对于乘除法相关指令采用了四个控制信号的方式，虽然这样控制信号较多，但逻辑清晰便于使用整理。</p>
<p>同时所有的值都采用宏定义的方式统一命名，减少出错情况。下面是译码器中乘除法部分，作为示例：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="7-不同指令类型组合的冲突和解决方式"><a class="markdownIt-Anchor" href="#7-不同指令类型组合的冲突和解决方式"></a> 7 不同指令类型组合的冲突和解决方式</h3>
<p>在P5的基础上，计算指令、访存指令和跳转分支指令除了对应的ALU计算方式和CMP比较方式有所区分之外，并没有明显区别，实际的冲突类型和冲突方式和P5类似，不再赘述。</p>
<p>因此主要新增问题集中在乘除法指令上。主要有以下几个问题：</p>
<ul>
<li>乘除法指令在busy时的阻塞问题，在mult/multu/div/divu后不同周期后跟mfhi/mflo/mthi/mtlo进行测试</li>
<li>mfhi/mflo需要写入GRF，因此后跟jr/beq/bne时需要阻塞，分别举例阻塞即可</li>
<li>mult/multu/div/divu/mthi/mtlo需要在E级使用对应寄存器的值，需要考虑相关的阻塞和转发问题，如跟在lw后等（如果采用A-T法，将对应的Tuse值设置为和计算类指令相同即可，实际上如果P5没有问题的情况下应该不容易出问题）</li>
</ul>
<p>实际问题集中在增量开发上，只要前期CPU设计符合规范，抽象方法合适，基本上不容易出大问题。</p>
<h3 id="8-测试策略"><a class="markdownIt-Anchor" href="#8-测试策略"></a> 8 测试策略</h3>
<p>首先我们将指令分为如下几个大类：（含扩展指令）（实际在译码器中也是类似的分类）</p>
<ul>
<li>R型 跳转到寄存器 jr jalr</li>
<li>R型计算 add addu sub subu and or xor nor slt sltu sll sllv srl srlv sra srav</li>
<li>R型 乘除法相关 mult multu div divu mfhi mflo mthi mtlo</li>
<li>lui</li>
<li>I型计算 ori andi addi addiu slti sltiu xori</li>
<li>分支 beq bne bgez bgtz blez bltz</li>
<li>读内存 lw lh lhu lb lbu</li>
<li>写内存 sw sh sb</li>
<li>J型指令 jal j</li>
</ul>
<h4 id="测试预处理"><a class="markdownIt-Anchor" href="#测试预处理"></a> 测试预处理</h4>
<p>首先随机生成大量计算指令，将1～31号寄存器填充好不同的值</p>
<p>然后随机生成大量写内存指令，尽量将内存填入不同内容</p>
<h4 id="转发测试"><a class="markdownIt-Anchor" href="#转发测试"></a> 转发测试</h4>
<ul>
<li>W-E转发，隔一条指令分别运行同寄存器的读内存指令和（R型/I型计算，乘除法相关）指令</li>
<li>M-E转发，连续运行同寄存器递增的（R型/I型计算，乘除法相关）指令</li>
<li>W-M转发，读内存后加写内存操作，同寄存器</li>
<li>GPR内部转发，隔两条指令运行的同寄存器指令，第一条有写操作，第二条用到同寄存器即可</li>
<li>M-D转发，隔一条指令分别运行同寄存器指令，第一条有写操作，第二条用到同寄存器即可</li>
</ul>
<p>将上述不同转发情况用生成程序+修改操作数进行多次叠加修改，测试多重转发，随机生成多组连续内容。</p>
<h4 id="阻塞测试"><a class="markdownIt-Anchor" href="#阻塞测试"></a> 阻塞测试</h4>
<ul>
<li>连续运行同寄存器的读内存指令和（R型/I型计算，乘除法相关）指令</li>
<li>在分支指令或跳转寄存器指令前加任何写寄存器指令</li>
</ul>
<h4 id="综合测试"><a class="markdownIt-Anchor" href="#综合测试"></a> 综合测试</h4>
<ul>
<li>首先对计算指令进行测试，随机生成大量不含跳转或分支指令的各类计算指令，考虑按照五条进行分类，不同类别排列组合进行测试</li>
<li>对于每种指令，测试分支类和跳转类指令分别在紧跟、隔一条、隔两条、隔三条的位置跳转的情况，分别对向前跳转和向后跳转进行测试</li>
<li>先向某寄存器写入对应跳转目标的指令位置，然后分别测试前述写入指令和跳转到寄存器指令间隔0、1、2、3条指令的情况，再在相隔更远的情况下用类似分支和跳转类测试的方式测试，注意不能更改跳转目标寄存器。</li>
</ul>
<h2 id="指令集综述"><a class="markdownIt-Anchor" href="#指令集综述"></a> 指令集综述</h2>
<h3 id="简要说明"><a class="markdownIt-Anchor" href="#简要说明"></a> 简要说明</h3>
<p>包含指令集如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add sub and or slt sltu lui</span><br><span class="line">addi andi ori</span><br><span class="line">lb lh lw sb sh sw</span><br><span class="line">mult multu div divu mfhi mflo mthi mtlo</span><br><span class="line">beq bne jal jr</span><br></pre></td></tr></table></figure>
<h3 id="r-i-j-型指令说明"><a class="markdownIt-Anchor" href="#r-i-j-型指令说明"></a> R I J 型指令说明</h3>
<h4 id="r型"><a class="markdownIt-Anchor" href="#r型"></a> R型</h4>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add sub and or slt sltu mult multu div divu mfhi mflo mthi mtlo jr</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16 (5)</th>
<th style="text-align:center">15~11 (5)</th>
<th style="text-align:center">10~6 (5)</th>
<th style="text-align:center">5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">五位立即数</td>
<td style="text-align:center">操作码</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">rd</td>
<td style="text-align:center">shamt (sa)</td>
<td style="text-align:center">func</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">恒为0x0</td>
<td style="text-align:center">第一参</td>
<td style="text-align:center">第二参</td>
<td style="text-align:center">目的参</td>
<td style="text-align:center">移位量</td>
<td style="text-align:center">指示操作类型</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>25~21 (5)</th>
<th>20~16 (5)</th>
<th>15~11 (5)</th>
<th>10~6 (5)</th>
<th>5~0 (6)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td>寄存器地址</td>
<td>寄存器地址</td>
<td>寄存器地址</td>
<td>五位立即数</td>
<td>操作码</td>
</tr>
<tr>
<td>指令名</td>
<td>指令解释</td>
<td>rs</td>
<td>rt</td>
<td>rd</td>
<td>shamt  (sa)</td>
<td>func</td>
</tr>
<tr>
<td>add</td>
<td>GPR[rd] &lt;= GPR[rs] + GPR[rt]</td>
<td>rs</td>
<td>rt</td>
<td>rd</td>
<td>00000</td>
<td>10_0000</td>
</tr>
<tr>
<td>sub</td>
<td>GPR[rd] &lt;= GPR[rs] - GPR[rt]</td>
<td>rs</td>
<td>rt</td>
<td>rd</td>
<td>00000</td>
<td>10_0010</td>
</tr>
<tr>
<td>and</td>
<td>GPR[rd] &lt;= GPR[rs] &amp; GPR[rt]</td>
<td>rs</td>
<td>rt</td>
<td>rd</td>
<td>00000</td>
<td>10_0100</td>
</tr>
<tr>
<td>or</td>
<td>GPR[rd] &lt;= GPR[rs] | GPR[rt]</td>
<td>rs</td>
<td>rt</td>
<td>rd</td>
<td>00000</td>
<td>10_0101</td>
</tr>
<tr>
<td>slt</td>
<td>GPR[rd] &lt;= (GPR[rs] &lt; GPR[rt]) ? 32’b1 : 32’b0</td>
<td>rs</td>
<td>rt</td>
<td>rd</td>
<td>00000</td>
<td>10_1010</td>
</tr>
<tr>
<td>sltu</td>
<td>GPR[rd] &lt;= (GPR[rs] &lt; GPR[rt]) ? 32’b1 : 32’b0  (u)</td>
<td>rs</td>
<td>rt</td>
<td>rd</td>
<td>00000</td>
<td>10_1011</td>
</tr>
<tr>
<td>mult</td>
<td>(HI,LO) &lt;= GPR[rs] * GPR[rt]</td>
<td>rs</td>
<td>rt</td>
<td>00000</td>
<td>00000</td>
<td>01_1000</td>
</tr>
<tr>
<td>multu</td>
<td>(HI,LO) &lt;= GPR[rs] * GPR[rt] (u)</td>
<td>rs</td>
<td>rt</td>
<td>00000</td>
<td>00000</td>
<td>01_1001</td>
</tr>
<tr>
<td>div</td>
<td>(HI,LO) &lt;= GPR[rs] / GPR[rt]</td>
<td>rs</td>
<td>rt</td>
<td>00000</td>
<td>00000</td>
<td>01_1010</td>
</tr>
<tr>
<td>divu</td>
<td>(HI,LO) &lt;= GPR[rs] / GPR[rt] (u)</td>
<td>rs</td>
<td>rt</td>
<td>00000</td>
<td>00000</td>
<td>01_1011</td>
</tr>
<tr>
<td>mfhi</td>
<td>GPR[rd] &lt;= HI</td>
<td>00000</td>
<td>00000</td>
<td>rd</td>
<td>00000</td>
<td>01_0000</td>
</tr>
<tr>
<td>mflo</td>
<td>GPR[rd] &lt;= LO</td>
<td>00000</td>
<td>00000</td>
<td>rd</td>
<td>00000</td>
<td>01_0010</td>
</tr>
<tr>
<td>mthi</td>
<td>HI &lt;= GPR[rs]</td>
<td>rs</td>
<td>00000</td>
<td>00000</td>
<td>00000</td>
<td>01_0001</td>
</tr>
<tr>
<td>mtlo</td>
<td>LO &lt;= GPR[rs]</td>
<td>rs</td>
<td>00000</td>
<td>00000</td>
<td>00000</td>
<td>01_0011</td>
</tr>
<tr>
<td>jr</td>
<td>PC &lt;= GPR[rs]</td>
<td>rs</td>
<td>00000</td>
<td>00000</td>
<td>00000</td>
<td>00_1000</td>
</tr>
</tbody>
</table>
<h3 id="i型"><a class="markdownIt-Anchor" href="#i型"></a> I型</h3>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lui addi andi ori lb lh lw sb sh sw beq bne</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~21 (5)</th>
<th style="text-align:center">20~16(5)</th>
<th style="text-align:center">15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">寄存器地址</td>
<td style="text-align:center">立即数</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">rs</td>
<td style="text-align:center">rt</td>
<td style="text-align:center">imm</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">指示操作类型</td>
<td style="text-align:center">第一参</td>
<td style="text-align:center">目的参</td>
<td style="text-align:center">立即数</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>31~26 (6)</th>
<th>25~21 (5)</th>
<th>20~16(5)</th>
<th>15~0 (16)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td>操作码</td>
<td>寄存器地址</td>
<td>寄存器地址</td>
<td>立即数</td>
</tr>
<tr>
<td>指令名</td>
<td>指令解释</td>
<td>OP</td>
<td>rs</td>
<td>rt</td>
<td>imm</td>
</tr>
<tr>
<td>lui</td>
<td>GPR[rt] &lt;= {imm, {16{1’b0}}}</td>
<td>00_1111</td>
<td>00000</td>
<td>rt</td>
<td>imm</td>
</tr>
<tr>
<td>addi</td>
<td>GPR[rt] &lt;= GPR[rs] + sign_ext(imm)</td>
<td>00_1000</td>
<td>rs</td>
<td>rt</td>
<td>imm</td>
</tr>
<tr>
<td>andi</td>
<td>GPR[rt] &lt;= GPR[rs] &amp; zero_ext(imm)</td>
<td>00_1100</td>
<td>rs</td>
<td>rt</td>
<td>imm</td>
</tr>
<tr>
<td>ori</td>
<td>GPR[rt] &lt;= GPR[rs] | zero_ext(imm)</td>
<td>00_1101</td>
<td>rs</td>
<td>rt</td>
<td>imm</td>
</tr>
<tr>
<td>lb</td>
<td>GPR[rt] &lt;= memory[GPR[base] + offset] (byte)</td>
<td>10_0000</td>
<td>base</td>
<td>rt</td>
<td>offset</td>
</tr>
<tr>
<td>lh</td>
<td>GPR[rt] &lt;= memory[GPR[base] + offset] (half byte)</td>
<td>10_0001</td>
<td>base</td>
<td>rt</td>
<td>offset</td>
</tr>
<tr>
<td>lw</td>
<td>GPR[rt] &lt;= memory[GPR[base] + offset] (word)</td>
<td>10_0011</td>
<td>base</td>
<td>rt</td>
<td>offset</td>
</tr>
<tr>
<td>sb</td>
<td>memory[GPR[base] + offset] &lt;= GPR[rt] (byte)</td>
<td>10_1000</td>
<td>base</td>
<td>rt</td>
<td>offset</td>
</tr>
<tr>
<td>sh</td>
<td>memory[GPR[base] + offset] &lt;= GPR[rt] (half byte)</td>
<td>10_1001</td>
<td>base</td>
<td>rt</td>
<td>offset</td>
</tr>
<tr>
<td>sw</td>
<td>memory[GPR[base] + offset] &lt;= GPR[rt] (word)</td>
<td>10_1011</td>
<td>base</td>
<td>rt</td>
<td>offset</td>
</tr>
<tr>
<td>beq</td>
<td>PC &lt;= PC + 4 + sign_ext({offset, 2’b0}) if  (GPR[rs] == GPR[rt])</td>
<td>00_0100</td>
<td>rs</td>
<td>rt</td>
<td>offset</td>
</tr>
<tr>
<td>bne</td>
<td>PC &lt;= PC + 4 + sign_ext({offset, 2’b0}) if  (GPR[rs] != GPR[rt])</td>
<td>00_0101</td>
<td>rs</td>
<td>rt</td>
<td>offset</td>
</tr>
</tbody>
</table>
<h3 id="j型"><a class="markdownIt-Anchor" href="#j型"></a> J型</h3>
<p>包括</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jal</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">位置 (位数)</th>
<th style="text-align:center">31~26 (6)</th>
<th style="text-align:center">25~0 (26)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类型</td>
<td style="text-align:center">操作码</td>
<td style="text-align:center">指令地址</td>
</tr>
<tr>
<td style="text-align:center">名称</td>
<td style="text-align:center">OP</td>
<td style="text-align:center">address</td>
</tr>
<tr>
<td style="text-align:center">解释</td>
<td style="text-align:center">指示操作类型</td>
<td style="text-align:center">目标跳转位置</td>
</tr>
</tbody>
</table>
<h2 id="ifu-取指令单元-f"><a class="markdownIt-Anchor" href="#ifu-取指令单元-f"></a> IFU 取指令单元 (F)</h2>
<h3 id="功能要求"><a class="markdownIt-Anchor" href="#功能要求"></a> 功能要求</h3>
<ul>
<li>内部包括 PC（程序计数器）、IM（指令存储器）及相关逻辑。</li>
<li>PC <strong>同步复位</strong>，复位值为起始地址。</li>
<li><strong>起始地址：0x00003000。</strong></li>
<li>IM 容量为 32bit × 4096字（按字取的地址宽度12位）。</li>
<li>支持冻结</li>
<li><strong>可能出现问题，不确定，目前未考虑，后续debug可以测试</strong></li>
</ul>
<h3 id="输入端口"><a class="markdownIt-Anchor" href="#输入端口"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset 同步复位信号</li>
<li>Froze 冻结信号，收到该信号时忽略时钟上沿</li>
<li>PCSrc [1:0] 决定下条PC指令使用何处输入</li>
<li>CMPOut 对应CMP的输出，代表是否允许branch，1代表允许</li>
<li>PCImm [15:0] 符号扩展后的立即数（对应beq给定的立即数）</li>
<li>PCInstrIndex [25:0] J型指令的立即数值（对应jal给定的立即数）</li>
<li>PCJumpReg [31:0] 来自寄存器的跳转地址（对应jr指令对应地址读取到的值）</li>
</ul>
<h3 id="输出端口"><a class="markdownIt-Anchor" href="#输出端口"></a> 输出端口</h3>
<ul>
<li>Inst [31:0] 取得的指令</li>
<li>PCNxt [31:0] 对应PC+4，用于jal</li>
</ul>
<h3 id="行为逻辑"><a class="markdownIt-Anchor" href="#行为逻辑"></a> 行为逻辑</h3>
<ul>
<li>支持同步复位，复位到0x3000</li>
<li>任何时刻，输出当前PC寄存器对应地址中的指令</li>
<li>收到冻结信号时忽略clk上沿，PC &lt;= PC</li>
<li>每个clk上沿更新PC的值：</li>
</ul>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (PCSrc == <span class="number">2&#x27;b00</span> || (PCSrc == <span class="number">2&#x27;b01</span> &amp;&amp; ALUZero == <span class="number">0</span>)) <span class="keyword">begin</span> <span class="comment">// 无b/j指令或b指令无效，直接PC+=4</span></span><br><span class="line">  PC &lt;= PC + <span class="number">4</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (PCSrc == <span class="number">2&#x27;b01</span> &amp;&amp; ALUZero == <span class="number">1</span>) <span class="keyword">begin</span> <span class="comment">// b类指令生效</span></span><br><span class="line">  PC &lt;= PC + <span class="number">4</span> + &#123;&#123;<span class="number">14</span>&#123;PCImm[<span class="number">15</span>]&#125;&#125;, PCImm, &#123;<span class="number">2</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (PCSrc == <span class="number">2&#x27;b10</span>) <span class="keyword">begin</span> <span class="comment">// jal</span></span><br><span class="line">  PC &lt;= &#123;PC[<span class="number">31</span>:<span class="number">28</span>], PCInstrIndex, &#123;<span class="number">2</span>&#123;<span class="number">1&#x27;b0</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span> <span class="comment">// jr</span></span><br><span class="line">  PC &lt;= PCJumpReg;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="controller-集中译码器-f"><a class="markdownIt-Anchor" href="#controller-集中译码器-f"></a> Controller 集中译码器 (F)</h2>
<h3 id="功能要求-2"><a class="markdownIt-Anchor" href="#功能要求-2"></a> 功能要求</h3>
<p>将输入的OPCode和func转化为CPU各部分对应信号输出，各信号随流水线逐级传递。</p>
<h3 id="实现方式"><a class="markdownIt-Anchor" href="#实现方式"></a> 实现方式</h3>
<p>分类判断后指定各项输出的值。</p>
<h3 id="输入端口-2"><a class="markdownIt-Anchor" href="#输入端口-2"></a> 输入端口</h3>
<ul>
<li>OPCode [5:0] 标识命令种类的指令，按MIPS汇编标准执行</li>
<li>func [5:0] 标识R型指令具体种类的指令，按MIPS汇编标准执行</li>
</ul>
<h3 id="输出端口-2"><a class="markdownIt-Anchor" href="#输出端口-2"></a> 输出端口</h3>
<ul>
<li>
<p>CmpType [3:0] 分支指令比较方法 -&gt;CMP</p>
</li>
<li>
<p>ExtType 决定扩展器扩展类型，0零扩展，1符号扩展 -&gt;EXT</p>
</li>
<li>
<p>PCSrc [1:0] 决定下条PC指令使用何处输入，00代表PC+=4，01代表branch，10代表jal，11代表jr -&gt;IFU</p>
</li>
<li>
<p>ALUCtrl [3:0] 决定当前ALU执行何种运算，具体见ALU说明</p>
</li>
<li>
<p>ALUSrc [1:0] 决定ALU的第二参来自GRF的RD2（对应值0）还是立即数（对应值1）还是shamt（对应值2）</p>
</li>
<li>
<p>MNDType [3:0] 计算方式 0代表有符号乘法 1代表无符号乘法 2代表有符号除法 3代表无符号除法</p>
</li>
<li>
<p>MNDUsage [2:0] 决定是否使用HI或LO作为E级计算结果的输出，0用ALU，1用HI，2用LO</p>
</li>
<li>
<p>MNDWE [1:0] 写使能信号，0不写，1写HI，2写LO</p>
</li>
<li>
<p>MNDStart 决定是否开始乘除运算</p>
</li>
<li>
<p>MemWrite 决定DM是否允许写入</p>
</li>
<li>
<p>MemType [3:0] 向寄存器存储数据的类型（具体说明参考DM）</p>
</li>
<li>
<p>RegDataSrc [1:0] 决定GRF写入数据来源，00代表ALU输出，01代表DM输出，10代表PCNxt</p>
</li>
<li>
<p>RegDest [1:0]决定GRF写入地址来源是Inst[20:16]（rt, 对应值00，I型）还是Inst[15:11]（rd, 对应值01，R型），还是31即$ra（对应值10，jal）</p>
</li>
<li>
<p>RegWrite 决定GRF是否允许写入</p>
</li>
<li>
<p>Tnew [3:0] 对应A-T法的Tnew，为D端值，每经过一级寄存器Tnew = max{Tnew-1, 0}</p>
</li>
<li>
<p>TuseE [3:0] 对应A-T法的Tuse，对应A1参数的Tuse</p>
</li>
<li>
<p>TuseM [3:0] 对应A-T法的Tuse，对应A2参数的Tuse</p>
</li>
</ul>
<h2 id="cmp-比较模块-d"><a class="markdownIt-Anchor" href="#cmp-比较模块-d"></a> CMP 比较模块 (D)</h2>
<h3 id="功能要求-3"><a class="markdownIt-Anchor" href="#功能要求-3"></a> 功能要求</h3>
<ul>
<li>实现单周期CPU中ALU为分支指令实现的比较功能</li>
<li>纯组合逻辑</li>
</ul>
<h3 id="输入端口-3"><a class="markdownIt-Anchor" href="#输入端口-3"></a> 输入端口</h3>
<ul>
<li>RD1 [31:0] 第一参</li>
<li>RD2 [31:0] 第二参</li>
<li>CmpType [3:0] 比较方法</li>
</ul>
<h3 id="输出端口-3"><a class="markdownIt-Anchor" href="#输出端口-3"></a> 输出端口</h3>
<ul>
<li>CmpOut 输出是否可以进行分支</li>
</ul>
<h3 id="行为描述"><a class="markdownIt-Anchor" href="#行为描述"></a> 行为描述</h3>
<table>
<thead>
<tr>
<th>CmpType</th>
<th>比较行为描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>输出是否相等，即 RD1 == RD2</td>
</tr>
<tr>
<td>1</td>
<td>暂不定义</td>
</tr>
<tr>
<td>2</td>
<td>暂不定义</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<h2 id="ext-扩展器-d"><a class="markdownIt-Anchor" href="#ext-扩展器-d"></a> EXT 扩展器 (D)</h2>
<h3 id="功能要求-4"><a class="markdownIt-Anchor" href="#功能要求-4"></a> 功能要求</h3>
<ul>
<li>将输入的立即数进行扩展</li>
</ul>
<h3 id="输入端口-4"><a class="markdownIt-Anchor" href="#输入端口-4"></a> 输入端口</h3>
<ul>
<li>Imm [15:0] Inst指令中的立即数部分</li>
<li>ExtType 扩展方式</li>
</ul>
<h3 id="输出端口-4"><a class="markdownIt-Anchor" href="#输出端口-4"></a> 输出端口</h3>
<ul>
<li>ExtOut [31:0] 扩展后的结果</li>
</ul>
<h3 id="行为描述-2"><a class="markdownIt-Anchor" href="#行为描述-2"></a> 行为描述</h3>
<table>
<thead>
<tr>
<th>ExtType</th>
<th>扩展行为描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>进行零扩展，即返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mo stretchy="false">{</mo><mn>16</mn><mo stretchy="false">{</mo><msup><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi>b</mi><mn>0</mn><mo stretchy="false">}</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\{16\{1&#x27;b0\}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">6</span><span class="mopen">{</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mord">0</span><span class="mclose">}</span><span class="mclose">}</span></span></span></span>, Imm}</td>
</tr>
<tr>
<td>1</td>
<td>进行符号扩展，即返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mo stretchy="false">{</mo><mn>16</mn><mo stretchy="false">{</mo><mi>I</mi><mi>m</mi><mi>m</mi><mo stretchy="false">[</mo><mn>15</mn><mo stretchy="false">]</mo><mo stretchy="false">}</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\{16\{Imm[15]\}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">{</span><span class="mord">1</span><span class="mord">6</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">m</span><span class="mord mathnormal">m</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">5</span><span class="mclose">]</span><span class="mclose">}</span><span class="mclose">}</span></span></span></span>, Imm}</td>
</tr>
</tbody>
</table>
<h2 id="grf-通用寄存器组-d"><a class="markdownIt-Anchor" href="#grf-通用寄存器组-d"></a> GRF 通用寄存器组 (D)</h2>
<h3 id="功能要求-5"><a class="markdownIt-Anchor" href="#功能要求-5"></a> 功能要求</h3>
<ul>
<li>用具有写使能的寄存器实现，寄存器总数为 32 个，应具有<strong>同步复位</strong>功能。</li>
<li><strong>0 号寄存器</strong>的值始终保持为 0。其他寄存器<strong>初始值（复位后）均为 0</strong>，无需专门设置。</li>
<li>支持GPR内部转发，即读取地址等于写入地址时，直接输出写入数据。</li>
</ul>
<h3 id="输入端口-5"><a class="markdownIt-Anchor" href="#输入端口-5"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset同步复位信号</li>
<li>WE 写使能信号</li>
<li>A1 [4:0] 第一读取地址</li>
<li>A2 [4:0] 第二读取地址</li>
<li>A3 [4:0] 写入地址</li>
<li>WD [31:0] 写入数据输入</li>
</ul>
<h3 id="输出端口-5"><a class="markdownIt-Anchor" href="#输出端口-5"></a> 输出端口</h3>
<ul>
<li>RD1 [31:0] 第一读取输出 输出A1地址的寄存器中的数据</li>
<li>RD2 [31:0] 第二读取输出 输出A2地址的寄存器中的数据</li>
</ul>
<h3 id="功能说明"><a class="markdownIt-Anchor" href="#功能说明"></a> 功能说明</h3>
<ul>
<li>任何时刻，RD1和RD2都输出A1和A2对应地址的寄存器中的数据</li>
<li>Reset同步复位，将所有寄存器复位为0</li>
<li>0号寄存器永远保持为0</li>
<li>当WE为真时，将WD的数据在clk上沿写入A3对应地址的寄存器</li>
<li>读取地址等于写入地址时，直接输出写入数据。</li>
</ul>
<h2 id="alu-算术逻辑单元-e"><a class="markdownIt-Anchor" href="#alu-算术逻辑单元-e"></a> ALU 算术逻辑单元 (E)</h2>
<h3 id="功能要求-6"><a class="markdownIt-Anchor" href="#功能要求-6"></a> 功能要求</h3>
<ul>
<li>提供 32 位加、减、或运算及大小比较等功能。</li>
<li>加减法按无符号处理（不考虑溢出）。</li>
</ul>
<h3 id="输入端口-6"><a class="markdownIt-Anchor" href="#输入端口-6"></a> 输入端口</h3>
<ul>
<li>SrcA [31:0] 第一个参数输入</li>
<li>SrcB [31:0] 第二个参数输入</li>
<li>ALUCtrl [3:0] ALU操作类型控制码</li>
</ul>
<h3 id="输出端口-6"><a class="markdownIt-Anchor" href="#输出端口-6"></a> 输出端口</h3>
<ul>
<li>ALUResult [31:0] 计算结果</li>
</ul>
<h3 id="控制信号说明"><a class="markdownIt-Anchor" href="#控制信号说明"></a> 控制信号说明</h3>
<table>
<thead>
<tr>
<th>ALUCtrl</th>
<th>计算行为描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>按位或</td>
</tr>
<tr>
<td>1</td>
<td>按位与</td>
</tr>
<tr>
<td>2</td>
<td>不判断溢出的加法</td>
</tr>
<tr>
<td>3</td>
<td>不判断溢出的减法</td>
</tr>
<tr>
<td>4</td>
<td>立即数置高位</td>
</tr>
</tbody>
</table>
<h2 id="mnd-乘除法模块e"><a class="markdownIt-Anchor" href="#mnd-乘除法模块e"></a> MND 乘除法模块（E）</h2>
<h3 id="功能要求-7"><a class="markdownIt-Anchor" href="#功能要求-7"></a> 功能要求</h3>
<ul>
<li>自 Start 信号有效后的第 1 个时钟上升沿开始，乘除法部件开始执行运算，同时将 Busy 置位为 1。</li>
<li>在运算结果保存到 HI 寄存器和 LO 寄存器后，Busy 位清除为 0。</li>
<li>当 Busy 信号或 Start 信号为 1 时，<code>mult, multu, div, divu, mfhi, mflo, mthi, mtlo</code> 等乘除法相关的指令均被阻塞在 D 流水级。</li>
<li>数据写入 HI 寄存器或 LO 寄存器，均只需 1 个时钟周期。</li>
</ul>
<h3 id="输入端口-7"><a class="markdownIt-Anchor" href="#输入端口-7"></a> 输入端口</h3>
<ul>
<li>clk 时钟信号</li>
<li>Reset 同步复位信号</li>
<li>start 开始计算信号</li>
<li>MNDWE [1:0] 写使能信号，0不写，1写HI，2写LO</li>
<li>MNDType [3:0] 计算方式 0代表有符号乘法 1代表无符号乘法 2代表有符号除法 3代表无符号除法</li>
<li>RD1 [31:0] 计算第一参</li>
<li>RD2 [31:0] 计算第二参</li>
</ul>
<h3 id="输出端口-7"><a class="markdownIt-Anchor" href="#输出端口-7"></a> 输出端口</h3>
<ul>
<li>busy 运算时指示信号</li>
<li>HI [31:0] HI寄存器值</li>
<li>LO [31:0] LO寄存器值</li>
</ul>
<h2 id="hh-冒险处理模块"><a class="markdownIt-Anchor" href="#hh-冒险处理模块"></a> HH 冒险处理模块</h2>
<h3 id="功能要求-8"><a class="markdownIt-Anchor" href="#功能要求-8"></a> 功能要求</h3>
<ul>
<li>判断是否进行阻塞/转发操作并执行</li>
<li>组合逻辑</li>
</ul>
<h3 id="输入端口-8"><a class="markdownIt-Anchor" href="#输入端口-8"></a> 输入端口</h3>
<h4 id="重要说明"><a class="markdownIt-Anchor" href="#重要说明"></a> 重要说明</h4>
<p><strong>下面提到的A1和A2均指第一个读取值和第二个读取值！！！比如对R型指令就是rs和rt，对于I型指令可能是rs和rt（如beq）也可能是rs和无（如ori）！！！</strong></p>
<p><strong>而A3指的是写入值！！不一定是rd！！！对R型指令是rd，对有写入内容的I型指令是rt！！！</strong></p>
<h4 id="fd流水线寄存器"><a class="markdownIt-Anchor" href="#fd流水线寄存器"></a> F/D流水线寄存器</h4>
<ul>
<li>FD_TuseE [3:0] 此时F/D流水线寄存器中的TuseE</li>
<li>FD_TuseM [3:0] 此时F/D流水线寄存器中的TuseM</li>
<li>FD_A1 [4:0] F/D流水线寄存器中的A1地址</li>
<li>FD_A2 [4:0] F/D流水线寄存器中的A2地址</li>
<li>FD_RD1 [31:0] F/D流水线寄存器中的RD1</li>
<li>FD_RD2 [31:0] F/D流水线寄存器中的RD2</li>
<li>FD_MNDUsage [2:0] F/D流水线寄存器中的MNDUsage</li>
</ul>
<h4 id="de流水线寄存器"><a class="markdownIt-Anchor" href="#de流水线寄存器"></a> D/E流水线寄存器</h4>
<ul>
<li>DE_TuseE [3:0] 此时D/E流水线寄存器中的TuseE</li>
<li>DE_TuseM [3:0] 此时D/E流水线寄存器中的TuseM</li>
<li>DE_A1 [4:0] D/E流水线寄存器中的A1地址</li>
<li>DE_A2 [4:0] D/E流水线寄存器中的A2地址</li>
<li>DE_A3 [4:0] D/E流水线寄存器中的A3地址</li>
<li>DE_RD1 [31:0] D/E流水线寄存器中的RD1</li>
<li>DE_RD2 [31:0] D/E流水线寄存器中的RD2</li>
<li>DE_Tnew [3:0] 此时D/E流水线寄存器中的Tnew</li>
<li>DE_RegWrite 此时D/E流水线寄存器中的RegWrite</li>
</ul>
<h4 id="mnd模块"><a class="markdownIt-Anchor" href="#mnd模块"></a> MND模块</h4>
<ul>
<li>MND_Busy MND的Busy信号，代表正在运算乘除法</li>
</ul>
<h4 id="em流水线寄存器"><a class="markdownIt-Anchor" href="#em流水线寄存器"></a> E/M流水线寄存器</h4>
<ul>
<li>EM_TuseM [3:0] 此时E/M流水线寄存器中的TuseM</li>
<li>EM_A2 [4:0] E/M流水线寄存器中的A2地址</li>
<li>EM_A3 [4:0] E/M流水线寄存器中的A3地址</li>
<li>EM_RD2 [31:0] E/M流水线寄存器中的RD2</li>
<li>EM_Tnew [3:0] 此时E/M流水线寄存器中的Tnew</li>
<li>EM_RegWrite E/M流水线寄存器中代表是否可写的指令</li>
<li>EM_RegData [31:0] E/M流水线寄存器中GRF写入数据</li>
</ul>
<h4 id="mw流水线寄存器"><a class="markdownIt-Anchor" href="#mw流水线寄存器"></a> M/W流水线寄存器</h4>
<ul>
<li>MW_Tnew [3:0] 此时E/M流水线寄存器中的Tnew</li>
<li>MW_RegWrite M/W流水线寄存器中代表是否可写的指令，同时指示当前是否有写入操作</li>
<li>MW_A3 [4:0] M/W流水线寄存器中的A3地址</li>
<li>MW_RD2 [31:0]</li>
<li>MW_RegData [31:0] M/W流水线寄存器中GRF写入数据</li>
</ul>
<h3 id="输出端口-8"><a class="markdownIt-Anchor" href="#输出端口-8"></a> 输出端口</h3>
<ul>
<li>Froze 向IFU，F/D和D/E流水线寄存器传递的冻结信号，代表输出默认值而非寄存器值</li>
</ul>
<h4 id="d级"><a class="markdownIt-Anchor" href="#d级"></a> D级</h4>
<ul>
<li>RD1ForwardD  [31:0] 寄存器读取的第一参结果</li>
<li>RD2ForwardD  [31:0] 寄存器读取的第二参结果</li>
</ul>
<h4 id="e级"><a class="markdownIt-Anchor" href="#e级"></a> E级</h4>
<ul>
<li>RD1ForwardE  [31:0] 寄存器读取的第一参结果</li>
<li>RD2ForwardE  [31:0] 寄存器读取的第二参结果</li>
</ul>
<h4 id="m级"><a class="markdownIt-Anchor" href="#m级"></a> M级</h4>
<ul>
<li>WDForward  [31:0] DM写入的数据结果</li>
</ul>
]]></content>
      <categories>
        <category>CO</category>
      </categories>
      <tags>
        <tag>Arch</tag>
        <tag>CO</tag>
      </tags>
  </entry>
  <entry>
    <title>COINS Essay Note</title>
    <url>/2023/07/05/COINS-Essay-Note/</url>
    <content><![CDATA[<p>Compositional Human-Scene Interaction Synthesis with Semantic Control</p>
<p>实现了一种通过高级语义规范生成给定3D场景中的人物动作的方法，比如“坐在椅子上”等。支持人物与3D环境的自然交互，支持多种交互的组合，通过扩展PROX数据集对比现有方法实现了更好的效果。</p>
<p>语义示例：躺在沙发上、坐在桌子上、摸椅子、躺在椅子上、坐在地板上、摸床、坐在柜子上且摸床、站在地板上且摸显示器、站在地板上且摸桌子等。（不需要额外训练就能支持多种要求的组合）</p>
<p>关注重点：<strong>语义、交互、动作生成、动作组合</strong></p>
<h2 id="计算预设"><a class="markdownIt-Anchor" href="#计算预设"></a> 计算预设</h2>
<h3 id="人体表示"><a class="markdownIt-Anchor" href="#人体表示"></a> 人体表示</h3>
<p>使用SMPL-X模型表示，一个人被表示为顶点、面片和接触信息的集合。具体来说，存储了655个顶点的坐标、1296个面片的对应三顶点的编号、655个0/1接触特征，用于表述顶点是否和场景有接触。（简化了SMPL-X模型的顶点/面片数量，以方便计算）接触信息的计算方法为：如果某个顶点距离场景物体过近（低于某个值）则为1，即接触，否则为0，即未接触。</p>
<h3 id="场景表示"><a class="markdownIt-Anchor" href="#场景表示"></a> 场景表示</h3>
<p>场景被表示为物品实体的集合。每个物品被表示为8192个点的点云集合，每个点包括9维信息：位置、颜色和法线方向。如此表示是为了通用性，与以往方法将场景物体分类表示为独热码区分开来。</p>
<h3 id="交互表示"><a class="markdownIt-Anchor" href="#交互表示"></a> 交互表示</h3>
<p>一个交互包括一个人体信息与一个包含了多个原子交互的集合，因为一种交互动作可能包括了不同部位和不同场景位置的接触。每个原子交互包括一对独热码，分别对应动作和物体，如“坐、椅子”，“触摸、桌子”等等。</p>
<p>注：这里的“桌子”和“椅子”不是泛指所有，而是作者直接在场景中为每个物体定义了一个独热码，在这种交互信息输入中直接指定，要和哪一个物体进行交互。因此后文中网络结构里可以直接将动作独热码和对应的物体进行对应。</p>
<h2 id="动作生成"><a class="markdownIt-Anchor" href="#动作生成"></a> 动作生成</h2>
<h3 id="总览"><a class="markdownIt-Anchor" href="#总览"></a> 总览</h3>
<p>生成的输入是若干个如上文一样动作和物体对，如“坐、椅子”+“触摸、桌子”等。生成的输出是人体的骨骼动作。</p>
<p>生成被分为两个部分，首先根据场景信息和交互信息，在场景中生成一个合适的骨盆位置和朝向，这是第一次生成。其次再将场景信息转换为骨盆的局部坐标系信息后，进行第二次生成，生成人体的具体动作信息。两次生成都是由一种基于transformer的cVAE网络完成，分别叫PelvisVAE和BodyVAE。</p>
<h3 id="网络细节"><a class="markdownIt-Anchor" href="#网络细节"></a> 网络细节</h3>
<p>首先来看网络的场景信息输入。场景中的每个物体被表示为前文所述8192个点的点云后，输入一个PointNet++（一个将大量点的信息进行编码抽象，取出其中重要信息的网络，可学习）后得到256个点组成的点云。之后，将和物体相关的动作作为（可学习的）embedding嵌入到这256个点的信息中。</p>
<p>PointNet++抽象过程：8192*(3+6) -&gt; 1024*(3+96) -&gt; 256*(3+256) -&gt; 256*D，前两个是经过集合抽象层，第三个则是一个线性层，将抽象出来的信息编码为transformer需要的D维输入向量。</p>
<p>而人体信息输入则就是简单的将前述由三种信息组成的人体表示加上由顶点索引决定的positional embedding后，通过一个线性层映射到指定的输入维度，和上述场景信息一同输入到Encoder中。</p>
<p>上述信息会被输入到一个四层的transformer-encoder中，得到输入交互预测出的隐空间，将隐空间信息和与人体信息相关的模板信息（加上positional embedding）一同输入到transformer-decoder当中，得到所预测的身体表示。其中BodyVAE最后输出的结果会经过一个包含六个线性层+残差链接的MLP得到最终输出的SMPL-X身体表示。</p>
<h3 id="loss"><a class="markdownIt-Anchor" href="#loss"></a> Loss</h3>
<p>PelvisVAE的Loss包括位置和朝向和Loss加上KL Loss（见后）。</p>
<p>BodyVAE的Loss由以下这些部分组成：</p>
<h4 id="交互loss"><a class="markdownIt-Anchor" href="#交互loss"></a> 交互Loss</h4>
<p>交互Loss包括对身体655个顶点每个点的如下计算的求和：</p>
<p>对于每一个点，计算该点和交互对应的物体的所有点的最小距离。</p>
<p>即，该Loss鼓励身体每一个顶点都与交互对应物体（的任意位置）有零距离接触。</p>
<h4 id="mesh重建loss"><a class="markdownIt-Anchor" href="#mesh重建loss"></a> mesh重建Loss</h4>
<p>mesh重建Loss用于使重建所得的人体更加真实，由以下几个项组成：顶点坐标Loss判断顶点坐标变化、法线Loss判断法线角度变化、边长Loss判断每个面片的各边长度变化、正常一致性Loss用于使相邻面的法线变化更加平滑。</p>
<h4 id="接触特征重建loss"><a class="markdownIt-Anchor" href="#接触特征重建loss"></a> 接触特征重建Loss</h4>
<p>用于表达接触特征是否有被正常重建，通过计算生成所得人体各个顶点的0/1接触特征和应有的0/1接触特征这两个向量之间的BCE值得到。</p>
<h4 id="kl-loss"><a class="markdownIt-Anchor" href="#kl-loss"></a> KL Loss</h4>
<p>通过将Loss中加入 <a href="https://blog.csdn.net/wr1997/article/details/115255712">KL散度</a> 来避免后验失效问题。该KL散度经过一个Charbonnier函数。</p>
<h4 id="smpl-x回归loss"><a class="markdownIt-Anchor" href="#smpl-x回归loss"></a> SMPL-X回归Loss</h4>
<p>包括了SMPL-X身体参数对应预测值和真实值相减的L2范数，加上映射为网格顶点的SMPL-X模型对应预测值和真实值的差值的模长。</p>
<h3 id="组合式骨盆生成"><a class="markdownIt-Anchor" href="#组合式骨盆生成"></a> 组合式骨盆生成</h3>
<p>这里通过一些计算和训练方式实现了不需要组合式交互数据训练的组合式动作生成。首先是骨盆生成。前述的网络能够对每对交互任务中最后的骨盆生成任务输出一个骨盆位置的概率分布，而对组合式生成任务，本文通过实现如下的一个优化过程实现对多个交互任务的骨盆位置生成：对每个交互任务，保证其得到的生成结果概率尽量大的同时，使得多个生成结果的骨盆位置尽可能接近。再将如此得到的每个交互生成的骨盆位置取均值，即为最终的组合式骨盆生成位置。</p>
<h3 id="组合式身体生成"><a class="markdownIt-Anchor" href="#组合式身体生成"></a> 组合式身体生成</h3>
<p>一个交互动作往往不需要用到全身所有位置与目标物体的接触。因此本文将全身分为上肢、下肢和躯干三个部分，同时对于每个动作，计算这个动作对于每个身体部分的发生接触的概率，概率被表示为该动作对应所有接触的顶点数量中位于某个部位的顶点数量占比。如果某个动作在某个部位的接触概率显著大于其他动作，则将其他动作在该部位的注意力设置为0。</p>
]]></content>
      <categories>
        <category>VR</category>
      </categories>
      <tags>
        <tag>VR</tag>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模国赛算法整理-1</title>
    <url>/2023/09/06/CUMCM-1/</url>
    <content><![CDATA[<h2 id="大略总结"><a class="markdownIt-Anchor" href="#大略总结"></a> 大略总结</h2>
<p>不一定后文有对应详细解释</p>
<p><a href="https://zhuanlan.zhihu.com/p/647440460">https://zhuanlan.zhihu.com/p/647440460</a></p>
<p><strong>机理分析类：来源于实际问题，需要了解一定的物理机理，转化为优化问题。</strong><br />
微分方程模型、数值模拟等</p>
<p><strong>优化类：纯优化问题，旨在找到使某个目标函数取得最大或最小值的最优解,对于机理要求要求不高，重在求解。</strong><br />
线性规划：内点法、单纯形法、修正单纯形法、<br />
非线性规划：下山单纯形法、改进的BFGS拟牛顿法、改进的共轭方向法、（边界）截断牛顿法、线性近似束优化方法、序贯最小二乘规划算法、信赖域算法、<br />
整数规划：分支定界法、0-1规划、枚举法、<br />
启发式算法：遗传算法（GA）、粒子群算法（PSO）、模拟退火算法（SA）、蒙特卡洛</p>
<p><strong>评价类：纯评价问题，通过构建合适的指标和评价方法，评价模型能够对不同方案的优劣进行比较和分析。</strong><br />
层次分析法、因子分析（探索性）、数据包络分析(DEA)、模糊综合评价、优劣解距离法(TOPSIS)、秩和比综合评价法(RSR)、耦合协调度、熵值法、CRITIC权重法、独立性权系数法、变异系数法、灰色关联分析、多准则妥协解排序法(VIKOR)、解释结构模型(ISM)</p>
<p><strong>数理统计模型（主要是预测类）：数理统计模型可以通过对给定数据集的统计分析，推断出数据的分布规律、相关性、假设检验等，为问题提供支持和解决方案。</strong><br />
arima、机器学习、灰色预测、问卷分析、相关分析、差异分析等等</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>a</mi><mi>a</mi><mi>a</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>b</mi><mi>b</mi><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>c</mi><mi>c</mi><mi>c</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">=\left\{\begin{aligned}aaa\\bbb\\ccc\end{aligned}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mord mathnormal">a</span><span class="mord mathnormal">a</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord mathnormal">b</span><span class="mord mathnormal">b</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mord mathnormal">c</span><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<h2 id="前后向欧拉法"><a class="markdownIt-Anchor" href="#前后向欧拉法"></a> 前/后向欧拉法</h2>
<p>由泰勒展开：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo>+</mo><mfrac><mrow><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><mo stretchy="false">!</mo></mrow></mfrac><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}f(x+\Delta x)=f(x)+f&#x27;(x)\Delta x+\frac{f&#x27;&#x27;(x)(\Delta x)^2}{2!}+O(\Delta x)^2\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4771080000000003em;vertical-align:-0.988554em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4885540000000002em;"><span style="top:-3.488554em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.988554em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo>+</mo><mfrac><mrow><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><mo stretchy="false">!</mo></mrow></mfrac><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}f(x-\Delta x)=f(x)-f&#x27;(x)\Delta x+\frac{f&#x27;&#x27;(x)(\Delta x)^2}{2!}+O(\Delta x)^2\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4771080000000003em;vertical-align:-0.988554em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4885540000000002em;"><span style="top:-3.488554em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.988554em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>可得函数导数一阶近似：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow></mfrac><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}f&#x27;(x)=\frac{f(x+\Delta x)-f(x)}{\Delta x}+O(\Delta x)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4130000000000003em;vertical-align:-0.9565em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4565000000000001em;"><span style="top:-3.4565em;"><span class="pstrut" style="height:3.427em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9565em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>=</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow></mfrac><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}=\frac{f(x)-f(x-\Delta x)}{\Delta x}+O(\Delta x)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4130000000000003em;vertical-align:-0.9565em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4565000000000001em;"><span style="top:-3.4565em;"><span class="pstrut" style="height:3.427em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9565em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>分别为前向和后向展开。如果将泰勒展开两式相减可得二阶近似：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mn>2</mn><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow></mfrac><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}f&#x27;(x)=\frac{f(x+\Delta x)-f(x-\Delta x)}{2\Delta x}+O(\Delta x)^2\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4130000000000003em;vertical-align:-0.9565em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4565000000000001em;"><span style="top:-3.4565em;"><span class="pstrut" style="height:3.427em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">Δ</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9565em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>类似的，对于二阶导数，可以导出：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msup><mi>f</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mn>2</mn><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}f&#x27;&#x27;(x)=\frac{f(x+\Delta x)-2f(x)+f(x-\Delta x)}{(\Delta x)^2}+O(\Delta x)^2\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.6630000000000003em;vertical-align:-1.0815000000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5815000000000001em;"><span style="top:-3.5815em;"><span class="pstrut" style="height:3.427em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0815000000000001em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>相应的离散化可能出现两种误差：截断误差和舍入误差，分别对应前述离散化未计算高阶导数项的误差和计算机浮点数计算的误差。</p>
<p>显式求解时对于方程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi mathvariant="normal">∂</mi><mn>2</mn></msup><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\frac{\partial f}{\partial t}=\frac{\partial^2 f}{\partial x^2}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4771080000000003em;vertical-align:-0.988554em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4885540000000002em;"><span style="top:-3.488554em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.988554em;"><span></span></span></span></span></span></span></span></span></span></span> 离散化得到：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mfrac><mrow><msubsup><mi>f</mi><mi>i</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mo>−</mo><msubsup><mi>f</mi><mi>i</mi><mi>n</mi></msubsup></mrow><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><msubsup><mi>f</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo>−</mo><mn>2</mn><msubsup><mi>f</mi><mi>i</mi><mi>n</mi></msubsup><mo>+</mo><msubsup><mi>f</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></msubsup></mrow><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\frac{f^{n+1}_i-f^n_i}{\Delta t}=\frac{f^n_{i+1}-2f^n_i+f^n_{i+1}}{(\Delta x)^2}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.767239em;vertical-align:-1.1336195000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6336194999999998em;"><span style="top:-3.6336195000000004em;"><span class="pstrut" style="height:3.5312390000000002em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.531239em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6769999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.4231360000000004em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4014350000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.706995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.316995em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.316995em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1336195000000002em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>f</mi><mi>i</mi><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">f^n_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.953104em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span> 代表方程离散化后时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">n\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span>，空间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">i\Delta x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mord">Δ</span><span class="mord mathnormal">x</span></span></span></span> 的值。</p>
<p>前述方程可重排列得到：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msubsup><mi>f</mi><mi>i</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mo>=</mo><msubsup><mi>f</mi><mi>i</mi><mi>n</mi></msubsup><mo>+</mo><mfrac><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac><mo stretchy="false">(</mo><msubsup><mi>f</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo>−</mo><mn>2</mn><msubsup><mi>f</mi><mi>i</mi><mi>n</mi></msubsup><mo>+</mo><msubsup><mi>f</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}f^{n+1}_i=f^n_i+\frac{\Delta t}{(\Delta x)^2}(f^n_{i+1}-2f^n_i+f^n_{i-1})\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.59633em;vertical-align:-1.0481650000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5481649999999998em;"><span style="top:-3.5481650000000005em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.433005em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266995em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714392em;"><span style="top:-2.4530000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714392em;"><span style="top:-2.4530000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0481650000000002em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>稳定条件为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mfrac><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac><mo>≤</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\frac{\Delta t}{(\Delta x)^2}\le \frac{1}{2}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.59633em;vertical-align:-1.0481650000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5481649999999998em;"><span style="top:-3.5481650000000005em;"><span class="pstrut" style="height:3.3603300000000003em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0481650000000002em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h2 id="最小二乘法"><a class="markdownIt-Anchor" href="#最小二乘法"></a> 最小二乘法</h2>
<p>2020-A070</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1</mn><mo>×</mo><mi>k</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>0</mn><mo>×</mo><mi>k</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>2</mn><mo>×</mo><mi>k</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{
\begin{aligned}
1\times k + b = 2 \\
0\times k + b = 2 \\
2\times k + b = 3 \\
\end{aligned}
\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>像这样的一个问题，就是有一个线的方程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">kx+b=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 要求过三个点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1,2),(0,2),(2,3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>，就将其代入后整理成向量乘法形式：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>2</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>×</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>×</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>3</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">
\left[
\begin{aligned}
1 \\
0 \\
2 \\
\end{aligned}
\right]
\times x_1 +
\left[
\begin{aligned}
1 \\
1 \\
1 \\
\end{aligned}
\right]
\times x_2 =
\left[
\begin{aligned}
2 \\
2 \\
3 \\
\end{aligned}
\right]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.352005em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.0999950000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1109850000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.352005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.352005em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.0999950000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1109850000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.352005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.352005em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.0999950000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1109850000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.352005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.352005em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.0999950000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1109850000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.352005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.352005em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.0999950000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1109850000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.352005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.352005em;"><span style="top:-1.9499950000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.0999950000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1109850000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.352005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.850025em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>这样我们就可以对方程组进行求解。但是显然这个方程是无解的，因为前两个向量构成的平面上没有第三个向量，但我们可以把第三个向量投影到前两个向量的平面上，组成一个最接近我们需要的解答的近似解。</p>
<p>类似这样就是最小二乘法的思想了。</p>
<p>数学上通用的求解方法描述如下：</p>
<p>对于函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>θ</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">h_\theta(x_1,x_2,...x_n)=\theta_0+\theta_1x_1+\dots+\theta_n x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，其可以表示为矩阵形式：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="bold">X</mi><mi>θ</mi><mo>=</mo><mi mathvariant="bold">Y</mi></mrow><annotation encoding="application/x-tex">h_\theta(\bold x)=\bold X\theta=\bold Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathbf">X</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord mathbf" style="margin-right:0.02875em;">Y</span></span></span></span></p>
<p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">X</mi></mrow><annotation encoding="application/x-tex">\bold X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord mathbf">X</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m\times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 的矩阵，代表有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 个样本数据，希望求解出一个合适的函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 满足这些样本， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 为样本特征数。</p>
<p>经计算可得，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mi mathvariant="bold">X</mi><mi>T</mi></msup><mi mathvariant="bold">X</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi mathvariant="bold">X</mi><mi>T</mi></msup><mi mathvariant="bold">Y</mi></mrow><annotation encoding="application/x-tex">\theta=(\bold X^T\bold X)^{-1}\bold X^T\bold Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathbf">X</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathbf" style="margin-right:0.02875em;">Y</span></span></span></span></p>
<p>适用于对于一组样本和对应的输出，求满足其变化规律的函数。注意特征数太高可能会造成过拟合，需要加入正则化项。同时由于要进行矩阵求逆，运算量可能较大。</p>
<h2 id="有限元差分"><a class="markdownIt-Anchor" href="#有限元差分"></a> 有限元差分</h2>
<p>2020-A070<br />
2020-A147</p>
<p>这是一个数学方法，需要推导公式，而不是一个计算机编程可求解的方法（不排除有类似的工具）。根本思想简单来说就是对于一个微分方程，在很难求出其解析解的情况下，可以通过将其参数离散化的方法，譬如以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\delta x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="mord mathnormal">x</span></span></span></span> 为区间分割出一系列的点，求这些点之中的最优解，以求得一个逼近解析解的解。</p>
<p>一般来说，可以按照自变量个数和数据情况进行离散化，离散化越细求得结果越好，但同时求解难度也会上升。</p>
<h2 id="二分搜索"><a class="markdownIt-Anchor" href="#二分搜索"></a> 二分搜索</h2>
<p>2020-A070</p>
<p>在一些问题中，列出题目所给的所有条件后，因变量相对于自变量的变化趋势是单调的，因而可以进行二分搜索，用较快的时间获取到自变量逼近最优解的解。</p>
<p>有时只能求得一个区间范围，但区间范围规定的区域较小，则可以直接在范围内进行遍历得到最优解。</p>
<h2 id="模拟退火"><a class="markdownIt-Anchor" href="#模拟退火"></a> 模拟退火</h2>
<p>2020-A070<br />
2020-A212</p>
<p>模拟退火算法最早由 Metropolis 提出，1983 年由 Kirkpatrick 等人将模拟退火的思想成功引入组合优化领域。目前，模拟退火算法已经应用到各门学科中以解决非线性系统的优化问题。</p>
<p>理论上已经证明，模拟退火算法是一个全局最优算法，而且概率 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 接近最优值，并且克服了对初值的依赖。算法的基础源于对固体退火过程的模拟，采用Metropolis 准则，用冷却进度表控制算法进程，最终得到一个近似最优解。固体退火是指将固体加热到足够高的温度后，使分子早随机排列状态，然后逐步降温使之冷却，最后分子以低能状态排列，固体达到某种稳定状态。模拟退火算法的基本思想: 在一定的温度下，搜索从一个状态随机地变化到另一个状态，随着温度的不断下降直到最低温度，搜索过程以概率 1 停留在最优解。根据玻尔兹曼概率分布可以得出:<br />
1.在同一个温度，分子停留在能量较小状态的概率大于停留在能量较大状态的概率。<br />
2.温度越高，不同能量状态对应的概率相差越小;温度足够高时，各状态对应的概率基本相同。<br />
3.随着温度的下降，能量最低状态对应的概率越来越大:温度趋于 0 时，其状态趋于 1。</p>
<p>简单来说，就是在限制空间比较大且没有明显变化趋势，同时也没有一个容易求解的函数（或求解耗时太长）的情况下，选择一种“随机跳”的方式求解。</p>
<p>整体上会有一个“温度”不断降低，然后每次从当前解随机跳一段距离，跳到的位置解如果更优就保留，如果更差就视情况保留（温度越高，保留概率越高，亦即乱跳概率越大），以此不断迭代，达到一定要求后停止求解。</p>
<h2 id="爬山算法"><a class="markdownIt-Anchor" href="#爬山算法"></a> 爬山算法</h2>
<p>2020-A147</p>
<p>类似于梯度下降。给定一个搜索起点的情况下，在一定临近范围区间内搜索目标函数值最小的点并跳到该点，重复上述过程直到找不到最优点或满足给定最优解条件。</p>
<p>缺陷在于容易陷入局部最优解，可以通过多次运算，每次选取随机初始起点的方式进行一定改善。</p>
<h2 id="a算法"><a class="markdownIt-Anchor" href="#a算法"></a> A*算法</h2>
<p>2020-A147</p>
<p>是一个寻路算法。用于在庞大的解空间中尽可能高速的找到最优解（相比于 Dijkstra 这种需要遍历完整个图的算法而言，A*可能只需要遍历很小的一部分，取决于启发函数的准确性）。</p>
<p>简单来说，对于 Dijkstra 等算法，其目的在于优先搜索从初始点开始的距离 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 最短的点，而A*算法将其扩展为预计总距离最小的路径上的点，通过设置 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)=g(x)+h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 为比较参数，将其优化到最小。其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 为预估的当前点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> 到目标点距离，以此估算整条路径距离，再尽可能选择使整条路径更短的新点去进行搜索。</p>
<h2 id="遗传算法"><a class="markdownIt-Anchor" href="#遗传算法"></a> 遗传算法</h2>
<p>2020-A195<br />
2020-C142</p>
<p>接力进化遗传算法（Relay Evolution Genetic Algorithm）是一种改进的遗传算法（Genetic Algorithm，GA），用于解决多目标优化问题。它通过引入多个种群以及迭代交替的方式来提高算法的性能。</p>
<p>在传统的遗传算法中，只有一个种群进行进化搜索，而接力进化遗传算法使用了多个种群，每个种群都专注于解决不同的子问题或目标。</p>
<p>接力进化遗传算法的基本思想是，在每一代进化过程中，种群之间进行信息共享和传递。具体而言，算法按照顺序为每个种群执行以下步骤：</p>
<ol>
<li>
<p>选择：从当前种群中选择个体进行繁殖和交叉操作。</p>
</li>
<li>
<p>交叉和变异：对所选个体进行交叉和变异操作，生成新的个体。</p>
</li>
<li>
<p>竞争：通过竞争选择机制，将新个体与当前种群中的个体进行比较，并保留最好的个体。</p>
</li>
<li>
<p>信息传递：选取一部分个体从当前种群传递到下一个种群，成为下一个种群的初始个体。</p>
</li>
<li>
<p>迭代：重复以上步骤，直到达到停止条件。</p>
</li>
</ol>
<p>通过这种交替迭代的方式，不同种群之间可以共享优良个体的信息，从而促进全局搜索和多目标优化问题的解决。</p>
<p>接力进化遗传算法在处理多目标优化问题时具有一定的优势，因为它通过将搜索空间分解为多个子问题来提高搜索的效率，并且能够有效地探索和维护多个非支配解集。但是，对于具体问题的适应性和参数选择仍然需要根据实际情况进行调整和优化。</p>
<h2 id="博弈论-纳什均衡"><a class="markdownIt-Anchor" href="#博弈论-纳什均衡"></a> 博弈论-纳什均衡</h2>
<p>2020-B078<br />
2020-B108<br />
2020-B125</p>
<p>对于有多个参与者参与的博弈论问题，首先需要列出支付矩阵，也就是对于各个参与者的每一种选择在每个情况下的代价大小组成的矩阵，取一种简单情况，两人博弈时局面是对称的，都选 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span> 时获利 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">a_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，都选 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 时获利 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">b_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，分别选 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A,B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 时分别获利 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1,b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。则支付矩阵如下：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.24999999999999992em" columnalign="right left right" columnspacing="0em 1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">(</mo><msub><mi>b</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[
\begin{aligned}
(a_0,a_0) &amp; &amp; (a_1,b_1) \\
(b_1,a_1) &amp; &amp; (b_0,b_0) \\
\end{aligned}
\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.00003em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span></span></span></span></p>
<p>则设两个玩家选择两个选项的概率分别为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>A</mi></msub><mo separator="true">,</mo><msub><mi>P</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">P_A, P_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 我们可以通过如下的方式计算该博弈下的纳什平衡点，使得两个玩家的期望收益相等：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>A</mi></msub><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>P</mi><mi>B</mi></msub><msub><mi>b</mi><mn>1</mn></msub><mo>=</mo><msub><mi>P</mi><mi>A</mi></msub><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>P</mi><mi>B</mi></msub><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">P_A a_0+P_B b_1=P_A a_1 + P_B b_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>A</mi></msub><mo>+</mo><msub><mi>P</mi><mi>B</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P_A+P_B=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<p>解方程组即可得到均衡状态下的选择概率。</p>
<p>纯策略纳什均衡和混合策略纳什均衡：在一个博弈论问题中，达到一种纯策略纳什均衡指双方都必定选择某一个选项，此时任何一方改变自己的选项都会让己方收益降低。混合策略纳什均衡指的是，双方都以某一种概率分布进行选择，此时任何一方改变自己的概率分布都将使得自己的收益期望降低，上面计算的期望收益相等的情况就是一种混合策略纳什均衡，当然，上面的方程组也可能计算出其中一个概率大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的情况，此时就不存在一种混合策略纳什均衡。</p>
<h2 id="马尔可夫链"><a class="markdownIt-Anchor" href="#马尔可夫链"></a> 马尔可夫链</h2>
<p>2020-B125<br />
2020-B175</p>
<p>使用马尔可夫链对情况进行建模代表了一种假设：所有的状态转移仅和上一次状态相关。从而根据以往数据计算得出每一个状态向各个状态转移的概率，以此对下一个状态进行概率分布的估计。同时每次到达新状态，也根据新状态情况对估计的概率分布进行更新。</p>
<h2 id="决策树"><a class="markdownIt-Anchor" href="#决策树"></a> 决策树</h2>
<p>2020-C109</p>
<p>一种机器学习方法，能够对数据进行分类。<br />
<a href="https://zhuanlan.zhihu.com/p/361464944">https://zhuanlan.zhihu.com/p/361464944</a></p>
<p>两种强化方式：将多棵决策树使用加法模型一起训练和使用；加入正则项来减少过拟合。</p>
<h2 id="主成分分析pca"><a class="markdownIt-Anchor" href="#主成分分析pca"></a> 主成分分析（PCA）</h2>
<p>2020-C142</p>
<p><a href="https://zhuanlan.zhihu.com/p/37777074">https://zhuanlan.zhihu.com/p/37777074</a><br />
是一种数据降维算法，能够将高维数据提取特征，映射到一个更低的维度上。具体来说是在原始的空间中顺序找一组相互正交的坐标轴，这些坐标轴选取数据方差最大的方向。</p>
<h2 id="梯度下降"><a class="markdownIt-Anchor" href="#梯度下降"></a> 梯度下降</h2>
<p>2020-C109</p>
<p>一种求解复杂但可导函数局部最优解的方法。定义一个步长和一个学习率，选取一个初始点，重复以下过程：每次对于当前点，由函数求每个维度上的偏导得到梯度，选取梯度或者梯度的的相反值，将当前点移动步长那么多，然后重复该过程，同时不断降低学习率，直到达到一个局部最优解即梯度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 。</p>
<p>有两个缺陷：其一是可能只能到达局部最优解，这一点上不如模拟退火，但是相比模拟退火能更稳定的找到局部最优解，取决于函数运算速度和导数运算速度的差异，速度可能不同。其二是可能卡在鞍点，即梯度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 但不是局部最优解，比如三次函数的拐点处。</p>
<p>除了求解梯度，也可以选取某一个或者某几个方向导数进行梯度下降，再进行轮换，分别对应随机梯度下降和小批量梯度下降。使用梯度的梯度下降成为批量梯度下降。</p>
<h2 id="蒙特卡洛模拟"><a class="markdownIt-Anchor" href="#蒙特卡洛模拟"></a> 蒙特卡洛模拟</h2>
<p>2020-B078</p>
<p>基于随机数的模拟算法，一种应用是求已知函数的概率分布或者积分值。比如给定一个函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>，求在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,x_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 范围内的定积分值，已知 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 的最大最小值，在这个矩形内按单位面积随机选取点，每次选取后计算该点是否在函数包裹的区域内，选取若干点后所求定积分值就是矩形面积乘以点在函数包裹区域内的频率（这里假设矩形不包括因变量为负的部分）。</p>
<h2 id="层次分析法"><a class="markdownIt-Anchor" href="#层次分析法"></a> 层次分析法</h2>
<p>首先需要决定三个层：目标层、准则层和方案层。目标层就是决策目的，方案层就是所有可选方案，准则则是不同的判断准则，如下图所示：</p>
<p><img src="https://pic2.zhimg.com/80/v2-84088f1f9bb037ad250ddc03f1ff6bdd_1440w.webp" alt="img" /></p>
<p>层次分析法是一种在此基础上对各个准则进行排序并最终进行方案选择的分析方法。（可以有多个准则层）</p>
<p>需要构建判断矩阵：</p>
<p><img src="https://pic3.zhimg.com/80/v2-0af25dc394e229416bd9fe3b6404d6e2_1440w.webp" alt="img" /></p>
<p>一般根据如下Santy标度方法决定标度：</p>
<p><img src="https://pic3.zhimg.com/80/v2-6319bffdef258f4d8d4626a6e276379a_1440w.webp" alt="img" /></p>
<p>对角线对称的两个位置互为倒数。</p>
<p>然后计算权重向量，一种方法是方根法、一种是和法。共有K个准则时，方根法就是求一行乘积的K次开根，和法则是求每一列归一化之后按行求和。这两种算完之后都需要进行标准化，即算完的各个值应当构成一个K维向量，每一维的值要除以这几维的总和，保证标准化后各维度总和是1。</p>
<p>然后需要进行一些复杂的计算，叫做一致性检验，得出一个CR值，这个值应当小于0.1，否则就说明我们构建判断矩阵的时候出现了逻辑错误，需要对判断矩阵进行修改。</p>
<p>最后得出分析结果。</p>
<h2 id="逻辑回归模型"><a class="markdownIt-Anchor" href="#逻辑回归模型"></a> 逻辑回归模型</h2>
<p><a href="https://zhuanlan.zhihu.com/p/74874291">https://zhuanlan.zhihu.com/p/74874291</a></p>
<p>逻辑分布：<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>≤</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>γ</mi></mrow></msup></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}F(x)=P(X\le x)=\frac{1}{1+e^{-(x-\mu)/\gamma}}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40877em;vertical-align:-0.954385em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.454385em;"><span style="top:-3.454385em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.2960000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.814em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">μ</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mathnormal mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.78733em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.954385em;"><span></span></span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>F</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>X</mi><mo>≤</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><msup><mi>e</mi><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>γ</mi></mrow></msup><mrow><mi>γ</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>γ</mi></mrow></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}f(x)=F&#x27;(X\le x)=\frac{e^{-(x-\mu)/\gamma}}{\gamma(1+e^{-(x-\mu)/\gamma})^2}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.819em;vertical-align:-1.1595em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6595em;"><span style="top:-3.6595em;"><span class="pstrut" style="height:3.565em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.565em;"><span style="top:-2.2960000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.814em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">μ</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mathnormal mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">μ</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mathnormal mtight" style="margin-right:0.05556em;">γ</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1595em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">μ</span></span></span></span> 为位置参数， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\gamma\gt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 为形状参数。</p>
<p>逻辑回归的本质就是，假设数据服从逻辑分布，然后用极大似然估计做参数的估计。</p>
<p>逻辑回归主要用于分类问题，以二分类为例。</p>
<p>只需要知道可以用来解决二分类或者多分类问题就可以了。</p>
<h2 id="支持"><a class="markdownIt-Anchor" href="#支持"></a> 支持</h2>
<h2 id="向量机svm"><a class="markdownIt-Anchor" href="#向量机svm"></a> 向量机（SVM）</h2>
<p>基本想法就是求解能够在给定的一系列高维数据点之中求解能划分数据集并且与两侧的最小几何间距最大的超平面。需要数据集是线性可分的。</p>
<p>需要经过一些复杂的计算，略。<br />
<a href="https://www.zhihu.com/tardis/zm/art/31886934?source_id=1005">https://www.zhihu.com/tardis/zm/art/31886934?source_id=1005</a></p>
<p>同时还有非线形SVM算法，可以通过核函数替代内积求解，得到对应的分离超平面。</p>
<h2 id="随机森林"><a class="markdownIt-Anchor" href="#随机森林"></a> 随机森林</h2>
<p><a href="https://zhuanlan.zhihu.com/p/406627649">https://zhuanlan.zhihu.com/p/406627649</a><br />
随机森林的本质是训练若干个决策树，然后对这些决策树的结果取加权平均。随机性的引入使得其不容易过拟合，且有很强的抗噪能力。</p>
<p>比如训练集大小为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> ，则随机且有放回地从训练集中抽取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 个训练样本（即有可能抽取同一个样本多次）作为这棵树的训练集，这导致每棵树的训练集都有所不同。如果存在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 个特征，则在每个节点分裂时从其中随机选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 个特征维度来分割节点， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 保持不变且远小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 。这里每个分类器分类能力越强，森林效果越好。分类器之间相关性越小，森林效果越好。</p>
<p>由于这种分类特征，每棵树都有一部分未被选到的样本称为 OOB (out-of-bag) 样本，使用这些样本输入每个分类器进行分类，用简单多数投票作为分类结果，得到的误差比率就可以作为森林的泛化误差的一个无偏估计，通过比较该值就能获得一个合适的特征数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 。</p>
<h2 id="k-近邻knn"><a class="markdownIt-Anchor" href="#k-近邻knn"></a> K-近邻（KNN）</h2>
<p>一种分类算法。每次对于一个新增的点进行分类时，根据其周围前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span> 个最近的（已经被分类的）邻居的类别决定它的类别。</p>
<p>一般来说会试用不同的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span> 值并最终得到一个使得分类效果最好的值，不同的距离函数也会影响其分类效果。</p>
<p>属于有监督学习。</p>
<h2 id="k-means"><a class="markdownIt-Anchor" href="#k-means"></a> K-Means</h2>
<p>属于无监督学习。</p>
<p><a href="https://zhuanlan.zhihu.com/p/78798251">https://zhuanlan.zhihu.com/p/78798251</a><br />
选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span> 个随机的点作为聚类中心，对于数据集中的每一个点，根据其距离这 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span> 个点中哪一个最近来决定分类到哪一类。分类完成后，对每一个类别的所有点，计算其质心（即各个维度均值位置）作为聚类中心，再重复上述过程，直到达到某个中止条件（迭代次数，最小变化……）</p>
<p>对初始的簇中心敏感，是局部最优，簇近似高斯分布时效果很好，不适合多分类任务，不适合太过离散的分类、样本类别不平衡的分类、非凸形状的分类。</p>
<p>一种优化算法是K-Means++，优化了初始选取的方式：先随机选取一个中心点，再每次计算所有数据到之前所有中心点最远的距离并以一定概率选择，基本就是尽可能选择离之前已选中心点更远的点。</p>
<h2 id="层次聚类"><a class="markdownIt-Anchor" href="#层次聚类"></a> 层次聚类</h2>
<p>一种分类算法。</p>
<p><a href="https://zhuanlan.zhihu.com/p/54643386">https://zhuanlan.zhihu.com/p/54643386</a><br />
一层一层将所有的样本点逐渐进行一次次合并，得到结果，图片展示起来会比较清晰：</p>
<p><img src="https://pic4.zhimg.com/80/v2-7bee757ac62420cb4d94dc1dc14da037_1440w.webp" alt="1" /></p>
<p>上图的两个方向对应两种算法，AGNES自底向上，初始时每个样本当做一个簇，每次找出距离最近的两个簇将其合并，直到直到最远的两簇距离超过阈值或簇点个数到达指定值。DIANA自顶向下，初始时所有样本在一个簇内，每次对于一个簇，找出其中距离最远的两个点作为两个新簇中心，按剩余点距离哪个近就分到哪个里，不断重复直到最远的两簇距离小于阈值或簇点个数到达指定值。</p>
<p>类似的，度量距离的不同方法也会影响分类结果。</p>
<h2 id="自回归模型ar"><a class="markdownIt-Anchor" href="#自回归模型ar"></a> 自回归模型（AR）</h2>
<p>一种基于历史时间上取值建立回归方程预测未来情况的方式。</p>
<p><a href="https://zhuanlan.zhihu.com/p/435442095">https://zhuanlan.zhihu.com/p/435442095</a><br />
<a href="https://zhuanlan.zhihu.com/p/37968357">https://zhuanlan.zhihu.com/p/37968357</a><br />
一个一般建模过程如下：</p>
<ol>
<li>首先进行白噪声检验，如果是白噪声不进行建模。</li>
<li>再进行平稳性检验，如果判定为非平稳，进行平稳化处理后转步骤1，否则进行下一步。</li>
<li>建立模型，估计参数</li>
<li>检验适用性，否则重新建模</li>
</ol>
<p>计算自相关系数（SAF）和偏自相关系数（PACF）后，如果满足下列条件：</p>
<ul>
<li>ACF 具有拖尾性，即 ACF(k) 不会在 k 大于某个常数之后就恒等于 0。</li>
<li>PACF 具有截尾性，即 PACF(k) 在 k&gt;p 时变为 0。（用来确定阶数， PACF 在 p 阶延迟后未必严格为 0 ，而是在 0 附近的小范围内波动</li>
</ul>
<p>则可以尝试使用 AR(k) 模型建模。但还需要进一步确定阶数，可以通过 FPE 准则或贝叶斯信息准则进行确定。</p>
<p>检验模型拟合度可以从两个方面考虑，一个是有效性检验，即残差序列的白噪声检验，再进行显著性检验，简化模型（可以使用T检验）。</p>
<h2 id="滑动平均模型mr"><a class="markdownIt-Anchor" href="#滑动平均模型mr"></a> 滑动平均模型（MR）</h2>
<p>类似自回归模型，不过采用一段时间窗口内的均值进行预测。看不懂，// TODO</p>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>CUMCM</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模国赛统计类简略思路</title>
    <url>/2023/09/06/CUMCM-2/</url>
    <content><![CDATA[<h1 id="统计分析类题目大致流程"><a class="markdownIt-Anchor" href="#统计分析类题目大致流程"></a> 统计分析类题目大致流程</h1>
<p><a href="https://zhuanlan.zhihu.com/p/294812633">https://zhuanlan.zhihu.com/p/294812633</a></p>
<p>数学建模中有一类相对固定的题目——统计分析类题目，其特点是需要对一些数据进行统计分析评价，得出相关结论，进行预测或设计改进等等。这类问题往往会提供一些数据，如果提供数据了，有可能是从某个位置提取的，可以尝试搜索有没有更全的数据（但要注意不能超出题目要求范围，最多辅助验证构造更好的算法）。也有可能不会提供数据，需要自行查找，此时就需要妥善选择数据，获得的数据不能太少、太偏，也不能太过复杂，如果维度太多或者涉及的角度太多的话会导致分析复杂，不利于解题。</p>
<h2 id="数据预处理"><a class="markdownIt-Anchor" href="#数据预处理"></a> 数据预处理</h2>
<h3 id="数据清洗"><a class="markdownIt-Anchor" href="#数据清洗"></a> 数据清洗</h3>
<p>题目如果有要求数据清洗，一般会告知“某某到某某范围是有效数据”，或者在数据中就有标注，如“有效发票”或“作废发票”，在这种情况下，这类数据不具有有效性，没有分析价值，是必须要剔除的。</p>
<p>同时，如果是优化类题目，比如需要为信贷公司做决策，此时就可以将一些失信程度过高的公司提前剔除。</p>
<p>此外，在后续分析中如果出现异常值，如某值超过其他值过多等等，则需要妥善考虑，是题目的重要分析点，还是异常无需分析的数据，需要具体情况具体分析。</p>
<h3 id="数据分析"><a class="markdownIt-Anchor" href="#数据分析"></a> 数据分析</h3>
<p>这里需要使用各种方法和模型进行分析，主要是为了搞明白数据分布情况，以此来决定做题时使用的具体方法和预测模型等等，题目也有可能会明确指出需要分析什么样的信息，比如各个维度的相关关系等等。</p>
<h4 id="统计性描述"><a class="markdownIt-Anchor" href="#统计性描述"></a> 统计性描述</h4>
<p>先描绘出一些常见属性：均值、中位数、方差、偏度、峰度、集中趋势、离散趋势。</p>
<p>使用折线图、柱状图、饼图、箱线图、散点图等等。</p>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>CUMCM</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模2016～2022题目重点Tag整理</title>
    <url>/2023/09/06/CUMCM-3/</url>
    <content><![CDATA[<ul>
<li>2022A 波浪能最大输出功率设计：物理 力学 微分方程</li>
<li>2022B 无人机遂行编队飞行中的纯方位无源定位：几何 三角函数 模拟</li>
<li>2022C 古代玻璃制品的成分分析与鉴别：统计 卡方检验 聚类 关联分析</li>
<li>2021A FAST主动反射面形状调节：几何 单目标优化 抛物面</li>
<li>2021B C4烯烃制备分析与试验设计：统计 关联分析 多元回归 单目标优化</li>
<li>2021C 生产企业原材料订购与运输：评价 TOPSIS 多目标规划</li>
<li>2020A 炉温曲线：热传导方程 牛顿冷却定律 有限元差分 多目标优化</li>
<li>2020B 穿越沙漠：单目标优化 决策模型 博弈论 动态规划 模拟</li>
<li>2020C 信贷风险评估与信贷策略：统计 决策 主成分分析 多目标规划 聚类</li>
<li>2019A 高压油管压力控制：常微分方程 数值积分 单目标优化 差分</li>
<li>2019B 同心协力鼓：物理 运动学 刚体力学 碰撞</li>
<li>2019C 机场出租车问题：统计 自行搜索数据 决策 模拟 单目标优化 排队论</li>
<li>2018A 基于非稳态导热的高温作业专用服装设计：热传导方程 Fourier定律 有限差分 多目标优化</li>
<li>2018B 智能RGV的动态调度策略：多阶段决策 规划 非线性优化 模拟</li>
<li>2018C 大型百货商场会员画像描绘：聚类 关联数据挖掘</li>
<li>2017A 平行束 CT 系统的参数标定及成像：非线性优化 Radon变换 二维平行波反投影重建</li>
<li>2017B 众包平台的任务定价：统计 聚类 多元回归 双目标优化 模拟</li>
<li>2017C 比色法判断物质浓度：统计 相关性分析 层次分析 多元回归</li>
<li>2016A 系泊系统的设计：物理 刚体力学 非线性规划 多目标优化</li>
<li>2016B 小区开放对道路通行的影响：微分方程 规划 元胞运动规划 相关性分析 评价 多目标规划 （层次分析 聚类分析）</li>
<li>2016C 电池剩余放电时间预测：多项式拟合 预测</li>
</ul>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>CUMCM</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模国赛算法整理-2</title>
    <url>/2023/09/06/CUMCM-4/</url>
    <content><![CDATA[<h2 id="实验设计"><a class="markdownIt-Anchor" href="#实验设计"></a> 实验设计</h2>
<h3 id="正交表"><a class="markdownIt-Anchor" href="#正交表"></a> 正交表</h3>
<p>正交试验法是研究多因素多水平的一种设计方法，根据正交性从全面试验中挑选出部分有代表性的点进行试验，这些有代表性的点具备了“均匀分散，齐整可比”的特点，正交试验是分析因式设计的主要方法。也是一种高效率、快速、经济的实验设计方法。它利用一套规格化的表格，即正交表来设计试验方案和分析试验结果，能够在很多的试验条件中，选出少数几个代表性强的试验条件，并通过这几次试验的数据，找到较好的生产条件，即最优的或较优的方案。</p>
<p>正交表获取：<a href="https://www.york.ac.uk/depts/maths/tables/orthogonal.htm">https://www.york.ac.uk/depts/maths/tables/orthogonal.htm</a></p>
<h3 id="pict"><a class="markdownIt-Anchor" href="#pict"></a> PICT</h3>
<p>微软开发的自动测试设计命令行工具</p>
<h2 id="共线性问题"><a class="markdownIt-Anchor" href="#共线性问题"></a> 共线性问题</h2>
<p><a href="https://zhuanlan.zhihu.com/p/355241680">https://zhuanlan.zhihu.com/p/355241680</a></p>
<p>共线性，简单来说就是两个属性之间具有线形的相关关系，比如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msub><mi>b</mi><mn>0</mn></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">y=b_0+b_1x_1+b_2x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_1,x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 之间线性相关或者有一定相关程度，分析出来的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">b_1,b_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 就可以有无穷多种有效的取值，会产生各种各样的问题。后文的大量模型也都是对共线性敏感的，也就是说如果出现了共线性，模型就很容易失效，因此使用一些模型之前最好进行共线性检查。可以通过计算VIF值的大小来判断多重共线性的严重程度，一般来说认为VIF大于10时存在多重共线性。</p>
<h2 id="拟合"><a class="markdownIt-Anchor" href="#拟合"></a> 拟合</h2>
<h3 id="高斯过程回归gpr"><a class="markdownIt-Anchor" href="#高斯过程回归gpr"></a> 高斯过程回归（GPR）</h3>
<p><a href="https://zhuanlan.zhihu.com/p/99617693">https://zhuanlan.zhihu.com/p/99617693</a></p>
<p>高斯过程回归是一种回归方式，形式化推导和参考代码可以参考<a href="https://zhuanlan.zhihu.com/p/104601803">链接</a>，需要定义核函数，常用的包括平方指数核、指核、matern核（常用matern5/2或matern3/2）等。拟合能力较强，同时不仅能够进行预测，也能够给出95%置信度区间，从而得到一个大致的分布。</p>
<h3 id="岭回归和lasso回归"><a class="markdownIt-Anchor" href="#岭回归和lasso回归"></a> 岭回归和Lasso回归</h3>
<p><a href="https://zhuanlan.zhihu.com/p/88698511">https://zhuanlan.zhihu.com/p/88698511</a></p>
<p>是两种对于线性回归的优化，泛化能力更强，以损失部分信息，降低精度为代价让回归系数更符合实际，更可靠，更适用于共线性数据和病态数据。岭回归和Lasso回归分别引入了二范数和一范数作为正则项，同时也可以使得最小二乘中的矩阵一定可逆。</p>
<p>Lasso回归采用一范数来约束，使参数非零个数最少。而Lasso和岭回归的区别很好理解，在优化过程中，最优解为函数等值线与约束空间的交集，正则项可以看作是约束空间。可以看出二范的约束空间是一个球形，一范的约束空间是一个方形，这也就是二范会得到很多参数接近 0 的值，而一范会尽可能非零参数最少。</p>
<p><img src="https://pic4.zhimg.com/80/v2-1cb777c2413e0c154e6e6de773a09753_1440w.webp" alt="img" /></p>
<h3 id="局部加权线性回归"><a class="markdownIt-Anchor" href="#局部加权线性回归"></a> 局部加权线性回归</h3>
<p>在线性回归基础上为每一个待预测的点引入一个加权的线性模型，根据预测点和数据集中的点的距离给数据集中的点赋予权重，距离预测点更远时权重更小，能够产生一种局部分段拟合的效果，但是因为对每个预测点都要计算与数据集所有点的距离，计算成本较高。（见前面岭回归的链接）</p>
<h2 id="多因素统计分析"><a class="markdownIt-Anchor" href="#多因素统计分析"></a> 多因素统计分析</h2>
<p><a href="https://zhuanlan.zhihu.com/p/362258222">https://zhuanlan.zhihu.com/p/362258222</a><br />
简单来说，就是我们有一堆数据，我们想知道多个维度之间，是否存在这个维度和那个维度有相关性，相关性多大。</p>
<p>可视化可以通过热力图的方式进行。</p>
<h3 id="灰色关联度分析"><a class="markdownIt-Anchor" href="#灰色关联度分析"></a> 灰色关联度分析</h3>
<p><a href="https://zhuanlan.zhihu.com/p/149479206">https://zhuanlan.zhihu.com/p/149479206</a><br />
需要选定一个母序列，对各个要素进行归一化之后计算关联系数均值，形成关联序。</p>
<h3 id="pearson-相关系数"><a class="markdownIt-Anchor" href="#pearson-相关系数"></a> Pearson 相关系数</h3>
<p>可以反映两个连续变量之间的线形相关程度。展示这种相关系数可以将对应的两维数据散点图绘制出来。</p>
<h3 id="spearman-相关系数"><a class="markdownIt-Anchor" href="#spearman-相关系数"></a> Spearman 相关系数</h3>
<p>比衡量两个连续变量在排序上的单调关系，与取值无关。如果两个遍变量有非线形的单调关系（递增或者递减），使用 Spearman 相关系数效果会更好。</p>
<h3 id="kendall-相关系数"><a class="markdownIt-Anchor" href="#kendall-相关系数"></a> Kendall 相关系数</h3>
<p><a href="https://zhuanlan.zhihu.com/p/33465271">https://zhuanlan.zhihu.com/p/33465271</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/339077538">https://zhuanlan.zhihu.com/p/339077538</a></p>
<p>可以用于离散但有序的变量，如名次、年龄段、肥胖等级等等。也适用于度量两个变量之间的单调关系强弱。有两个计算公式，Tau-a和Tau-b，其中处理有相通值的数据时使用后者。</p>
<h3 id="uncertainty-coefficient不确定性系数"><a class="markdownIt-Anchor" href="#uncertainty-coefficient不确定性系数"></a> Uncertainty coefficient（不确定性系数）</h3>
<p>用于离散变量和离散变量之间的相关程度。</p>
<h3 id="correlation_ratio"><a class="markdownIt-Anchor" href="#correlation_ratio"></a> correlation_ratio</h3>
<p>用于连续变量和离散变量的相关程度。</p>
<h2 id="亲和性分析"><a class="markdownIt-Anchor" href="#亲和性分析"></a> 亲和性分析</h2>
<p>用于分析一组离散数据中元素与元素之间的亲和度（是否更容易一起出现）。比如有一份商店的购买清单，标注了比如某一单买了芒果苹果香蕉，某一单买了苹果黄油牛奶……</p>
<p>需要计算支持度和置信度。</p>
<p>支持度就是对于某一组物品，这组物品同时出现的交易数 / 交易总数。</p>
<p>置信度就是比如我们要考虑A和B同时出现，那就是AB同时出现在所有包含A的交易的占比。</p>
<h3 id="apriori"><a class="markdownIt-Anchor" href="#apriori"></a> Apriori</h3>
<p><a href="https://zhuanlan.zhihu.com/p/113718432">https://zhuanlan.zhihu.com/p/113718432</a></p>
<p>需要确立一个支持度阈值，然后算法会扫描数据集，不断重复迭代计算，输出满足最小支持度的所有项集，可以经由PCY算法优化内存占用。</p>
<h2 id="卡方检验"><a class="markdownIt-Anchor" href="#卡方检验"></a> 卡方检验</h2>
<p><a href="https://zhuanlan.zhihu.com/p/551088102">https://zhuanlan.zhihu.com/p/551088102</a><br />
一般用于验证两变量是否相互独立，或者有相关性。</p>
<h3 id="pearson-卡方检验"><a class="markdownIt-Anchor" href="#pearson-卡方检验"></a> Pearson 卡方检验</h3>
<p>要求自由度大于1时，期望次数小于5的字段数不多于总字段的20%。<br />
自由度等于1时，期望次数大于等于10。<br />
自由度：<a href="https://zhuanlan.zhihu.com/p/43042410">https://zhuanlan.zhihu.com/p/43042410</a></p>
<h3 id="卡方拟合优度检验"><a class="markdownIt-Anchor" href="#卡方拟合优度检验"></a> 卡方拟合优度检验</h3>
<p>检验一种拟合符合原始数据的程度，在做了回归之后可以使用用以验证结果。</p>
<h3 id="yates-校正卡方检验"><a class="markdownIt-Anchor" href="#yates-校正卡方检验"></a> Yates 校正卡方检验</h3>
<p>字段期望次数小于5时，不采用Pearson，转而采用Yates。</p>
<h3 id="fisher-精确检验"><a class="markdownIt-Anchor" href="#fisher-精确检验"></a> Fisher 精确检验</h3>
<p>样本总量小于40，或某值期望频数小于1，或检验所得P值接近于检验水准<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>时采用。</p>
<p>参考：</p>
<ul>
<li>一般优先考虑皮尔森卡方检验，当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>40</mn></mrow><annotation encoding="application/x-tex">n\ge 40</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">T(n) \ge 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>为理论频数，用 Pearson 统计量</li>
<li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>40</mn></mrow><annotation encoding="application/x-tex">n\ge40</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">0</span></span></span></span> 时，如果某个格子出现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≥</mo><mi>T</mi><mo>≥</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">1\ge T \ge5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>，则需作叶氏连续性校正</li>
<li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&lt;</mo><mn>40</mn></mrow><annotation encoding="application/x-tex">n&lt;40</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">0</span></span></span></span>，或任何格子出现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">T&lt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，或检验所得的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span> 值接近于检验水准，采用 Fisher 精确检验</li>
</ul>
<h3 id="分层卡方分析cmh检验"><a class="markdownIt-Anchor" href="#分层卡方分析cmh检验"></a> 分层卡方分析（CMH检验）</h3>
<p>在卡方检验基础上考虑混杂因素的分析，比如想要调查某一地区接种疫苗 (X) 对感染病毒 (Y) 的影响，由此来判断疫苗的有效性；但考虑到男性、女性体质的不同，疫苗可能会造成不一样的抵抗病毒能力，因此将性别 (Z) 作为混杂因素来进行分析。</p>
<h3 id="配对卡方检验"><a class="markdownIt-Anchor" href="#配对卡方检验"></a> 配对卡方检验</h3>
<p>配对卡方检验用于分析配对定类变量X1与定类变量X2之间的差异性。它要求数据是配对的，即变量X1、X2是一个事物的同一属性，例如分别采用甲、乙两种方法对同一批病人进行检查，比较此两种方法的结果是否有本质不同，此时要用配对卡方检验。</p>
<p>需要满足：</p>
<ul>
<li>观测变量是二分类变量（互斥）</li>
<li>分组变量有两类（有三类及以上的用Cochran’s Q检验）</li>
</ul>
<h3 id="ridit-分析"><a class="markdownIt-Anchor" href="#ridit-分析"></a> Ridit 分析</h3>
<p>用于考察定类变量与有序定类变量之间的差异性。常用于医学研究中，如研究两三种药物对疗效的差异性。其中疗效分为（痊愈、显效、有效、无效），用卡方检验只能反映药物与疗效之间是否有差异，当出现差异性时，无法进一步比较各药物的疗效水平情况。</p>
<p>案例：根据三种药物对于疾病的疗效情况，来分析三种药物的疗效是否有显著差异。本例中以编码的形式给疗效变量的水平进行排序–无效（1）、有效（2）、显效（3）、痊愈（4）。</p>
<h2 id="聚类分析"><a class="markdownIt-Anchor" href="#聚类分析"></a> 聚类分析</h2>
<p><a href="https://blog.csdn.net/m0_72410588/article/details/130654236">https://blog.csdn.net/m0_72410588/article/details/130654236</a><br />
简单来说就是把相似的对象分为一类的算法。</p>
<h3 id="diriclet回归"><a class="markdownIt-Anchor" href="#diriclet回归"></a> Diriclet回归</h3>
<p>可以用来进行多元分类或多标签分类等等任务，总之很强大x</p>
<p>但是没搞懂，先略。</p>
<h3 id="logistic回归"><a class="markdownIt-Anchor" href="#logistic回归"></a> Logistic回归</h3>
<p><a href="https://zhuanlan.zhihu.com/p/353112595">https://zhuanlan.zhihu.com/p/353112595</a><br />
是一种分类模型。多重线性回归模型要求因变量是连续型的正态分布变量，且自变量与因变量呈线性关系。当因变量是分类变量，且自变量与因变量不呈线性关系时，就不能确足多重线性回归模型的适用条件。此时，处理该类资料常用Logistic回归模型。Logistic回归分析属于非线性回归，它是研究因变量为二项分类或多项分类结果与某些影响因素之间关系的一种多重回归分析方法。</p>
<h3 id="adaboost"><a class="markdownIt-Anchor" href="#adaboost"></a> AdaBoost</h3>
<p>一种基于训练多个弱分类器并将其组合得到一个强分类器的，需要一定的数据进行训练。具体来说，初始化时将各个训练样本权值设为相等的值，然后每次训练结束后，对分类效果好的样本降低权值，分类效果不好的样本提高权值，训练下一个弱分类器，如此重复，直到弱分类器个数满足要求，最后按分类器的分类误差大小决定组合时的权重，生成最后用于分类的强分类器。</p>
<h3 id="朴素贝叶斯"><a class="markdownIt-Anchor" href="#朴素贝叶斯"></a> 朴素贝叶斯</h3>
<p><a href="https://zhuanlan.zhihu.com/p/26262151">https://zhuanlan.zhihu.com/p/26262151</a></p>
<p>结合先验概率和后验概率，加入了假设：给定目标属性之间相互条件独立，也就是说没有哪个属性变量对决策结果占有较大比重或较小比重。分类效率稳定，适合增量式训练，对缺失数据不敏感，算法简单。但是需要先验概率，要求属性之间不能有太大相关性，存在一定错误率。</p>
<p>当然，各个属性两两之间完全相互独立的情况是相对少见的，因此可以适当放宽假设为“每个属性至多依赖于一个其他属性”即ODE。<a href="https://zhuanlan.zhihu.com/p/350772160">https://zhuanlan.zhihu.com/p/350772160</a></p>
<p>取决于如何进行假设，还可以进行细分：如果假设所有属性都依赖于同一个属性，称为“超父”（super-parent），则形成了SPODE算法，如果将每个属性都作为超父构建SPODE，然后集成起来作为最终结果，就形成了AODE算法，是一种基于集成学习机制、更为强大的独依赖分类器。AODE算法需要经过训练。</p>
<p>还有一种改进，通过构建最大带权生成树获得属性之间的依赖关系，这种算法叫做TAN，树增强型贝叶斯算法。<a href="https://zhuanlan.zhihu.com/p/377045404">https://zhuanlan.zhihu.com/p/377045404</a>，类似的，也会需要训练。</p>
<h3 id="q型聚类"><a class="markdownIt-Anchor" href="#q型聚类"></a> Q型聚类</h3>
<p>把所有物体分到不同的簇中，每个物体对应一个簇。</p>
<h4 id="k-means"><a class="markdownIt-Anchor" href="#k-means"></a> K-Means</h4>
<p>无监督、计算简单、速度快、对初始质心敏感，可以使用K-Means++来提升效果。</p>
<h4 id="k-medoids"><a class="markdownIt-Anchor" href="#k-medoids"></a> K-Medoids</h4>
<p>随机选取K个样本为中心，将所有样本按距离哪个中心近就划分到哪个簇，在每个簇内，按到簇内所有数据点距离和最小的点作为新的中心，重复直到中心不再变化。</p>
<p>类似K-Means，相比K-Means略慢。</p>
<h4 id="层次聚类"><a class="markdownIt-Anchor" href="#层次聚类"></a> 层次聚类</h4>
<p>分两种，自底向上或自顶向下，前者对所有分开的物体不断进行合并，后者从包含所有物体的一个簇开始不断将其分裂。</p>
<p>不需要事先确定聚类数目（即K-Means的K），可视化效果好，计算较慢。</p>
<h4 id="dbscan"><a class="markdownIt-Anchor" href="#dbscan"></a> DBSCAN</h4>
<p>基于密度，能够处理任意形状的簇，能够识别噪声数据，但是对距离度量的选择敏感。</p>
<h4 id="knn"><a class="markdownIt-Anchor" href="#knn"></a> KNN</h4>
<p>是一种有监督的算法（需要事先有数据训练），类似K-Means</p>
<h3 id="r型聚类"><a class="markdownIt-Anchor" href="#r型聚类"></a> R型聚类</h3>
<p>可能将一个样本分到多个簇。便于了解各个簇之间的亲疏程度，聚类完成后可以选择主要变量进行回归分析或Q型聚类。</p>
<p>可以对所有的变量进行R型分析获得代表性特征变量用于后续分析。</p>
<h4 id="fuzzy-c-means-possibilistic-c-means"><a class="markdownIt-Anchor" href="#fuzzy-c-means-possibilistic-c-means"></a> Fuzzy C-Means &amp; Possibilistic C-Means</h4>
<p>对噪声数据有较强的容忍性，但是处理高维度系数数据相对困难。</p>
<h2 id="评价类方法"><a class="markdownIt-Anchor" href="#评价类方法"></a> 评价类方法</h2>
<h3 id="熵权法"><a class="markdownIt-Anchor" href="#熵权法"></a> 熵权法</h3>
<p><a href="https://zhuanlan.zhihu.com/p/267259810">https://zhuanlan.zhihu.com/p/267259810</a>根据变异性的大小来确定客观权重，一个指标的信息熵越小，提供的信息量越多。</p>
<p>注意数据要先标准化。</p>
<p>可以根据各个指标的变异程度，给出各个指标的重要性，也就是权重大小，可以用于在不明权重的情况下的赋权的权值决定。</p>
<h3 id="利用主成分分析pca进行评价"><a class="markdownIt-Anchor" href="#利用主成分分析pca进行评价"></a> 利用主成分分析（PCA）进行评价</h3>
<p>计算得到主成分之后，计算各个成分对于主成分的贡献率与累积贡献率，若前几个指标的累积贡献率大于阈值（如85%）则可以说这几个指标主要影响了结果值。</p>
<h3 id="topsis"><a class="markdownIt-Anchor" href="#topsis"></a> TOPSIS</h3>
<p><a href="https://zhuanlan.zhihu.com/p/266689519">https://zhuanlan.zhihu.com/p/266689519</a></p>
<p>逼近理想解排序法。一种充分利用原始数据信息，能够精确地反映各评价方案之间的差距的方法。通过根据各个数据评估方案系统中任何一个方案距离理想最优解和最劣解的距离（通过每个指标都取到系统中的评价指标最优值来决定理想最优方案，最劣方案类似）。</p>
<p>综合距离用这样的表达式衡量：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mrow><mi>S</mi><mi>o</mi><msub><mi>l</mi><mn>1</mn></msub><mo>−</mo><mi>W</mi><mi>o</mi><mi>r</mi><mi>s</mi><mi>t</mi></mrow><mrow><mi>T</mi><mi>h</mi><mi>e</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi>B</mi><mi>e</mi><mi>s</mi><mi>t</mi><mo>−</mo><mi>W</mi><mi>o</mi><mi>r</mi><mi>s</mi><mi>t</mi></mrow></mfrac></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\frac{Sol_1-Worst}{TheoryBest-Worst}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.55188em;vertical-align:-1.02594em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.52594em;"><span style="top:-3.5259399999999994em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.02594em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>能够看出，该公式代入最优解值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，最劣解时为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 。</p>
<p>但是不同数据取不同类型值时最好，因此要将不同类值进行”正向化处理“。</p>
<ul>
<li>极大型/极小型指标：越大/小越好，我们的目标是把各类值都转化为极大型。对于极小型，可以选择取负或者取倒数（当所有元素都为正时）</li>
<li>中间型指标：越接近某个目标值越好，则可以取该值和目标值的差值的绝对值：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mover accent="true"><msub><mi>x</mi><mi>i</mi></msub><mo>^</mo></mover><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>b</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow></msub><mi mathvariant="normal">∣</mi></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>k</mi></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>b</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow></msub><mi mathvariant="normal">∣</mi><mo stretchy="false">}</mo></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\hat{x_i}=1-\frac{|x_i-x_{best}|}{max\{|x_k-x_{best}|\}}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.6630000000000003em;vertical-align:-1.0815000000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5815000000000001em;"><span style="top:-3.5815em;"><span class="pstrut" style="height:3.427em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mclose">}</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0815000000000001em;"><span></span></span></span></span></span></span></span></span></span></span></li>
<li>区间型指标：进入某个区间为最好，令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mi>a</mi><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">{</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">}</mo><mo>−</mo><mi>b</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">M=max\{a-min\{x_i\},max\{x_i\}-b\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">}</span></span></span></span> ，然后进行转化：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>x</mi><mi>i</mi></msub><mo>^</mo></mover><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right left right" columnspacing="0em 1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1</mn><mo>−</mo><mfrac><mrow><mi>a</mi><mo>−</mo><msub><mi>x</mi><mi>i</mi></msub></mrow><mi>M</mi></mfrac><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>&lt;</mo><mi>a</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>a</mi><mo>&lt;</mo><msub><mi>x</mi><mi>i</mi></msub><mo>&lt;</mo><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1</mn><mo>−</mo><mfrac><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mi>b</mi></mrow><mi>M</mi></mfrac><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>&gt;</mo><mi>b</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\hat{x_i}=\left\{\begin{aligned}1-\frac{a-x_i}{M}, &amp;&amp; x_i&lt;a \\1,&amp;&amp;a\lt x_i\lt b \\1-\frac{x_i-b}{M},&amp;&amp;x_i\gt b \end{aligned}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.103770000000001em;vertical-align:-2.8018850000000004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500200000000006em;"><span style="top:-1.2999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.2949899999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.58999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8849900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.17999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.205010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.301885em;"><span style="top:-5.412995em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span></span></span><span style="top:-3.5869949999999995em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-1.5555549999999996em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8018850000000004em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.301885em;"><span style="top:-5.412995em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-3.5869949999999995em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-1.5555549999999996em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8018850000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.301885em;"><span style="top:-5.412995em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span></span></span><span style="top:-3.5869949999999995em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">b</span></span></span><span style="top:-1.5555549999999996em;"><span class="pstrut" style="height:3.3714399999999998em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8018850000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li>
</ul>
<p>然后需要对数据进行标准化：对每个元素，将其改变为：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mi>e</mi><msqrt><mi>S</mi></msqrt></mfrac></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\frac{e}{\sqrt{S}}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.33756em;vertical-align:-0.9187800000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4187799999999997em;"><span style="top:-3.4187800000000004em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.1833349999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9187800000000002em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span> 为该元素，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 为该元素所在列的元素平方和，然后就直接取每列的最大、最小值作为最优、最劣解值构成理想最优解和理想最劣解即可，然后计算距离即可得出。</p>
<h3 id="pagerank"><a class="markdownIt-Anchor" href="#pagerank"></a> PageRank</h3>
<p><a href="https://zhuanlan.zhihu.com/p/137561088">https://zhuanlan.zhihu.com/p/137561088</a></p>
<p>对于图形式的数据，PageRank算法可以对图进行链接分析，是一种无监督学习算法，可以应用于图各个节点的重要度评价问题上。</p>
<p>基本思路就是对于一个有向图，假设一种跳转方式为从任意节点等概率跳转到任何有边连过去的节点，则每一次迭代时，每个节点原本有一个“到这个节点的概率”（马尔可夫链的转移概率），根据跳转方式，将跳转到的目标节点的值用所有跳转过来的节点的原概率乘以跳转概率的求和表示，如此不断迭代直到收敛。</p>
<p>比如三个节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A,B,C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> 的有向图有边 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mrow><mi>A</mi><mi>A</mi></mrow><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mrow><mi>A</mi><mi>C</mi></mrow><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mrow><mi>B</mi><mi>A</mi></mrow><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mrow><mi>B</mi><mi>C</mi></mrow><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mrow><mi>C</mi><mi>A</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AB},\vec{AA},\vec{AC},\vec{BA},\vec{BC},\vec{CA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1607699999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal">A</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">A</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>，则可以用如下转移矩阵表示跳转方式：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>3</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>3</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>3</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}\frac{1}{3} &amp;\frac{1}{2} &amp;1\\ \frac{1}{3}&amp;0&amp;0\\\frac{1}{3}&amp;\frac{1}{2}&amp;0\end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.615324em;vertical-align:-1.5576620000000005em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0576619999999997em;"><span style="top:-4.212554em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.0074459999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.8023379999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5576620000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0576619999999997em;"><span style="top:-4.212554em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.0074459999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8023379999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5576620000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0576619999999997em;"><span style="top:-4.212554em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0074459999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8023379999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5576620000000005em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>然后有表示每个节点概率的三维向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>，则比如当前时刻的节点概率为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">R_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则下一时刻的节点概率 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>M</mi><msub><mi>R</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">R_{t+1}=MR_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，不断迭代后会收敛到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mi>M</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">R=MR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>，此时的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> 就是各个节点的 Pagerank 值。</p>
<p>实际计算中还会为了保证收敛，导入一个平滑项 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d\in (0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，代表每次转移时，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span> 的概率随机跳转到任意一个节点上，此时能够保证前述的迭代一定收敛。</p>
<h3 id="box-behnken-响应面法"><a class="markdownIt-Anchor" href="#box-behnken-响应面法"></a> <strong>Box-Behnken-响应面法</strong></h3>
<p><a href="https://www.zhihu.com/question/316433312">https://www.zhihu.com/question/316433312</a></p>
<h2 id="预测类方法"><a class="markdownIt-Anchor" href="#预测类方法"></a> 预测类方法</h2>
<h3 id="bp神经网络"><a class="markdownIt-Anchor" href="#bp神经网络"></a> BP神经网络</h3>
<p>BP是反向传播的简写。是一种可以不断“学习”的神经网络，经过数据的训练后能够完成预测工作。</p>
<h3 id="arma"><a class="markdownIt-Anchor" href="#arma"></a> ARMA</h3>
<p>自回归滑动平均模型（ARMA）是自回归模型（AR）和滑动平均模型（MA）的混合。</p>
<ul>
<li>判断时间序列数据是否平稳，不平稳需要做差分处理</li>
<li>判读合适的模型类型并定阶数（AR模型的偏相关函数PACF会P阶截尾，MA模型的自相关函数ACF会Q阶截尾）同时可以通过AIC和BIC准则来判断模型阶数<a href="https://zhuanlan.zhihu.com/p/464358562">https://zhuanlan.zhihu.com/p/464358562</a>，算出来的AIC和BIC越小越好。</li>
</ul>
<h3 id="灰色预测"><a class="markdownIt-Anchor" href="#灰色预测"></a> 灰色预测</h3>
<p><a href="https://zhuanlan.zhihu.com/p/158592530">https://zhuanlan.zhihu.com/p/158592530</a></p>
<p>针对数量非常少（如4个，建议20个以内），数据完整性和可靠性较低的数据进行有效预测，但是只适合于短期预测，其中GM(1,1)使用最为广泛。</p>
<p>建议结合级比值检验，后验差比检验，模型残差检验进行测试。</p>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>CUMCM</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模国赛注意事项</title>
    <url>/2023/09/06/CUMCM-5/</url>
    <content><![CDATA[<h2 id="基本知识"><a class="markdownIt-Anchor" href="#基本知识"></a> 基本知识</h2>
<p><strong>全国大学生数学建模比赛是所有国内大学生学科竞赛里规模最大的</strong>：含金量高，认可度高，竞争激烈。</p>
<p>竞赛时间：9/7 18:00 ~ 9/10 20:00</p>
<p>9/10 20:00 前需要生成一次 MD5 并选题。9/10 20:00-22:00 之间仍可修改一次 MD5。</p>
<p>一个注意点是在传了MD5之后，不要再对文件进行打开操作，一定要对设了MD5的文件复制一份副本。</p>
<p>注意查重：不要复制粘贴其他文献内容、网络上的内容、题目内容等。</p>
<p>注意不要在论文中和文件名中涉及个人/学校相关信息。</p>
<p>论文电子版中不允许包含承诺书。</p>
<p>不要在论文中出现含水印的图片。</p>
<p>不要把自己的论文放到网上查重。</p>
<h2 id="获奖指南"><a class="markdownIt-Anchor" href="#获奖指南"></a> 获奖指南</h2>
<ul>
<li>思路</li>
<li>分析</li>
<li>界面</li>
</ul>
<h2 id="论文书写"><a class="markdownIt-Anchor" href="#论文书写"></a> 论文书写</h2>
<p><strong>摘要最重要</strong></p>
<ul>
<li>不要求提交纸质版（系统里上传一份+上交给学校一份，都需要是MD5码相同的文件），北京赛区不要求纸质版，如果晋级到国家级会统一打印。</li>
<li>注意电子版从摘要页开始，不包含承诺书。</li>
<li>摘要不需要翻译成英文。</li>
<li>论文页码从摘要页（“1”）开始。</li>
<li>不需要目录。</li>
<li>论文大小不超过20MB。一般大小太大了，压缩一下图片即可。</li>
<li>页数不做强制性要求。一般正文在20页左右，可以多。</li>
<li>正文后为附录内容，页数不限，与正文一同提交。附录部分需要附有<strong>全部</strong>的原始程序（包括用于绘图的程序）（用Excel公式或者别的什么非编程的方式也尽量在附录中展示，相对多一些会更好）。</li>
<li><strong>所有引用他人或公开资料的成果必须按照科技论文规范列出参考文献，并在正文引用处标注</strong>。</li>
<li>支撑材料：可运行源程序、数据资料、赛题要求的结果、较大篇幅中间结果的图表等，压缩包大小不超过20MB，rar或zip格式。尽量一定要提交支撑材料。</li>
<li>论文和支撑材料两个文件的MD5码尽量同时上传同时生成。</li>
<li>具体的书写要求参考试题文件夹中的论文书写要求“format2023”，上文仅作参考，以要求文件为准。</li>
</ul>
<p>美观相关：</p>
<ul>
<li>各级标题区分明显</li>
<li>多一点示意图（思路图、模型算法示意图、结果展示图）</li>
<li>黑箱模型、启发式算法（神经网络、机器学习、遗传算法）不要优先选择，作为保底方法</li>
<li>优缺点分析中，优点多说，缺点酌情</li>
</ul>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>CUMCM</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模2019、20、22题目简析</title>
    <url>/2023/09/06/CUMCM-6/</url>
    <content><![CDATA[<h2 id="2019-cumcm"><a class="markdownIt-Anchor" href="#2019-cumcm"></a> 2019-CUMCM</h2>
<h3 id="2019a-高压油管的压力控制"><a class="markdownIt-Anchor" href="#2019a-高压油管的压力控制"></a> 2019A-高压油管的压力控制</h3>
<p>物理没学好，看不懂，略。</p>
<h3 id="2019b-同心协力策略研究"><a class="markdownIt-Anchor" href="#2019b-同心协力策略研究"></a> 2019B-“同心协力”策略研究</h3>
<p>也是一道物理题，但是是力学。两篇优秀论文中有一篇使用了一个算法为模拟退火，用于辅助求解，主要工作量还是在物理建模和分析。</p>
<p>第一题为理想情况，分三个阶段计算速度加速度和动量守恒能量守恒，联立解微分方程。</p>
<p>第二题在第一题基础上改变了部分条件，首先需要论证由于改变不大，第一问的理想模型依然适用，再计算相应的力矩，考虑对称发力下的鼓的平动和转动列出复杂的方程加以求解即可。</p>
<p>问题三考虑更小的力时问题一的模型无解，需要细化模型，略作更改，考虑碰撞整个过程占时间的情况。</p>
<p>问题四则需要代入具体情况进行计算和求解。</p>
<p>综合来说是一道力学题目，需要推导求解大量力学相关的方程，勉强仍处于所学知识范围内，但考虑到三天时间紧迫和水平有限，不一定适合选择（求解过程出错可能导致严重问题）。题目中部分情况计算较为复杂，需要计算机辅助求解。</p>
<h3 id="2019c-机场的出租车问题"><a class="markdownIt-Anchor" href="#2019c-机场的出租车问题"></a> 2019C-机场的出租车问题</h3>
<p>该问题是需要自行收集数据进行建模的问题。同时需要一定的计算机模拟分析，但是不太需要使用算法。（三篇优秀论文中有一篇使用了蒙特卡洛模拟）</p>
<p>值得注意的是，由于题目并不提供任何数据，要求收集国内“某一”机场（及出租车）的相关数据，因此可以自行决定选择什么机场，这时需要注意，小型机场样本容量小，容错率低，而大型国际化机场交通方式多样，考虑因素过多，分析难度高，因此流量稳定且交通方式相对固定的中型机场是更好的选择（不需要给自己挖坑）</p>
<p>搜集数据之后，需要按照实际情况对数据进行划分，比如凌晨和早晨人流较少，中午下午人流变多，夜间在地铁和机场大巴停运之后乘坐出租车的人流激增，因此需要分开讨论分析。（实际情况下也需要考虑诸如旅游淡季和旺季的客流量差别，实际做题中视情况可以提及但表示由于数据获取限制而只给出思路）（当然，也可以不像这样细致到小时，而是以天为单位进行分析统计）</p>
<p>问题一分析排队等待载客和空载回市区的决策问题，涉及空载浪费时间造成的时间成本，此时进行对比分析时需要考虑两个选项相等时间范围内的收益，在本题中即可得出等待载客的时间成本等于空载回市区后在市区的能够多出来这一段等待载客时间的收益，相对应的，空载的时间成本就是载客回市区的收益，因为不管空载还是载客，回市区的时间是近似的。</p>
<p>对于诸如每小时到达出租车数量和等待时间的关系这样的问题，如果不能直接获取数据，可以使用通过一部分数据进行程序模拟的方式，选取相对合理的参数模拟，获得离散的数据点之后进行拟合，获取关系对应的函数。</p>
<p>当然，在进行具体分析建模之前，最好还是先查找文献，使用一些已有文献内总结的公式，在其基础上进行建模。</p>
<p>特殊问题的建模首先要明确目的，比如这道题的第四问的目标是“使得这些出租车的收益尽量均衡“，那么就可以根据第一问的出租车收益情况，得出不进行短途载客的平均收益后，尝试通过建模额外条件使得短途载客也能拥有一样的（近似的）收益量即可。</p>
<h2 id="2020-cumcm"><a class="markdownIt-Anchor" href="#2020-cumcm"></a> 2020-CUMCM</h2>
<h3 id="2020a-炉温曲线"><a class="markdownIt-Anchor" href="#2020a-炉温曲线"></a> 2020A-炉温曲线</h3>
<p>题目是在一段有多个不同热区间的传送带上计算导热情况的物理题目，对题目进行求解分析需要一定的物理知识，比如热传导方程和牛顿冷却定律，因此实际比赛中应该会酌情跳过此类题目（进行一定的信息检索后也有完成的可能），但其使用的分析方法值得学习。</p>
<p>题目中涉及到了多个线性规划问题，前面首先使用物理方法对问题进行了建模，得到了多个约束方程，后续对于每个问题再分别根据问题限制规模进行求解，规模小时使用二分+遍历方法，或者有限元差分+最小二乘法，规模大时使用模拟退火算法。</p>
<p>其中问题四是一个多目标优化问题，对于这类问题需要将多个指标标准化后取加权平均。A070中的标准化方法为除以最大值。</p>
<h3 id="2020b-穿越沙漠"><a class="markdownIt-Anchor" href="#2020b-穿越沙漠"></a> 2020B-穿越沙漠</h3>
<p>题目是给定地图的情况下，每天有不同天气，对于单人或多人在已知或未知天气时穿越沙漠后剩余资金最多的优化问题，类似动态规划。</p>
<p>对于单人已知天气，直接进行贪心暴力或简单的动态规划即可。单人未知天气情况下，首先假设对于已知各个天气出现概率的情况下，对于不同的决策方案（主要包括直奔终点和绕路去矿山挖矿两种）的数学期望收益，进行比较并得出决策结果，再根据已有数据或某种方法推断各个天气的概率从而进行求解。这之后再通过随机天气的方式对求解结果进行测试，从而进行合理性分析，证明结果正确性。</p>
<p>在多人博弈情况下，可以按照允许交流和不允许交流进行分析，不允许交流时以假设对方完全理性采取最优策略时保证己方存活且最大化己方收益进行分析。允许交流情况下直接计算最优解即可。</p>
<p>多阶段博弈：如果每个阶段都存在一个唯一的纳什均衡点，那么整个多阶段博弈有一个唯一的子博弈精炼均衡。这就是说，我们可以在整个多阶段博弈中，将每一天单独寻找一个独立的纳什均衡方案，连起来就能得到整个多阶段博弈的平衡方案。因此只要对不同情况分类讨论即可。</p>
<h3 id="2020c-中小微企业的信贷决策"><a class="markdownIt-Anchor" href="#2020c-中小微企业的信贷决策"></a> 2020C-中小微企业的信贷决策</h3>
<p>本题目为给定大数据的分析统计题目，给定大量企业的放贷还贷等记录，对数据进行分析后从信贷公司的角度进行建模，对是否放贷进行决策。</p>
<p>这类数据处理题目需要首先对数据进行预处理，包括清洗和补全等。比如说缺失某年到某年的数据，那么就不采用这部分，直接删除。又或者信誉等级为D的公司不予放贷，其数据直接忽略，还有标注为无效（作废）发票的数据因为无效则一样要删除。删除之后需要对于不完整数据进行补全，比如在选定的分析范围内，某公司在某月到某月的信息缺失，则需要按照信息较全的部分对这部分缺失信息进行估计，予以补全。</p>
<p>然后有了完成预处理的信息，使用相关统计学方法进行数据分析，建立相关预测模型。</p>
<p>在一些情况下，尤其是与真实世界某种行为相关的情况下的决策，可以根据已有研究结果来取一些权值参与计算。</p>
<h3 id="2020d-接触式轮廓仪的自动标注"><a class="markdownIt-Anchor" href="#2020d-接触式轮廓仪的自动标注"></a> 2020D-接触式轮廓仪的自动标注</h3>
<p>本题为给定一段散点数据后，根据散点数据对一个工件的轮廓使用线段和圆弧进行建模的题目。主要需要对于给定数据的分类处理，对数据使用回归方法计算得到每一段线段和圆弧的具体参数，人工工作量略大，数学上的分析难度相对较低。</p>
<h3 id="2020e-校园供水系统智能管理"><a class="markdownIt-Anchor" href="#2020e-校园供水系统智能管理"></a> 2020E-校园供水系统智能管理</h3>
<p>本题目是对于多组分类别复杂数据的多元统计分析。先根据不同组的数据做出各组的各类图表，如折线图、直方图等，再由这些图表数据分析异常数据加以记录，作为后续可能的分析切入点。</p>
<p>根据相关能够得到的数据（是否能计算出均值、方差、标准差等等数据）来选取合适的分布检验方式（见概率统计课本，我忘了）如T分布，得到置信区间计算方法，进行计算得到。</p>
<p>使用多元线性回归模型进行分析，定义相应的回归方程和回归系数的显著性检验方式。回归效果不理想可能是因为部分异常点数据，因此要将异常情况的点剔除。</p>
<p>一些预测问题可以采用神经网络进行相关预测，但注意神经网络预测的前提是需要大量数据进行训练。</p>
<p>此类题目的分析需要大量统计学知识，不建议选择该类题目。</p>
<h2 id="2022-cumcm"><a class="markdownIt-Anchor" href="#2022-cumcm"></a> 2022-CUMCM</h2>
<h3 id="2022a-波浪能装置输出功率优化设计"><a class="markdownIt-Anchor" href="#2022a-波浪能装置输出功率优化设计"></a> 2022A-波浪能装置输出功率优化设计</h3>
<p>和力学具有强关联性，大概率跳过的题目，先略。</p>
<h3 id="2022b-无人机遂行编队飞行中的纯方位无源定位"><a class="markdownIt-Anchor" href="#2022b-无人机遂行编队飞行中的纯方位无源定位"></a> 2022B-无人机遂行编队飞行中的纯方位无源定位</h3>
<p>主要是一个几何问题。可以通过几何方式或计算几何</p>
<p>无人机定位问题，问题1(1)使用简单几何分类讨论即可。类似的，问题1(2)使用几何方法也能求解，可以在提出相应算法之后使用计算机模拟生成数据进行仿真测试，验证算法效果。（因为算法本身除了数学上证明正确性，也需要实际验证，因此可以使用计算机模拟制造相应的误差环境从而进行仿真测试）</p>
<p>可能用到启发式搜索或决策树，但不一定需要，因为本题仅仅要求完成定位，能够保证定位的有效性即可，并没有要求定位的效率或者较低传输次数，这里假定如果为了这些实际可能会更有用的内容做了优化的话会更好，那么可以考虑做，但理论上也可以只给出一种能够达成效果的方案即可。</p>
<p>这道题需要注意读题，第一题第二问中提到了略有偏差，可以将其量化为小于某一度数的偏差值，从而引申出根据收到的信号角度判断发信无人机编号定位的计算方法，进而得出只需要额外一架无人机就能定位的结果。</p>
<h3 id="2022c-古代玻璃制品的成分分析与鉴别"><a class="markdownIt-Anchor" href="#2022c-古代玻璃制品的成分分析与鉴别"></a> 2022C-古代玻璃制品的成分分析与鉴别</h3>
<p>本题是一道统计学题目。需要对数据进行处理后使用统计相关聚类算法进行分析预测。</p>
<p>数据分析首先要根据题目要求剔除无效数据。然后由于数据总和各自存在偏差，因此需要进行标准化，让每组数据成分总和为1。</p>
<p>由于这组数据满足总和为1的特征，其所处的向量空间为单形空间，而传统的统计学分析方法假设各组数据独立。此处需要查阅文献等，进而可以获知需要对数据进行一定的变换才能进行统计学处理。C155采用了中心对数比（ALR）处理，使得数据的可解释性更强。</p>
<p>对于文物的各个不同性质，采用卡方检验分析其相关性。</p>
<p>对统计量的描述使用变异系数、偏度系数、峰度系数等。列出数据后可以根据计算结果对数据表达出的倾向性进行分析描述。</p>
<p>箱线图可以反映多组连续型数据分布的散度范围以及中心位置。</p>
<p>进行聚类分析时可以直接进行Q型聚类，也可以先用R型聚类再用Q型聚类。聚类完成后，在本题中四类具有风化程度递增的趋势，因此可以对每一类内求均值后检验四类的同一维度是否存在单调变化趋势（使用了二次函数回归预测），并将拟合优度较低的维度予以剔除，后续预测时不考虑。</p>
<p>像这样拟合得到函数曲线之后，将其平移使得与需要预测的数据某一点重合后计算其余时序对应曲线上点的值即可得出预测结果。由于前述内容加入了中心对数比变换，因此需要进行逆变换才能得到最终结果。</p>
<p>对化学物质的不同成分之间的关联关系分析，可以采用灰色关联分析或一些其他分析方法。</p>
]]></content>
      <categories>
        <category>数模</category>
      </categories>
      <tags>
        <tag>CUMCM</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>编译后端笔记-图着色法-1</title>
    <url>/2023/07/11/Compiler-Notes-1/</url>
    <content><![CDATA[<h2 id="图着色法-细节"><a class="markdownIt-Anchor" href="#图着色法-细节"></a> 图着色法-细节</h2>
<h3 id="函数活跃寄存器计算"><a class="markdownIt-Anchor" href="#函数活跃寄存器计算"></a> 函数活跃寄存器计算</h3>
<p>这部分内容简单来说，就是对每个函数计算其各个基本块的活跃出入寄存器，也就是进入和离开基本块时，需要保持活跃（其值有意义/有用）的寄存器。</p>
<p>首先，我们遍历每个基本块，先计算其内部的依赖关系。简便起见use，我们倒序遍历基本块内的指令，并维护两个集合：def 和 live_use，分别代表“该基本块中新定义了的寄存器”与“该基本块中未定义但使用了其值的寄存器”，注意这里定义实际上指的是重新赋值。然后，在遍历过程中，对每一条指令，如果该指令为寄存器赋值（即对于该指令的 dst 寄存器），则该寄存器在当前位置一定是新定义了的，一定不是未定义但使用的，就从 live_use 中移除，向 def 加入。类似的，如果该指令使用了某寄存器值（即对于该指令的 src 寄存器），则该寄存器在当前位置一定是未定义但被使用，一定不是新定义的，从 def 中移除，向 live_use 中加入。注意到有的指令可能有寄存器同时在 def 和 src 中，由于我们是倒序遍历，因此应该按上述叙述顺序判断并处理。</p>
<p>这时，容易注意到所有的 live_use 都是满足我们对 live_in 要求的寄存器，因此赋值 live_in = live_use，但是这里的 live_in 还不全，需要后续处理。</p>
<p>为了处理 live_out，即计算哪些基本块新定义的寄存器是后续需要被使用到的寄存器，我们定义一个队列，存储基本块到寄存器的使用关系，每个 std::pair 代表某个块新定义了某个寄存器。我们将所有当前基本块 live_use 的寄存器和该块一起推入队列。</p>
<p>然后我们遍历队列，每次取队列头元素，获取当前块和当前块使用（但未定义）的某个寄存器，对于该块的所有前继基本块，如果前继的 live_out 中没有当前这个寄存器，则将其加入。这里需要判断一件事——有可能该寄存器也不是这个块定义的，如果不是，则需要将这个前继块和该寄存器再次推入队列，并为这个块的 live_in 记录下这个寄存器。</p>
<h3 id="建图"><a class="markdownIt-Anchor" href="#建图"></a> 建图</h3>
<p>在计算了各个基本块的出入活跃寄存器后，就可以开始建图了。我们使用邻接表存图，具体来说，使用如下的数据结构存储：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">char</span>&gt; appeared;</span><br><span class="line">std::vector&lt;std::set&lt;<span class="type">int</span>&gt;&gt; edges;</span><br></pre></td></tr></table></figure>
<p>两个动态数组的大小都是寄存器最大值。其中前者是一个记录某寄存器值是否出现在本函数中的布尔值数组，由于一些 C++ 特性，使用 char 类型。后者则是用于存边的，其内层是记录某寄存器和哪个寄存器有连边的集合，使用集合是为了保证不重复处理。</p>
<p>建图过程中，由于前面我们已经计算了基本块之间的活跃关系，现在我们只需要遍历每一个基本块，处理块内的寄存器活跃关系并连边即可。</p>
<p>在遍历每个基本块时，我们记录一个动态数组 live，存储“当前”的活跃寄存器，因为我们是对所有指令倒序遍历的，因此该数组的初始值为 live_out，即基本块结束时仍需要活跃的寄存器。</p>
<p>首先，基本块结束时所有的需要活跃的寄存器一定是互斥的（互相冲突的，不能存储在相同寄存器中的，后同），因此首先需要对它们两两连边。因此我们设置一个空的动态数组 tmp，将所有的 live 中的寄存器推入。</p>
<p>其次，我们需要将最后一条语句中的 dst 寄存器也推入 tmp 中，保证它和其他 live_out 的寄存器的互斥关系，原因后面解释。</p>
<p>这时，tmp 中就存下了所有“在基本块结束时”互斥的寄存器，我们对其中的寄存器两两加边即可（注：图是无向图，所有的加边都是双向边）。</p>
<p>然后就可以开始倒序遍历每条指令了。我们在遍历过程中不断维护 live 数组，具体来说，每当倒序遍历到一条新指令，这条指令如果对某寄存器进行了修改（即对于指令的 dst 寄存器来说），则该 dst 寄存器就不再 live，从 live 中移除。反之，如果使用了某寄存器的值（即对于指令的 src 寄存器来说），则此时（和从此时开始一直往前到该寄存器被定义，即被作为 dst）的这个 src 寄存器，就是活跃的，也就是说其值需要被保留，和其他所有的活跃寄存器互斥，将 src 和所有的 live 中寄存器连边，并将 src 推入 live 即可。</p>
<p>这样一来，我们就处理好了所有的 src 寄存器之间的互斥关系，但是还需要处理 dst 和 src 之间的互斥关系。注意到：同语句的 src 和 dst 是不互斥的，因为比如 add s0, s0, s1 这种操作（即只要后续不再使用 src 的原值，则完全可以使用相同的 src 和 dst，在人工写汇编时也会常常这么做以实现 += 等效果）但是每一条语句的 dst 和这之后的所有 src （准确来说是所有活跃寄存器）是互斥的，这很容易理解，比如下列语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addi %1, %2, 100 // 1</span><br><span class="line">mul %5, %3, %4 // 2</span><br><span class="line">mul %2, %1, %1 // 3</span><br></pre></td></tr></table></figure>
<p>语句 2 中的 %5 和 %1 应当是互斥的，因为后面还需要用到 %1 的值，如果给 %1 和 %5 分配相同的寄存器，则后续语句 3 时使用 %1 时就得不到正确的值了，因为在语句 2 处被修改了。因此我们对上一句的 dst 寄存器和当前的所有 live 中的寄存器加边，保证其互斥。这里很容易发现，由于这样只能处理到第一条到倒数第二条语句的 dst，因为是对每条语句的“上一条”进行处理，因此最后一条语句的 dst 就没被处理，这也是前述处理最后一条语句 dst 的原因。</p>
<p>最后，在每条指令开始遍历时新建一个空数组，将所有的当前的新活跃寄存器和上条语句的 dst 一同推入数组，并对数组中的元素两两建边即可。</p>
]]></content>
      <categories>
        <category>PL</category>
      </categories>
      <tags>
        <tag>PL</tag>
        <tag>编译</tag>
        <tag>编译后端</tag>
      </tags>
  </entry>
  <entry>
    <title>华灯</title>
    <url>/2021/01/28/HanayakanaToboshi/</url>
    <content><![CDATA[<p>​	夕阳跨过分割天地之线逐渐将远方的大地染红，天空的碧蓝色也随之褪去，换上属于夜的黝黑。就在这晨昏交替之时，青石板路末端的城墙内，一盏盏金黄色的明灯陆续亮起。起初，似是为点缀这夜的宽幕；但随着灯火越来越多，偌大的夜空也从主角变成了陪衬。终而，华灯璀璨让这夜间的城闪耀，散发出独属于今日——元宵之夜的辉煌。</p>
<p>​	而顺着城外联通四面八方的青石板路走来的女孩，雯，也总能被这份唯独在今日显得无比动人的人间烟火味而深深触动。</p>
<p>​	尽管雯是一名一年才回到这家乡所在的旅行者，但这份感动大概并非源于游子的思乡情，而是一种在喧嚣人间的归属感、幸福感，一种她也未能言明的，只有置身于这些爆发着喜怒哀乐的人群之间才能体会到的特殊的感觉。</p>
<p>​	“站住，元宵之夜，城外人没有许可均不得入城。”仅有两名护卫看守的城门口的阑珊倒是与城内的繁华形成了强烈对比。雯翻出身后半人高的背囊，取出了一小张对折的纸片。</p>
<p>​	“这是通行证。”护卫展开纸片，看了看在点点水渍旁闪着金属光泽的金色笔迹，便面带震惊之色而急匆匆命人打开了侧门。“请、请进。”</p>
<p>​	雯收起纸片，步入城内。一切仍与记忆中没什么两样。一条整齐的石板路贯穿半个城，即使宽大到足以令两辆马车并排通行，也被络绎不绝的人流几乎完全占据。华灯之下，正是人们喧嚣所在。售卖各色明灯的吆喝声最为响亮，而那些被冠以各类神话传说之名之貌的明灯又往往能吸引到最多小孩子的目光，进而爆发出阵阵更响亮的喊声。杂于灯市间的便是各类小食小酒与一些平日也能见到，现在却张灯结彩更显繁盛的店铺了。</p>
<p>​	雯的目光在店铺间游离，不知为何，最终聚焦在了一位身着青色长袍的少年身上。“传说这天地之间，有这么一条忘川之河，这河水，能让失去记忆的人恢复记忆，但让其他人尝来，却只会品出苦涩……”恰巧，坐在桌前的少年正要开启一段新的故事，雯也就不由自主地，忘了原来的目的，随意寻了一处座椅，就这么听了起来。</p>
<p>​	事实上最开始吸引雯的是少年尚显青涩的嗓音。雯并非没见过说书人，但少年这般年纪的雯还是第一次见。因而听着抚尺与木质桌面的拍击声同这嗓音一同出现时，雯起初感到有些怪异，但却渐渐沉溺在了这种怪异构成的特殊风格的故事之中。</p>
<p>​	少年的故事由一位失去记忆的男性在女孩子的房间苏醒开始，以突兀起头，在故事起落中逐渐向不明真相的听者揭开故事一层又一层神秘的面纱……少年时而摇头晃脑，时而正襟危坐，时而扮男，时而扮女。或有故事有趣之处配上少年滑稽的表情，引起一片哄堂大笑；或到悲伤至极之处，少年语气如游丝，微弱却坚韧不曾断绝，声泪俱下，让听众也情不自禁，泪流满面。而雯，在这当中，更不例外。</p>
<p>​	事实上，雯也是初次体会到像是这次听书一般悲喜交加之感。以往有听书，多半是一位花白胡子的老头，叙说着某位侠客或情郎，于妖怪丛中持一剑斩过，或于酒楼风月处来往，诸如此类，听者不是孩童群聚喊声遍地，便是一群人泛着同一种似坏非坏的笑，却使雯不能理解，而听不多久后便会起身离去。雯之所爱，大多在于各地或富饶或贫瘠的山水云霞，在晴雨与四季变换之间不同的风景。她深深敬仰与喜爱着大自然的万千造物在气候变化之间所呈现的或缤纷绚丽、或广袤深邃的景象，因而选择了成为一名四处游历的旅行者。但如今，就在这个当下，她却沉醉于这段婉转的爱情故事当中，不可自拔。</p>
<p>​	醒木声响，少年鞠一躬后便隐于幕后，只留观众以泪洗面。而眼角还挂着泪珠的雯，也没来得及向少年询问故事真正的结局。那名为红的少女丢失了什么记忆？二人是否又会身份交换而再度上演这个故事？那桐归又……雯未曾多想，径直冲向了面前临时搭建的戏台幕后。她看到几名盛装打扮的戏子正预备登台，而从他们华丽头饰的缝隙间，恰好能看见一袭青衫正向另一个方向远去。</p>
<p>​	雯毫不犹豫地追了过去。</p>
<hr />
<p>​	少年与雯并肩行在华灯遍布的大街上，偶尔一同向一侧避开，不约而同地说着“不好意思”。见到舞狮的人们顺着街道走来，又一同停下，目不转睛地观赏着那焰火般的鬃毛在五光十色间轻盈起舞，而都没注意到挡住了一旁行人的去路……二人一边在元宵之夜尽享灯火繁华，一边尽兴畅谈着许多有趣的话题。</p>
<p>​	“你听过西边森林间溪流的声音吗？前、后、左、右到处都是好几人高的大树，即使是夏天的正午在树林里也感受不到刺眼的阳光，林间只有无数的虫鸣鸟叫，加上自己身畔擦过树叶的沙沙声；而到了溪流处，才能看到树林被分割为两半，中间显露出的是阳光映照下的流水，咕咚咕咚的声音完全取代了林中的虫鸟之声，那种声音的转换实在是太妙了！还有北边冰原高大的冰山……”</p>
<p>​	向来习惯了在独行中寡言少语的雯，此刻却变得无比健谈。而在她纷乱地叙说了许许多多她游历各处的见闻之后，才意识到自己好像说的有点多，脸蛋便“扑”地红了起来。“呃，那，你最喜欢的是什么呢？”甚至问出了一句没头没问的话。</p>
<p>​	“我吗？”少年微笑了一下，“我最喜欢的……”</p>
<p>​	忽然，雯面前的一个灯笼突然燃起了火焰，完全吸引走了雯的注意力。等她回神再看时，少年早已不在她身边。她四处张望，却既看不见燃烧的灯笼，也看不见少年那一袭青衫。四处的人流依然在不停歇地流动，却似乎与她完全无关。</p>
<p>​	“……”雯想要出声呼唤少年，却突然发现，自己对少年的名字一无所知。少年从何而来？今年多大？是不是城里人？雯努力在脑中搜寻，却找不到一丝一毫和少年相关的内容，最清晰的一幕只有被泪染花了的，少年说书的样子。</p>
<p>​	睁眼。</p>
<p>​	是一场梦。</p>
<p>​	雯喘着气，还没完全从刚刚迷茫与失落夹杂的情感中恢复。雯所处的是一处客栈的单间，是她每次回到这城时惯常居住的房间，一角还摆放着老板娘为她特地准备的一株鸢尾花。东侧窗外的蓝天已经渐渐泛起红色，而冷静下来的雯，也从梦境中逐渐回到了现实。</p>
<p>​	雯在昨夜从戏台后拔腿狂奔，尽力避开人流的同时利用她那在野外练就的耐力追逐着前方那若隐若现的一袭青衫。中途似乎撞到了些人，回头时却看不见，她也就没在意。但转过某个转角后，当繁华的灯市早已被她甩在身后，青衫却也已寻觅不到。目之所及只有一处并不很长的死胡同，侧面是紧闭着的房门。雯最终还是追丢了。</p>
<p>​	雯本不想就此放弃，但尝试过她所知道的所有方式后，房门依旧没有任何反应，亦没有任何动静。不过好在这段路刚好与她去常住的客栈的路相同，甚至客栈就在街对面的位置。于是她用尽了办法后，只得收拾思绪，走向了对面的客栈。</p>
<p>​	注视着冉冉升起的太阳，雯却忽然想到，她为何要如此执着于一位说书的少年？是她身为旅行者的求知欲吗？或许是少年的故事深深吸引了她？雯想着，却又觉得并非如此。回忆在少年的故事中游荡，最终停在了她刚刚的梦境之中。少年和她快乐地畅谈，二人举手投足似有默契一般如出一辙……雯的脸上，不知何时染上了一抹绯红的微笑，却没察觉到，她和少年在梦中讨论的主题并非那故事。雯，早已在那少年说书的举手投足间，生发出了从未体会过的情感。少年像元宵之夜的华灯，在那个美妙的夜晚深深地吸引着她，又在夜晚过去时悄然离去。</p>
<hr />
<p>​	少年叫霖。</p>
<p>​	这座城，并非霖出生之地，却是他自幼长大的地方。</p>
<p>​	霖并非生于说书世家，更非出生便掌握说书才能。作为在郊外被发现的无名遗孤，霖能做什么，完全取决于收养他的好心人愿意教他什么。可惜的是，他们虽愿意，却并没什么才能，更因高龄早早离开了人世。所幸霖得到机会跟随一位老说书人，继承他的才能。起初霖也仅仅只了解那些侠客从无名小卒到横扫八方，或情郎逛遍四方风花雪月的老故事，因为这个卑微的行当实在是没什么新鲜血液注入，老一辈更懒得去了解新的故事，只把那些受欢迎的好故事一遍又一遍讲授着，因为总有爱听的观众。</p>
<p>​	但霖并不喜欢这些故事。老说书人的家里有不少藏书，有能说的，也有因不是故事而被遗弃一旁的，霖一概不管，在逐渐成长的几年中统统阅过一遍。极南处阴风肆虐无人探索的石原，历史上这城里经历过的朝代更迭，元宵华灯在数代之间的传承与发展……虽然因篇幅限制，各本书对于某方面的知识都浅尝辄止，它们却极大程度地开阔了霖的视野，让霖认识到了，这世上除去侠客情郎之外的缤纷多彩。</p>
<p>​	于是霖开始将这些东西加工成故事搬上说书的木桌。设计一位探险者，去无人知晓的地方探险；讲讲那三千年前的城主，如何在抵御蛮夷中逐步修起高耸的城墙；将目光聚焦到一位手工艺匠人身上，看他这一代怎么开创了印着故事的灯笼……霖在深夜点烛，苦思冥想，在草纸上记载着一个个有意思的思路，创造着一幕幕精彩的画面，同时幻想着当他把这些向那些孩子、老人们叙说的时候，他们眼中所冒出的，对未知的好奇。</p>
<p>​	可惜，这世道总是事与愿违。</p>
<p>​	当他真的将这些故事向他的听众叙说时，即使他的表情再生动，演绎再活灵活现，也总有几人指指点点。虽不至于对每个女性角色都要求来一段特殊剧情，但总有些人希望把某一段再改得“激烈”一点；虽不至于每个困难都要爆发一种酷炫的能力拿来作秀，但总有些人觉得这段“看得不爽”。久而久之，霖也发现，他的这些故事若不加点那些老一辈们“吸引人的东西”，便不可能又叫好又叫座。</p>
<p>​	霖也因而逐渐学会了修改他那些或志怪或叙古的故事。向这里添段情，向那里再添段打……霖发现，自己逐渐学会创造的“符合听众品味的新故事”，正越来越接近那些老一辈们书写的东西。</p>
<p>​	但他不想再落入这个桎梏。</p>
<p>​	霖并没有放弃。他在一段爱情故事中添入他所喜爱的人物形象，以故事走向与人物形象来表达感情之外的意义；他让原本的侠客不再只有单薄的所谓“正义”支撑，为他塑造一个背景，一段无论如何逼迫他走下去的过往，一个既与他对着干有存有些许温情的世界……随着老说书人的过世，霖也真正意义上，写出了属于自己的故事。</p>
<p>​	他在戏台子上持一块醒木演出，经年累月练就的功底让他只需一段大纲便能上演一段异彩纷呈的“戏”，甚至也学会了不少模仿雨雪风霜与花草虫鱼声音的口技。他上演着一出又一出爱情故事，博得越来越多人的喜爱。</p>
<p>​	但他从未向往过爱情。</p>
<hr />
<p>​	雯的脸上还布着些许泪痕，因在奔跑中被风吹拂而顺着一侧划出一道长长的痕迹。昨晚的泪水中倒映着雯所喜爱的万家灯火，与万家灯火下的少年，尽皆随着晚风吹拂而烟消云散。</p>
<p>​	“我想留在这城里。”雯坐在楼下的木桌旁，抬眼刚好与老板娘的目光相会。</p>
<p>​	“嗯？有心念的男孩了？”</p>
<p>​	雯没想到，老板娘竟能如此一针见血，羞得低下了头。“是……是。”</p>
<p>​	“哈哈哈哈……没事，没事，谁以前还不是个小姑娘似的。”所幸客栈现在没什么人，老板娘的爽朗笑声在四壁间回荡，也冲散了雯心中的一部分紧张。</p>
<p>​	“但你过活，也得有一份工作吧？好几年了，我可没见你在我这赊过账。”宽厚的大手将大碗的小米稀饭与咸菜、馒头放上餐桌，简朴的餐食散发着浓浓的热乎气儿。</p>
<p>​	“嗯。”雯点了点头，便开始狼吞虎咽起面前的早餐。毕竟昨晚一路走进城，到现在为止她还没吃上过一顿饭。</p>
<p>​	“慢点慢点，不够还有。”老板娘见状，也带着微笑走了回去。</p>
<p>​	不过，的确不能意气用事。雯倒没什么确切的职业，但有许多城里的有钱人花钱请她或记载、或绘制各处野外的风景图画，也有时候她会受邀为一些马车队等带路穿过庞大的森林或沙漠——毕竟她很清楚何处危险何处安全。这一切都需要她长年累月在野外与不同城市间徘徊探索，而停在一座城里——那份寂寞她自己也忍受不住。</p>
<p>​	下定决心之后，雯又看了看街对面紧闭着的红门，收拾好行囊，付过账，便告别了老板娘。</p>
<p>​	虽说经过城门之时几滴泪珠依旧不争气地流了下来。</p>
<hr />
<p>​	霖早已在笔下与书中见过诸多爱情，或长、或短、或纷繁、或简单。大部分是为了云雨之欢，也有些是男女主人公相互的依恋促就。时至今日，霖已学会了如何将一个人物塑造得讨人喜欢，或如何合适恰当地安排两个人之间的恋爱，让听众深受感动又高呼过瘾。但霖从未向往过他故事中的任何一段爱情。或者说，他对爱情本身抱有的是一种厌恶的情绪。</p>
<p>​	也许是未曾见过真正两情相悦的梦幻般的爱情，也许是被太多情欢的故事先入为主，也许是对故事中男男女女恋情往往悲伤的结局触动，也许只是对两性关系的误解……但无论如何，霖从未尝试过喜欢任何人，也从未被任何女生喜欢过。</p>
<p>​	也，从未像那个元宵之夜一样，让一位女性在他心中留下那么深刻的印象。</p>
<p>​	霖如往常一般开始他的说书，也注意到了那个少女的存在。少女面庞清秀，看着像当地人。她一头青丝扎成精练的单马尾，却似乎因为风尘仆仆而沾了不少灰尘，而她的面色更不像是这个年纪女孩子应有的，由闺房之间培养出来的朴实与一尘不染，更像是在他故事中的四方世界游历出来的久经历练。</p>
<p>​	大概霖也没注意到他想了这么多，如往常一般开始了他的叙说。醒木一拍，声音一振，满座爆出预料之中的大笑声，他的目光却停滞在了少女身上。她也在笑，但笑的更有些放荡与无所遮拦，又因想要尽力掩盖而颇显可爱。待到悲情之时，便更不似一般女孩。她能哭得自然，哭得一塌糊涂，又能在剧情转折时破涕为笑，双眼直与霖对视，好像是两人有默契地相视而笑一般。</p>
<p>​	不知不觉间，少女的身影与笑颜似乎逐渐刻印在了霖的脑海中，霖也很清楚，自己或许是喜欢上了那个少女。他想现在就下场去请少女一起游览这元宵夜的绝美景色，想给少女讲述那不加修饰的四方美景与历史变迁，想和少女一起……但霖不敢。霖从书中获取的故事告诉他，他并不了解少女。他可能会直接遭到拒绝，更可能会与少女最终走向爱情的悲剧。霖对爱情的态度，正转变到对自己心底这份对少女的一见钟情之上。</p>
<p>​	霖草草鞠了个躬，走下台，便赶忙跑开。他想远离那处戏台，远离那位少女，远离少女可能带来的无数悲剧。霖穿过人流，向着家中跑去。他似乎感受到少女正向他狂奔而来。霖躲进曾属于老说书人的胡同中的小家，锁上了门。他将自己用被子裹起来，尝试与外界隔绝。他感觉在梦中听见了属于少女的呼唤，那少女似乎就在他家门口敲门。</p>
<p>​	这是幻觉。霖愈加感到自己已经深深陷入这之中无法自拔，甚至能够凭空想象出敲门声来迷惑自己落入深渊。</p>
<p>​	“心如止水心如止水心如止水……”</p>
<p>​	默念着某个成语，霖强迫自己入睡，不再去想这些东西。</p>
<hr />
<p>​	城门之外依旧是如惯常那般的荒芜，无垠的沙地从脚下蔓延，延伸到视野的尽头，虽然与昨日的华灯共享着那名为“黄”的颜色，却显得平凡了太多。雯的双足在青石板路上向来时的方向缓步前进，脑中却逐渐浮现出了适才告别时老板娘的话。</p>
<p>​	“那个男孩，不管你现在怎么考虑，一定要见一面，道一声再见也好，下决心在一起也好，至少是你认真对待过后作出的选择。你们呀，有时候总爱意气用事，心里定了这个就容不得那个，过了半晌又改变看法。有时候做选择，还是要多看看，多想想，想够了，心里也不至于再后悔。毕竟有的事情，错过了，就是一辈子的事。”</p>
<p>​	有的事情，错过了，就是一辈子的事。</p>
<p>​	老板娘的最后一句话在雯的脑海中回荡。明年，也许在华灯下就不再能见到那个少年，明年，或许她也因故不再能回到这里。谁又知道会如何？毕竟一年时间什么都可能发生。想着、想着，老板娘的话语，元宵之夜的华灯与少年的长衫渐渐融合，雯没注意到的眼角，也落下了一滴泪水。</p>
<p>​	但现在，还不至于错过。</p>
<p>​	雯立即转身，用比刚刚快得多的速度，拔腿冲回了那座城。</p>
<hr />
<p>​	稍晚些的清晨，习惯于晚起的霖刚刚收拾好自己，走出空荡荡的“家”。脑中还有些纷乱，但似乎比昨天的状态要好些。至少没有出现什么幻觉，他这么想着。</p>
<p>​	但就在他这么想着之时，视野的一角处，那少女的身影又似乎闪现了一瞬，又消失了。他揉了揉眼睛，确认没再出现这种幻觉后，便走向了家对面的客栈——那里是他每天解决早饭，甚至一日三餐的地方。</p>
<p>​	今天的客栈人不多。准确来说，现在这个时间只有霖一个人——元宵夜大家都回家了，这也正常。霖点了与平常无异的早餐，一碗豆浆，一根油条，一个煮鸡蛋。很快，老板娘就将其端上了桌。</p>
<p>​	“嗯……昨天晚上我过去的时候没看见你啊，怎么眼圈还这么黑呢？”</p>
<p>​	“诶……”</p>
<p>​	“有什么事？</p>
<p>​	“是这样的……”霖一边吃着早饭，一边将昨晚他的玄妙经历娓娓道来。他看着老板娘的脸上先是露出迷惑的表情，又逐渐转化为微笑，直到他讲完后，老板娘的脸上已经写满了“原来如此”。尽管这让霖更加迷惑了。</p>
<p>​	“总之，你去一趟城门吧，现在应该还赶得上。也许，对你解决这‘幻觉’有所助益。”</p>
<p>​	虽然很迷惑，但霖照做了——老板娘的提议不多，但总很有用。</p>
<hr />
<p>​	城门。</p>
<p>​	一边是刚刚在守卫疑惑的目光下进城的少女。</p>
<p>​	一边是急忙跑来城门，一路都没再看见幻觉的少年。</p>
<p>​	所有动作仿佛都停滞了。四只眼睛相对，两人面面相觑，颇有些尴尬。</p>
<p>​	少女感到了从失落到惊喜在一瞬间的转换，差点以为自己也看到了幻觉。</p>
<p>​	少年在一瞬间明白了，从来都没有什么幻觉，只是他自己不愿面对。</p>
<p>​	“我是霖” “我是雯”两道声音几乎同时发出，相互重合在一起。</p>
<p>​	“虽然有些突兀，但你愿意和我一起周游世界，在不同的地方说书吗”</p>
<p>​	“虽然有些突然，但你愿意带着说书的我，无论去到哪里吗”</p>
<p>​	又是两道重叠在一起的声音。</p>
<p>​	双方都没听清，但双方都已听清。</p>
<p>​	在城门口，少年和少女，霖，和雯，相拥在了一起。让本想提醒他们让路的入城人，也呆住在原地，数秒后露出恍然大悟的微笑。</p>
<p>​	等两人松开手，周围已经围了一圈人，站在雯正对面的正是客栈的老板娘。而两人的脸上，也立刻泛起了层层绯红的波浪。群众却丝毫不在意这些，纷纷送出着祝福。</p>
<hr />
<p>​	雯再次走出了城门。不再迷惘，不再后悔。更，不再有对华灯的那份眷恋与期待——因为华灯已经常伴于她的身旁。</p>
<p>​	两人并肩，共行向那未知的远方。</p>
]]></content>
      <categories>
        <category>Nothing_don_t_look</category>
      </categories>
      <tags>
        <tag>Nothing</tag>
      </tags>
  </entry>
  <entry>
    <title>GAParts Essay Note</title>
    <url>/2023/07/05/GAParts-Essay-Note/</url>
    <content><![CDATA[<h2 id="pointgroup"><a class="markdownIt-Anchor" href="#pointgroup"></a> PointGroup</h2>
<p><img src="https://file.notion.so/f/s/137612d2-0f12-409f-9aed-41f834dba168/Untitled.png?id=16fc1a99-6642-4096-9202-6f9950433f8f&amp;table=block&amp;spaceId=a4f9675e-1c40-43c1-8a0d-04d994814cf0&amp;expirationTimestamp=1688637600000&amp;signature=1hHO-l7iJqN4ITLhp7jzp2elJDPKRqy16dNtt1U5S5c&amp;downloadName=Untitled.png" alt="Untitled" /></p>
<h3 id="backbone-network"><a class="markdownIt-Anchor" href="#backbone-network"></a> Backbone Network</h3>
<p>场景以点云的形式输入进网络，每个点包括三维坐标和三维颜色信息。</p>
<p>网络形式是一个U-Net（先对点体素化后，使用稀疏卷积SC和submanifold稀疏卷积SSC进行，得到的结果再从体素化生成回点值形式（Submanifold sparse convolutional networks, 2019）），通过网络后，每个点被提取出K维特征。</p>
<h3 id="clustering"><a class="markdownIt-Anchor" href="#clustering"></a> Clustering</h3>
<p>然后再从这K维特征中得到两样东西，（通过一个MLP得到）用于语义分割的一维标签S（同一类的标签值相同）和（通过同类点求位置的均值得到）用于预测目标中心位置的三维向量o（offset），指示对于该点，其所属的分割类的中心的方向。</p>
<p>由于这种分类让每个点按类聚在一起，就可以根据点聚类之间的空位距离对点进行聚类。</p>
<p>由于这种offset不总准确，论文将原位置p采得一个聚类结果，再由加上offset的新位置q采得一个聚类结果，将两个结果取并集，输入到ScoreNet中</p>
<h3 id="score-net"><a class="markdownIt-Anchor" href="#score-net"></a> Score Net</h3>
<p><img src="https://file.notion.so/f/s/16d54e66-b9dd-4151-8d98-911b5f7cde28/Untitled.png?id=abf52d35-dd50-4038-a2cf-9ecf64c09f2e&amp;table=block&amp;spaceId=a4f9675e-1c40-43c1-8a0d-04d994814cf0&amp;expirationTimestamp=1688637600000&amp;signature=2Z-VtfRYILtiwq7K4ISo8q4OPvJwrxFGO5pOiXUv13k&amp;downloadName=Untitled.png" alt="Untitled" /></p>
<p>对于每个聚类，该聚类i的Ni个点先前提取的K维特征信息构成Ni<em>K维聚类特征，位置构成Ni</em>3维位置特征，和之前类似的方法体素化（每个体素特征求平均）后输入SC和SSC的较小U-Net进一步提取特征后经过max-pooling得到一个聚类特征，进而输入MLP后经过Sigmoid函数得到最终分数Si</p>
<p>最后用先前的聚类信息和得到的分数信息输入NMS输出最终聚类信息。</p>
<h2 id="grl-gradient-reversal-layer"><a class="markdownIt-Anchor" href="#grl-gradient-reversal-layer"></a> GRL (<em><strong>*Gradient Reversal Layer)*</strong></em></h2>
<p><img src="https://file.notion.so/f/s/9574a97d-7b95-4aa2-86eb-7811b3f951d9/v2-ebe7d65b70355baed5ca478173fe0695_r.jpg?id=4d40546b-f3ac-47d2-a43e-37c819d75624&amp;table=block&amp;spaceId=a4f9675e-1c40-43c1-8a0d-04d994814cf0&amp;expirationTimestamp=1688637600000&amp;signature=SHmsYNLKJeJMveQWwixUuNvUyxOEeonKI1qITfD9X3w&amp;downloadName=v2-ebe7d65b70355baed5ca478173fe0695_r.jpg" alt="v2-ebe7d65b70355baed5ca478173fe0695_r.jpg" /></p>
<h3 id="grl层"><a class="markdownIt-Anchor" href="#grl层"></a> GRL层</h3>
<p>梯度下降是最小化目标函数，而GRL这一层的目的是“向负方向梯度上升”，其实就是最大化目标函数。</p>
<h3 id="模型说明"><a class="markdownIt-Anchor" href="#模型说明"></a> 模型说明</h3>
<p>上图绿色部分是特征提取，对应GAParts就是那个Sparse U-Net，提取特征F用的</p>
<p>蓝色部分是处理分类任务用的，对应GAParts就是后续的聚类和score模块等</p>
<p>粉色部分就是重点的domain classifier，是一个域分类器，本质上是一个判别器。</p>
<h3 id="grl和domain-classifier的意义"><a class="markdownIt-Anchor" href="#grl和domain-classifier的意义"></a> GRL和domain classifier的意义</h3>
<p>在训练中，绿色部分和粉色部分构成了一种类似GAN的结构，绿色部分作为生成器，粉色部分作为判别器，目标是让生成出来的feature趋于域自适应（域分类器尝试将feature进行分类，如果这种分类越来越难以进行，说明提取出来的feature就是共通的feature，也就趋向于域自适应了）</p>
<h2 id="gaparts中的domain-invariant-feature-learning"><a class="markdownIt-Anchor" href="#gaparts中的domain-invariant-feature-learning"></a> GAParts中的Domain-invariant Feature Learning</h2>
<p>总共提出了三种方法，均是对于domain-classifier的改进，用于使模型更加适应不同类型，能准确提取不同物体的特征。</p>
<h3 id="part-oriented-feature-query"><a class="markdownIt-Anchor" href="#part-oriented-feature-query"></a> Part-oriented Feature Query</h3>
<p>由于GAParts是对Parts的分类，因此实际上做分类器是对点向不同的结果label（即parts/clusters的编号i）分类。因此采用对于分数大于某阈值s的所有parts，计算分类器对其的loss再求均值的方法</p>
<h3 id="multi-resolution"><a class="markdownIt-Anchor" href="#multi-resolution"></a> Multi-Resolution</h3>
<p>由于部件大小不一，为了能适应多种大小，向Domain Classifier输入的feature来自三个不同大小的U-Net层，最后loss取加权总和。这样能让网络适应不同大小的部件。</p>
<h3 id="distribution-balancing"><a class="markdownIt-Anchor" href="#distribution-balancing"></a> Distribution-Balancing</h3>
<p>为了能使训练中对于不同类型不同种类的Parts训练成果比较均匀，采用了一种均匀分布的方法，具体来说是对前述Part-oriented Feature Query在求均值前加了一个权重，对于准确率更高的部分，los计算的就更小一些，同时对于域分布量更大的计算的更小一些。</p>
]]></content>
      <categories>
        <category>VR</category>
      </categories>
      <tags>
        <tag>VR</tag>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>寄存器分配笔记1</title>
    <url>/2023/07/09/LLVM-Reg-Alloc-1/</url>
    <content><![CDATA[<p>有无限多个虚拟寄存器——对应实际CPU中有有限个寄存器。</p>
<p>寄存器分配前后分别会有两次指令调度</p>
<p>常见的寄存器分配算法：</p>
<ul>
<li>PBQ</li>
<li>Greedy 运行时间短</li>
<li>Basic 编译快</li>
<li>Fast 编译快</li>
</ul>
<p>整体流程：</p>
<p>生命周期分析——权重计算——构造优先队列——分配寄存器——弹出无法分配的寄存器</p>
<h2 id="生命周期分析"><a class="markdownIt-Anchor" href="#生命周期分析"></a> 生命周期分析</h2>
<p>可以写成单独的 Pass，是计算每个寄存器的使用生命周期。</p>
<p>所谓生命周期就是一个寄存器从一次定义到下一次定义前的最后一次使用的周期，如下示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BB1:</span><br><span class="line">%<span class="number">1</span> = <span class="number">23</span>; <span class="comment">// 01</span></span><br><span class="line">%<span class="number">2</span> = %<span class="number">1</span> + <span class="number">2</span>; <span class="comment">// 02</span></span><br><span class="line"><span class="keyword">goto</span> BB2; <span class="comment">// 03</span></span><br><span class="line"></span><br><span class="line">BB2:</span><br><span class="line">... <span class="comment">// 04 - 12</span></span><br><span class="line">%<span class="number">3</span> = %<span class="number">1</span> + <span class="number">1</span>; <span class="comment">// 12</span></span><br><span class="line"><span class="keyword">goto</span> BB3; <span class="comment">// 13</span></span><br><span class="line"></span><br><span class="line">BB3:</span><br><span class="line"><span class="comment">// 14 - 21</span></span><br><span class="line">%<span class="number">4</span> = %<span class="number">3</span> + %<span class="number">2</span>; <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">return</span>; <span class="comment">// 23</span></span><br></pre></td></tr></table></figure>
<p>每条语句之后的注释标注了其对应的语句编号，则各个变量生命周期如下：</p>
<p>%1 生命周期从 01 开始，在 BB1 中到 02 结束，在 BB2 中到 12 结束。</p>
<p>%2 生命周期从 02 开始，在 BB1 中到 02 结束，在 BB3 中到 22 结束。</p>
<p>%3 生命周期从 12 开始，在 BB2 中到 12 结束，在 BB3 中到 22 结束。</p>
<p>（生命周期包括：如果单基本块则从定义到最后一次使用，如果跨基本块则在定义基本块中从定义到基本块结束，在其他使用基本块中从开头到最后一次使用）</p>
<h2 id="权重计算"><a class="markdownIt-Anchor" href="#权重计算"></a> 权重计算</h2>
<p>计算一个寄存器的<strong>重要程度</strong>，代表它获得寄存器分配的重要权重高低。</p>
<p>简单的方法包括：如果在一个常用循环中使用则权重高，如果寄存器相关访问少或简单则权重低。生命周期越长，权重越低。</p>
<p>分配权重：</p>
<p>如果只在一个基本块使用，权重低。</p>
<p>在多个基本块都要使用，权重高。</p>
<p>以<strong>分配权重</strong>大小设优先队列，将各个寄存器入队。</p>
<h2 id="寄存器分配"><a class="markdownIt-Anchor" href="#寄存器分配"></a> 寄存器分配</h2>
<p>从优先队列依次取寄存器，分配到物理寄存器。</p>
<p>分配时参考生命周期冲突，如果没有生命周期冲突则可以共用寄存器。</p>
<p>每次取寄存器后，如果和当前所有物理寄存器分配的寄存器生命周期都有冲突，则比较前述重要权重（不是分配权重），如果更高则替换掉现有分配的寄存器。</p>
<p>如果更低，则考虑能否进行拆分，即将生命周期拆分到多个不同的寄存器上，如第一段时4号寄存器空闲，第二段时5号寄存器空闲，则通过第一段分给4号，第二段分给5号，第二段开头插入一个move指令将4号的值复制给5号实现。如果这种拆分有益于速度，则执行拆分。</p>
<p>实际LLVM操作中不会拆分后直接插入，而是先计算合适的拆分位置，然后进行拆分，拆分后将原有的寄存器拆分为两个不同的寄存器重新放入优先队列，再按前述规则进行出队和插入等操作。</p>
<h2 id="spill-通过内存周转"><a class="markdownIt-Anchor" href="#spill-通过内存周转"></a> Spill （通过内存周转）</h2>
<p>将不参与计算时的指令部分加入load/store指令，从而拆分成两个生命周期更短的寄存器，再尝试进行插入。</p>
<h2 id="局限性"><a class="markdownIt-Anchor" href="#局限性"></a> 局限性</h2>
<p>上述LLVM的Greedy分配方法主要关注点在于用最少的物理寄存器来进行分配，这样可以尽可能减少寄存器溢出，但是会有局限性——如果在寄存器足够的情况下，用极可能多的寄存器能够提升并行度，从而提高速度（e.g. 流水线中如果有寄存器依赖可能会降低速度）</p>
<p>Register Allocatiion for Compressed ISAs in LLVM</p>
]]></content>
      <categories>
        <category>PL</category>
      </categories>
      <tags>
        <tag>PL</tag>
        <tag>编译</tag>
        <tag>编译后端</tag>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Challenge Lab5</title>
    <url>/2023/07/05/OS-Challenge-Lab5/</url>
    <content><![CDATA[<p>实现了 MOS 操作系统对于 FAT16 磁盘的支持，支持长文件名的读写（不支持 ASCII 以外的 UNICODE 字符），支持有少量限制的读写其他操作系统读写过的 FAT16 磁盘。</p>
<h2 id="思路综述"><a class="markdownIt-Anchor" href="#思路综述"></a> 思路综述</h2>
<p>核心思路主要是在读明白 FAT 规格书的基础上，重写 fs/fs.c 为 fs/fatfs.c，采用了相对较简单的套用原有代码思路的方法，对照着原来 fs/fs.c 的各个函数逐个实现（一部分函数因不需要而被删除，另一部分被替代），对于构造不同的地方通过封装操作函数进行处理，如此操作后，保证新函数和原有函数效果相同，再根据原有的函数，创建新的 fs/fatserv.c (fs/serv.c) user/lib/fatfile.c (user/lib/file.c) user/lib/fatipc.c (user/lib/fsipc.c) 即可。对于一个适当实现的情况，后续几个文件应当只需要进行一些简单修改即可适配。</p>
<p>最大的难点在于：</p>
<ul>
<li>通读并理解全英文的 FAT 规格书（笔者在实际理解中搭配了部分 CSDN 博客与实际实践）</li>
<li>在操作中正确读取和处理 FatBPB 中的信息，正确维护 FAT 表，管理内存映射</li>
</ul>
<p>本实现基于原有的文件系统，新增了 FAT 文件系统进程，恒为 2 号进程（即第三个被启动的进程，原文件系统仍保持为第二个被启动的进程即 1 号进程）。修改了 Makefile 文件以实现创建并挂载 FAT16 格式磁盘在 DISKNO = 1 的磁盘位。</p>
<p>使用时，操作与原文件系统相同。由于考虑到实际各个文件系统均为不同磁盘的根目录，设置为 /root1 /root2 稍有不合理之处，因此改用了以下调用方式：</p>
<ul>
<li>打开文件、创建文件和删除文件需要调用 FAT 文件系统的函数 fat_open()、fat_create() 和 fat_remove()。前两者和原有的 open() 和 remove() 操作相同，唯一区别在于传入路径应为 FAT 磁盘中的绝对路径。创建文件除了文件在 FAT 磁盘的绝对路径外，还需要给出两个参数，分别对应在 FAT 文件系统下的文件参数 attr 和以字节为单位的文件大小 size。文件类型是目录还是文件取决于传入的参数 attr。如果是目录，size 不能小于两个目录项的长度即 64，创建时也会自动生成目录内的 “.” 和 “…” 两个目录项。</li>
<li>其余不需要传入路径，而是使用文件描述符进行的操作使用原函数如 read()、readn()、write()、close() 等即可。因为使用的是同一套文件描述符，因此这些操作函数是相同的，在 fd.c 中会自动调用 FAT 所需的各个读写或关闭的函数。文件在对目录有更新（如改变大小或删除）或关闭时会自动刷新缓冲区到磁盘，保证下一次启动 MOS 能够正常读取，或使用 mcopy 和 mdir 能正常读取。</li>
</ul>
<p>下面将根据 FAT 磁盘的构造简析实现思路：</p>
<h3 id="fat-磁盘构造说明"><a class="markdownIt-Anchor" href="#fat-磁盘构造说明"></a> FAT 磁盘构造说明</h3>
<h4 id="fatbpb"><a class="markdownIt-Anchor" href="#fatbpb"></a> FatBPB</h4>
<p>这是存储在 FAT 磁盘第一个扇区的最前一块区域的，用于存储磁盘基础信息的块，需要在初始化时读入，后续各种处理也需要根据 FatBPB 中的各种信息来完成。</p>
<p>笔者在实现中定义了一个按字节对齐的结构体，根据 FatBPB 在磁盘中的信息排布定义了相关变量，根据不同变量的大小分别将其定义为 8、16、32位的无符号整型变量或数组。</p>
<p>整个 FatBPB 包含大量内容，都有在规格书中定义，不再赘述，只举例指出几个与文件处理重点相关的变量：</p>
<ul>
<li>BPB_BytsPerSec 16 位，代表磁盘扇区大小</li>
<li>BPB_SecPerClus 8 位，代表每簇包含扇区数量</li>
<li>BPB_RootEntCnt 16 位，代表根目录包含的 32 字节目录项数量</li>
<li>BPB_RsvdSecCnt 16 位，代表保留区的大小，保留区的开始部分是 FatBPB</li>
</ul>
<p>这些变量决定了后续我们从哪里开始读磁盘的各个区域，因此需要初始化后保存。我们将其读入后存储在 fs/fatfs.c 的一个结构体变量中，供各个处理函数操作使用。</p>
<h4 id="fat-表"><a class="markdownIt-Anchor" href="#fat-表"></a> FAT 表</h4>
<p>磁盘中，紧接着保留区后面的是若干个 FAT 表。在 FAT16 中，FAT 表由许多个 16 位的 FAT 表项组成，每个表项对应了一个簇。表项值为 0x0 时代表该簇为空，为 2 以上总簇数以内的数时代表下一个簇的簇号，为 0xFFFF 时代表该簇是文件/目录的结尾簇。</p>
<p>FAT 表的前两项用作特殊用途保留，因此簇号从 2 开始编号，表项中对应的“下一个簇簇号”也只能出现大于等于 2 的数。由于 FAT 表项的位数限制，FAT16 所支持的最大簇数也是有限的。</p>
<p>实现中，笔者将 FAT 表项称为 fat_entry，封装了获取簇号对应的表项值和写入表项值的两个函数。实际进行访问时都要通过这两个函数来操作 FAT 表。</p>
<p>在此之上，笔者封装了申请一个空簇并清空为 0，申请若干个簇（只操作并修改 FAT 表项），将某个簇号开始的一串簇向后扩展若干个簇大小，将某个簇号开始的一串簇从后往前缩减若干个簇，释放从某簇开始的所有簇这几个函数，用于后续各个文件操作函数进行调用。</p>
<p>由于实际 FAT 磁盘中是多个 FAT 表互相作为备份，因此每次读写 FAT 表项时，也会同步的检查所有的 FAT 表是否具有相同的内容，并保证向所有 FAT 表写入相同的内容。</p>
<h4 id="根目录"><a class="markdownIt-Anchor" href="#根目录"></a> 根目录</h4>
<p>磁盘内在 FAT 表后就是根目录部分。按照 FAT 目录项依次存储了根目录下存放的各个文件或目录对应的目录项。在笔者的实现中，由于 FAT16 的根目录并不和簇一同管理，而是单独一片区域存储，因此在文件系统中也独立出来一段虚拟内存空间进行映射。笔者在初始化时选择直接将根目录下的内容读入内存，以方便文件的访问。</p>
<h4 id="数据区"><a class="markdownIt-Anchor" href="#数据区"></a> 数据区</h4>
<p>在根目录后的就是磁盘存储所有数据的地方。每个 FAT 目录项（如果这个文件/目录有大小）都指定了该文件/目录对应的存储空间的开始的第一个簇号，可以根据 FAT 表查找到该文件/目录对应的所有簇的簇号，并实现依次读取。</p>
<p>具体来说，FAT 规格书提供了公式用于从簇号计算对应磁盘中的开始位置，用以进行磁盘访问。在访问到某文件时，先由 FAT 表得到文件对应的簇号，再访问对应磁盘位置，读入到内存中的对应映射位置即可。这样也避免了如 MOS 文件系统中多级映射带来的 indirect 块的申请与释放问题，某种程度上简化了文件访问操作。</p>
<h3 id="链表管理的内存映射"><a class="markdownIt-Anchor" href="#链表管理的内存映射"></a> 链表管理的内存映射</h3>
<p>与 MOS 的原文件系统类似的是，FAT 文件系统也采用文件系统进程的一段内存来将挂载的硬盘中我们需要读取的文件映射到内存中。但是与 MOS 不同的是，由于不希望挂载的硬盘大小受限，FAT 文件系统不采用将整个硬盘空间一一映射到内存的方式，而是采用动态分配制，即通过对一段用于映射的内存空间的管理，实现动态的开辟用于映射磁盘的内存。</p>
<p>具体来说，FAT 文件系统中，维护了一个双向链表 fat_spaces[]，用于记录已开辟的空间与空闲空间情况。链表元素 struct FatSpace 存储了一段内存的初始地址 st_va，大小 size，所分配给的簇 clus（未分配时设0，由于 FAT 磁盘的簇号必须从 2 开始，因此这么设置是安全的）以及前后链表元素的指针 nxt 和 prev。</p>
<p>同时设置了两个链表元素 fat_space_head 和 fat_space_tail 分别作为头和尾。这两个元素不存储信息，仅仅用于标识头尾。这两个元素应仅供内存映射部分内部使用，头元素除了 nxt 指针的部分和尾元素除了 prev 指针的部分都不被访问或使用。</p>
<p>通过内存初始地址 st_va 设为 0 来代表一个链表元素未使用，可供分配。</p>
<h3 id="长文件名系统"><a class="markdownIt-Anchor" href="#长文件名系统"></a> 长文件名系统</h3>
<p>FAT 中有一个选择实现的长文件名系统，笔者实现了对其读写的支持。具体来说，对于原本的 FAT 目录项，其规定的文件名存储格式要求文件名（“.”之前的部分）不超过 8 个字符，后缀名（“.”之后的部分）不超过 3 个字符，且只能使用纯大写字母（会丢失文件名的大小写性）和十几个规定好的特殊字符（包括“$%'-_@~`!(){}^#&amp;”，不包括引号），因此对文件名限制较为严格。为了支持现代的复杂文件名，提供了通过在目录项之前多放若干个目录项用于存储更长的文件名的方式，具体来说，一个新增的长文件名存储专用的目录项和原目录项大小相同，包括验证部分和保留部分，剩余部分总计能存储 13 个 Unicode 字符，最多有 31 个这样的目录项连在一起表示一个长文件名，因此大大拓宽（支持 Unicode）和增长（提供更长的支持长度）了文件名的功能，以至于现代操作系统对于一些文件为了保存文件名大小写信息即使能装进 8+3 的范围也要使用长文件名存储。</p>
<p>显然，这种动态方式占用空间也比最大支持 128 字符，但是每个目录项需要 256 字节的 File 控制块能更显著的节省磁盘空间。</p>
<p>因此笔者在文件系统中增设了数个用于处理文件名的函数，支持原名到多个长文件名块的正向编码，也支持传入一个开始块（第一个长文件名目录项或唯一一个短文件名目录项）后输出文件名（自动忽略短文件名目录项中多余的位置并自动决策添加或不添加“.”）的操作，供后续处理函数进行处理。</p>
<h3 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h3>
<h4 id="能够打开和关闭文件读取和写入数据到已打开文件所使用的某个簇"><a class="markdownIt-Anchor" href="#能够打开和关闭文件读取和写入数据到已打开文件所使用的某个簇"></a> 能够打开和关闭文件，读取和写入数据到已打开文件所使用的某个簇</h4>
<p>调用 user/lib/fatfile.c 中的 fat_open() 函数打开 FAT 文件系统中的文件。模仿原文件系统，笔者在 fatfs.c 中创建了 fat_dir_lookup() 和 fat_walk_path() 等函数，使用类似的操作实现了在 FAT 文件系统中进行按文件名的文件查找。需要注意的是，由于存在长文件名系统，笔者将读取长短文件名封装为了一个函数 fat_get_full_name()，传入开始的一个目录项（长文件名则为第一个长文件名目录项，短文件名则为那个短文件名目录项），根据 FAT 文件系统的规则，向下读取得到目录项对应的全名，并去除短文件名表示中多余的空位，在合适的位置添加点。</p>
<p>读取和写入方面，前文已经提到过使用链表管理内存映射。FAT 文件系统中，采用以簇为单位的文件映射，即一个文件如果有簇要被使用，则会从前述的链表中调度一段相应的内存空间用于映射该簇，因此内存空间开辟都是以一个簇的大小为单位（不固定，取决于读取到的 BPB 中的簇的大小）。</p>
<p>由于这种映射方式下，同一个文件的各个簇在内存中既不是连续在一起的，也不是一定占用一页的，原有的按一页一页进行映射的方式就不完全适用于 FAT 文件系统。因此，笔者将读写时的页映射从以页大小为单位改为以簇大小为单位，即映射到用户空间时，如果一个簇大小有不足一页的部分，会将整个页分配给这个簇用于映射，下个簇再新开页进行映射。如此，能够动态的适应簇的不同大小。为了实现这种修改，笔者略微修改了 FAT 文件系统在用户库中用于读取和写入的函数，以实现对每一页，只读写簇占用的部分。</p>
<h4 id="支持调整文件大小"><a class="markdownIt-Anchor" href="#支持调整文件大小"></a> 支持调整文件大小</h4>
<p>在实现了对于 FAT 表的操作后，对文件大小的调整只需要调用相关 FAT 表函数即可，由于已经封装好了动态的增大或减小的函数，直接调用，再更新目录项中的文件大小的值即可。</p>
<p>需要注意的是，由于 FAT 使用簇为单位进行空间分配，在修改大小前如果发现修改前后的文件大小占用的簇数相等，便不再修改，仅对文件目录项存储的文件大小的值进行修改。</p>
<h4 id="支持删除文件"><a class="markdownIt-Anchor" href="#支持删除文件"></a> 支持删除文件</h4>
<p>类似的，删除文件也只需要调用相关的 FAT 表函数即可，传入该文件对应的第一个簇号，就会自动的将 FAT 表中各个簇的 FAT 表项清零。需要注意的是，这里删除文件和前述调整大小均只改变 FAT 表项，簇内的内容会在新申请空间时清零，不会在此时修改，以此降低磁盘损耗，提高整体速度。</p>
<h4 id="支持刷新缓冲区"><a class="markdownIt-Anchor" href="#支持刷新缓冲区"></a> 支持刷新缓冲区</h4>
<p>笔者按照原文件系统的函数方法实现了相同效果的 dirty 和 flush 相关函数，具体来说，可以将一个文件对应的所有簇设为脏的，调用 flush 时会检查所有为脏的簇并写回磁盘。</p>
<p>同时新增了一个 flush 函数的参数 force，用于指定无论是否为脏都强制写回这个簇，用于目录项的更新。因为原文件系统中只有 close 一个文件时会设脏，同时目录也不会被 close，为了简便起见的实现文件的删除、调整大小和新建都能在磁盘中存储，加入了 force，在对目录项进行这些修改后会将其强制写回磁盘。</p>
<h4 id="支持新建文件夹"><a class="markdownIt-Anchor" href="#支持新建文件夹"></a> 支持新建文件夹</h4>
<p>为了支持新建文件/文件夹，首先需要支持对一段若干长度的目录项的申请，用于长文件名的存储。为此，笔者加入了 fat_dir_alloc_files() 函数，能够在一个目录下申请指定数目的连续的空目录项并返回对应的指针。</p>
<p>由于 FAT 文件系统对于短名目录项的文件名的特殊要求，加入了 encode_char() 函数，将字符编码为仅包含大写字母和指定字符的短文件名格式。加入了 encode_short_name() 函数，为指定的短文件名目录项指针写入相对应的合规格的文件名。加入了 encode_long_name() 函数，为一段连续的长文件名目录项指针写入对应的文件名。由于 C 语言的限制，目前该 FAT 文件系统仅支持 ASCII 文件名，但会按照 Unicode 方式存储，保证其他系统也能正常读取。</p>
<p>此外，在创建文件时，FAT 还会维护文件相关的各个时间信息，这在笔者的系统中通过封装在 user/lib/time.c 的函数实现，后文会详述。该文件通过访问系统的 RTC 时钟得到 UTC 时间，+8h 得到 CST 时间后在文件系统中进行存储，并调用 FAT 表项操作函数进行空间的申请，同时按照短文件名的设置好的文件名生成 FAT 要求的 checksum 存储到每个长文件名目录项中。</p>
<p>如果通过参数判断得到新建的是文件夹，则会根据 FAT 规格要求，在文件夹的簇内新建两个分别对应当前目录和父目录的目录项，名为 “.” 和 “…”。</p>
<h3 id="运行测试"><a class="markdownIt-Anchor" href="#运行测试"></a> 运行测试</h3>
<p>在根目录下调用 make test lab=5_chlg &amp;&amp; make run 即可运行挑战性任务的测试，测试了原 lab5_4 lab5_5 的测试点内容，并添加了能够读取到多个簇的长文件的创建和读写测试，以及文件夹的创建测试。</p>
<p>没有输出任何 panic 和 assert 信息即为测试通过。</p>
<h2 id="代码架构"><a class="markdownIt-Anchor" href="#代码架构"></a> 代码架构</h2>
<h3 id="新增文件总览"><a class="markdownIt-Anchor" href="#新增文件总览"></a> 新增文件总览</h3>
<ul>
<li>fs 文件夹下有 fatfs.c fatserv.c fatserv.h</li>
<li>user/include 下有 fatfs.h</li>
<li>user/lib 下有 time.c fatfile.c fatipc.c</li>
</ul>
<p>后文主要叙述一些区别于原有文件系统，为了增加相关功能支持而新加入的函数。而如 fatfs.c fatserv.c fatfile.c fatipc.c 均为参照原文件系统中文件 fs.c serv.c file.c fsipc.c 的各个函数功能，进行简单修改得到，笔者在代码书写中进行的原创部分均有在前文“具体实现”中提到，便不再详述。</p>
<h3 id="utils-基础支持部分"><a class="markdownIt-Anchor" href="#utils-基础支持部分"></a> Utils （基础支持部分）</h3>
<p>该部分列举一些在实现 FAT 文件系统中不与 FAT 文件处理直接相关的，但是为了更方便处理封装成函数的内容。</p>
<h4 id="userlibtimec"><a class="markdownIt-Anchor" href="#userlibtimec"></a> user/lib/time.c</h4>
<p>本文件从 lab5-1-exam中复制得到，并进行了改动和增量。</p>
<p>原有的 get_time() 函数被保留，仍用于获取系统 RTC 时钟中的当前时间，返回值精确到秒，传入指针对应 us 变量是微秒级别的偏移。</p>
<p>新增 get_all_time() 函数以及其中用于判断闰年的函数 is_leap_year()，其中 get_all_time() 用于将单位为秒的当前时间转化为 UTC 时间下的年月日时分秒格式，存储在传入的六个整型指针之中，方便存储文件创建与更改信息用。</p>
<p>新增 get_fat_time() 函数，将前述获取到的年月日时分秒信息编码为 FAT 中存储日期、时间等的具体格式。</p>
<p>新增两个用于打印 FAT 中编码的日期和时间信息的函数，用于调试。</p>
<h3 id="相关定义"><a class="markdownIt-Anchor" href="#相关定义"></a> 相关定义</h3>
<p>该部分主要列举在头文件中定义的各种结构体与宏定义相关信息。</p>
<h4 id="struct-fatbpb"><a class="markdownIt-Anchor" href="#struct-fatbpb"></a> struct FATBPB</h4>
<p>如前，用于读取和存储 FAT 磁盘开头的 BPB 块信息，由于需要依靠指针的强制类型转换进行读取，需要添加参数使其按字节对齐。按照 FAT 中对 BPB 的定义进行各个参数的大小和名字定义。</p>
<p>文件系统中会定义一个该变量，在文件系统初始化时相关信息从磁盘中复制得到。</p>
<h4 id="struct-fatdisk"><a class="markdownIt-Anchor" href="#struct-fatdisk"></a> struct FATDISK</h4>
<p>由于 FatBPB 中只定义了一些基础信息，更多的信息需要通过多个 FatBPB 中的内容计算得到，比如单个簇的字节数就需要 FatBPB.BPB_BytsPerSec * FatBPB.BPB_SecPerClus 得到，在代码书写中过稍显冗余，因此定义了一个结构体 FatDisk，用于存储一些常用变量，将在初始化时读入 FatBPB 后根据其值计算得到，同样存储在 fs/fatfs.c 的一个结构体变量中。</p>
<p>FatDisk 结构体包括如下变量，均存储为 32 位整型：</p>
<ul>
<li>RootDirSectors 根目录所包含的扇区数量</li>
<li>FATSz 一个 FAT 表占用的扇区数量</li>
<li>TotSec 磁盘总扇区数量</li>
<li>DataSec 磁盘数据区（存各个簇的部分）包含扇区数量</li>
<li>CountofClusters 磁盘数据区簇数</li>
<li>FirstRootDirSecNum 根目录第一个扇区的扇区编号</li>
<li>BytsPerClus 一个簇包含的字节数</li>
</ul>
<h4 id="struct-fatdirent"><a class="markdownIt-Anchor" href="#struct-fatdirent"></a> struct FATDIRENT</h4>
<p>是 FAT directory entry 的简写，代表 FAT 的目录项。各个参数定义和大小与 FAT 中对常规目录项的定义相同，记录了一个目录的各种信息。</p>
<p>用于从目录中读取目录包含的内容信息，类似于 MOS 原本文件系统中的 struct File 结构体，在各种传参时会用到。</p>
<h4 id="struct-fatlongname"><a class="markdownIt-Anchor" href="#struct-fatlongname"></a> struct FATLONGNAME</h4>
<p>作为 FAT 中存储目录项的长文件名的附加目录项结构体存在，各个参数定义和大小与 FAT 中对长文件名目录项的定义相同，用于记录和某个目录项对应的长文件名（也可能是目录名）。</p>
<p>虽然 FAT 规格中按 UNICODE 存储，但由于复杂性问题，存名字的部分按 char 为单位进行存储，也暂时仅支持 UNICODE 中 ASCII 部分（但是和其他系统兼容）。</p>
<p>用于从目录中读取附加的长文件名信息。</p>
<h4 id="struct-fatspace"><a class="markdownIt-Anchor" href="#struct-fatspace"></a> struct FatSpace</h4>
<p>作为文件系统中进行内存映射所使用的专用双向链表的链表元素，一个元素代表在 FAT 文件系统中用于映射的一段内存，记录了开始地址、长度和所属的簇号，内存以簇为单位进行分配，记录的簇号为零时代表这段内存是未使用的。</p>
<h4 id="e_fat_"><a class="markdownIt-Anchor" href="#e_fat_"></a> E_FAT_*</h4>
<p>记录了 FAT 文件系统中一些出现的错误情况，从 1000 开始编号，以方便与其他错误号进行区分，各个错误号具体含义如下：</p>
<p>// TODO</p>
<h4 id="fat_attr_"><a class="markdownIt-Anchor" href="#fat_attr_"></a> FAT_ATTR_*</h4>
<p>记录了 FAT 规定的在目录项中的 Attr 部分的各个存储值含义，包括只读、隐藏、系统、容量id、目录、Archive、长文件名目录项。</p>
<h4 id="fat_last_long_entry"><a class="markdownIt-Anchor" href="#fat_last_long_entry"></a> FAT_LAST_LONG_ENTRY</h4>
<p>FAT 的长文件名目录项中，第一个字节存储了 Ord，即该目录项在对应的所有长文件名目录项中的次序，以倒序排列。而存储在最前的一个长文件名目录项的该字节会额外按位或一个 0x40，即该宏定义对应的值，用于标注该项是第一个。</p>
<h4 id="fat_max_"><a class="markdownIt-Anchor" href="#fat_max_"></a> FAT_MAX_*</h4>
<p>有四项，分别记录了当前文件系统支持的最大簇大小（以字节为单位），当前文件系统记录空间的链表存储的链表元素最大数目，根目录最大扇区数以及根目录最大字节数。</p>
<h4 id="fatva"><a class="markdownIt-Anchor" href="#fatva"></a> FATVA*</h4>
<p>包括三项，分别代表在 FAT 文件系统进程中用于映射读取的 FAT 磁盘文件的这部分内存的虚拟地址的下界、上界和范围大小（分别为 FATVAMAX，FATVAMIN，FATROOTVA）。</p>
<h4 id="fatrootva"><a class="markdownIt-Anchor" href="#fatrootva"></a> FATROOTVA</h4>
<p>代表在 FAT 文件系统进程中用于映射根目录的部分内存空间的起始地址，实现中被定义为FATVAMAX + 0x1000。</p>
<h3 id="内存映射"><a class="markdownIt-Anchor" href="#内存映射"></a> 内存映射</h3>
<p>该部分主要管理内存映射空间的分配和回收。</p>
<h4 id="alloc_fat_spacest_va-size-clus"><a class="markdownIt-Anchor" href="#alloc_fat_spacest_va-size-clus"></a> alloc_fat_space(st_va, size, clus)</h4>
<p>当需要新建一个链表元素时，调用该函数，在所有链表元素中找到一个未使用的元素，并将其三个值设置为传入参数对应的值，并返回该元素的指针。</p>
<p>该函数不负责维护链表向前和向后的指针，需要调用后由其他部分维护。</p>
<p>该函数是一个内存映射管理函数内部使用的函数，不应当在内存映射部分之外的地方调用。</p>
<h4 id="insert_head_fat_space_listst_va-size-clus"><a class="markdownIt-Anchor" href="#insert_head_fat_space_listst_va-size-clus"></a> insert_head_fat_space_list(st_va, size, clus)</h4>
<p>该函数的作用是向链表头插入一个元素。</p>
<p>先调用 alloc_fat_space() 获取一个元素并设置好信息，再将其插入到链表头的后面，总共要重设四项内容。</p>
<p>该函数仅用于内部处理，不应当被内存映射部分之外的部分调用。</p>
<h4 id="remove_fat_space_listfsp"><a class="markdownIt-Anchor" href="#remove_fat_space_listfsp"></a> remove_fat_space_list(fsp)</h4>
<p>将一个元素 fsp 从链表移除。仅设置其前后两项的指针，不释放该元素（即保持其 st_va 为有值，不允许其被 alloc_fat_space() 取到）。</p>
<p>该函数仅用于内部处理，不应当被内存映射部分之外的部分调用。</p>
<h4 id="insert_spacest_va-size"><a class="markdownIt-Anchor" href="#insert_spacest_va-size"></a> insert_space(st_va, size)</h4>
<p>插入一段空闲空间，从 st_va 开始，大小为 size。</p>
<p>首先遍历寻找在该空间之前且与该空间相邻的空闲空间元素 fspace，如果有，则调用 remove_fat_space_list() 将其移除，递归调用 insert_space() 插入这两段空闲空间之和的空间后，将 fspace 释放（设 st_va 为 0）并返回。</p>
<p>再遍历寻找在该空间之后且与该空间相邻的空闲空间元素 fspace，如果有，则调用 remove_fat_space_list() 将其移除，递归调用 insert_space() 插入这两段空闲空间之和的空间后，将 fspace 释放（设 st_va 为 0）并返回。</p>
<p>如果上述两个查找完都没有，代表当前空间已经是可以融合的最大空闲空间，则调用 insert_head_fat_space_list() 将该空闲空间对应的元素插入链表。</p>
<h4 id="is_clus_mappedclus-va"><a class="markdownIt-Anchor" href="#is_clus_mappedclus-va"></a> is_clus_mapped(clus, va)</h4>
<p>有两个用途，首先用于检查簇号为 clus 的簇是否被映射到内存，如果是，返回 1，否则返回 0。检查方式是遍历整个链表查找。</p>
<p>其次用于获取簇号为 clus 的簇被映射到的虚拟地址 va。如果传入的指针 va 不为零，则将其对应的值赋值为对应的虚拟地址。</p>
<h4 id="get_clus_space_infoclus"><a class="markdownIt-Anchor" href="#get_clus_space_infoclus"></a> get_clus_space_info(clus)</h4>
<p>用于在链表中查找簇号为 clus 的簇对应的链表元素，并返回其指针，我们默认调用这个函数都应该在 clus 已经被映射时调用。用于获取一些相关信息。</p>
<h4 id="free_clusclus"><a class="markdownIt-Anchor" href="#free_clusclus"></a> free_clus(clus)</h4>
<p>用于将簇号为 clus 的簇映射的空间释放。</p>
<p>如果 clus 未映射，会报错。</p>
<p>如果未找到，会返回 -E_FAT_NOT_FOUND。</p>
<p>正常找到会返回 0。</p>
<h4 id="debug_print_fspace"><a class="markdownIt-Anchor" href="#debug_print_fspace"></a> debug_print_fspace()</h4>
<p>用于调试。输出所有链表中的元素及其信息。</p>
<h4 id="alloc_fat_file_spaceclus-bysize-va"><a class="markdownIt-Anchor" href="#alloc_fat_file_spaceclus-bysize-va"></a> alloc_fat_file_space(clus, bysize, va)</h4>
<p>为簇号为 clus 的簇开辟一个链表元素，即开辟一段空间用于映射该簇，bysize 是需要开辟的大小，在实际使用中只会设置为一个簇的大小。</p>
<p>如果指针 va 非零，其对应的值会被设为映射到的内存的初始地址。</p>
<p>如果这段空间已满，返回 -E_FAT_VA_FULL。</p>
<h4 id="fat_space_init"><a class="markdownIt-Anchor" href="#fat_space_init"></a> fat_space_init()</h4>
<p>用于内存映射部分的初始化。</p>
<p>将所有元素的 st_va 设为 0。</p>
<p>将头的下一项设为尾，尾的上一项设为头。</p>
<p>插入一个从 FATVAMIN 到 FATVAMAX 的链表元素，代表整个用于映射的空间都是空的。</p>
<h3 id="簇管理"><a class="markdownIt-Anchor" href="#簇管理"></a> 簇管理</h3>
<p>簇管理部分主要封装了对簇进行读写的函数和簇号检测的函数。</p>
<h4 id="is_bad_clusterclus"><a class="markdownIt-Anchor" href="#is_bad_clusterclus"></a> is_bad_cluster(clus)</h4>
<p>检测簇号 clus 是否合法，即大于等于 2 且小于等于最大簇数，如果不合法则返回 1，否则返回 0。</p>
<h4 id="read_disk_fat_clusterclus-buf"><a class="markdownIt-Anchor" href="#read_disk_fat_clusterclus-buf"></a> read_disk_fat_cluster(clus, buf)</h4>
<p>将磁盘中簇号为 clus 的簇中的内容读取到内存空间中 buf 开始的一段内存中，不检查内存空间是否合法，会检测簇号的合法性，以及检测簇对应的 FAT 表项是否标记为空（代表簇空闲），如果簇号不合法，返回 -E_FAT_BAD_CLUSTER，如果簇被标记为空，返回 -E_FAT_ACCESS_FREE_CLUS。</p>
<p>合法情况下，调用 ide_read 读取磁盘，并返回 0。</p>
<h4 id="write_disk_fat_clusterclus-buf"><a class="markdownIt-Anchor" href="#write_disk_fat_clusterclus-buf"></a> write_disk_fat_cluster(clus, buf)</h4>
<p>将内存空间 buf 开始的一个簇大小的内容写入到磁盘中簇号为 clus 的簇中，不检查内存空间是否合法，会检测簇号的合法性，以及检测簇对应的 FAT 表项是否标记为空（代表簇空闲），如果簇号不合法，返回 -E_FAT_BAD_CLUSTER，如果簇被标记为空，返回 -E_FAT_ACCESS_FREE_CLUS。</p>
<p>合法情况下，调用 ide_write 写入磁盘，并返回 0。</p>
<h4 id="debug_print_cluster_disk_dataclus"><a class="markdownIt-Anchor" href="#debug_print_cluster_disk_dataclus"></a> debug_print_cluster_disk_data(clus)</h4>
<p>将一个簇中的所有内容输出，用于调试。以字节为单位输出，一行 16 个字节。</p>
<h3 id="根目录管理"><a class="markdownIt-Anchor" href="#根目录管理"></a> 根目录管理</h3>
<p>由于在 FAT16 中，根目录不占用数据区，是单独区分出来的一段磁盘空间，也不被 FAT 表所记录，因此在 FAT 文件系统中，也将其单独管理。</p>
<p>根目录的内容会在文件系统初始化时被读入，固定映射到 FATROOTVA 开始的一段内存中。</p>
<p>对于根目录的访问和读写通过调用 read_disk_fat_cluster() 和 write_disk_fat_cluster() 实现，两个函数会首先特判，如果 clus == 0 即访问了 0 号簇，即视为访问根目录，会读写整个根目录到 FATROOTVA 部分的内存。</p>
<p>在 is_clus_mapped() 中，会首先特判 clus == 0 的情况，该情况下永远返回 1，因为根目录在初始化时已经被映射，并设置（如果需要）va 为 FATROOTVA。</p>
<p>由于内存映射链表中使用 clus = 0 来标注链表元素为空，且内存映射链表管理的一段内存和用于映射根目录的内存互不相同，因此不允许调用内存映射相关函数管理根目录，如果传入 clus 参数为 0 ，会报错。</p>
<h3 id="fat-表管理"><a class="markdownIt-Anchor" href="#fat-表管理"></a> FAT 表管理</h3>
<p>本部分主要提供了对于 FAT 表项的读写操作，以及由此延伸出的磁盘空间以簇为单位的分配和回收操作，封装了动态变大变小的函数，便于文件的大小重定。</p>
<h4 id="is_free_clusterclus"><a class="markdownIt-Anchor" href="#is_free_clusterclus"></a> is_free_cluster(clus)</h4>
<p>检查簇号为 clus 的簇是否为空簇，通过检查 FAT 表项是否为 0 完成，如果空返回 1，否则返回 0。</p>
<h4 id="get_fat_entryclus-pentry_val"><a class="markdownIt-Anchor" href="#get_fat_entryclus-pentry_val"></a> get_fat_entry(clus, pentry_val)</h4>
<p>通过访问 FAT 表，获取簇号为 clus 的簇对应的表项值，并存储在 pentry_val 的内存空间中，正常运行返回 0。</p>
<p>执行中会同步读该簇对应的的其他 FAT 表项，如果不相同会返回 -E_FAT_ENT_DIFF。</p>
<h4 id="set_fat_entryclus-entry_val"><a class="markdownIt-Anchor" href="#set_fat_entryclus-entry_val"></a> set_fat_entry(clus, entry_val)</h4>
<p>通过访问 FAT 表，将获取簇号为 clus 的簇对应的表项值 entry_val 写入到 FAT 表中，如果正常运行返回 0。</p>
<p>执行中会同步写该簇对应的的其他 FAT 表项。</p>
<h4 id="debug_print_fat_entryclus"><a class="markdownIt-Anchor" href="#debug_print_fat_entryclus"></a> debug_print_fat_entry(clus)</h4>
<p>输出对应的 FAT 表项内容，调试用。</p>
<h4 id="search_and_get_fat_entrypclus"><a class="markdownIt-Anchor" href="#search_and_get_fat_entrypclus"></a> search_and_get_fat_entry(pclus)</h4>
<p>通过从头遍历的方式获取一个空簇，并将簇号设置在 pclus 对应的内存处，正常运行返回 0。如果簇已满返回 -E_FAT_CLUSTER_FULL。</p>
<h4 id="alloc_fat_cluster_entriespclus-count"><a class="markdownIt-Anchor" href="#alloc_fat_cluster_entriespclus-count"></a> alloc_fat_cluster_entries(pclus, count)</h4>
<p>申请 count 个簇，将其设置为相连（最后一个的表项设置为 0xFFFF）并将首个簇的值存储在 pclus 对应的地址处。正常运行返回 0。</p>
<h4 id="expand_fat_cluster_entriespclus-count-pendclus"><a class="markdownIt-Anchor" href="#expand_fat_cluster_entriespclus-count-pendclus"></a> expand_fat_cluster_entries(pclus, count, pendclus)</h4>
<p>通过读取 pclus 指向的簇对应的一串簇，在其尾部拓展 count 个簇，如果设置了 pendclus，将最尾部的簇设置到 pendclus 对应的内存处。用于扩展文件大小。正常运行返回 0。</p>
<h4 id="free_fat_cluster_entriesclus"><a class="markdownIt-Anchor" href="#free_fat_cluster_entriesclus"></a> free_fat_cluster_entries(clus)</h4>
<p>释放一串簇，即从簇号 clus 开始的，直到 FAT 表项为 0xFFFF 的所有簇，将这些簇对应表项设为 0x0。正常运行返回 0。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Lab0</title>
    <url>/2023/07/05/OS-Lab0/</url>
    <content><![CDATA[<h2 id="1-思考题"><a class="markdownIt-Anchor" href="#1-思考题"></a> 1 思考题</h2>
<h3 id="thinking-01"><a class="markdownIt-Anchor" href="#thinking-01"></a> Thinking 0.1</h3>
<p>三次运行 git status 时README.txt位置的对比：</p>
<ul>
<li>Untracked：此时位于“未跟踪的文件”中</li>
<li>Stage：此时位于“要提交的变更：新文件：”中</li>
<li>Modified：此时位于“尚未暂存以备提交的变更”中</li>
</ul>
<p>分别对应文件在Git中的三种状态，其中第一次和第三次不一样，区别在于第一次时未跟踪文件，第三次时已跟踪文件，虽然加入暂存区都使用git add命令，但是实际上处于两种不同状态（未跟踪和已修改）</p>
<h3 id="thinking-02"><a class="markdownIt-Anchor" href="#thinking-02"></a> Thinking 0.2</h3>
<ul>
<li>Add the file = “git add {filename}”</li>
<li>Stage the file = “git add {filename}”</li>
<li>Commit = “git commit”</li>
</ul>
<h3 id="thinking-03"><a class="markdownIt-Anchor" href="#thinking-03"></a> Thinking 0.3</h3>
<ol>
<li>“git checkout – print.c”</li>
<li>“git reset HEAD print.c” &amp; “git checkout – print.c”</li>
<li>“git rm --cached hello.txt”</li>
</ol>
<h3 id="thinking-04"><a class="markdownIt-Anchor" href="#thinking-04"></a> Thinking 0.4</h3>
<ul>
<li>回退到HEAD^后，&quot;git log&quot;返回了到2为止的提交（提交1和提交2）</li>
<li>按提交1的哈希值回退后，&quot;git log&quot;返回了到1为止的提交（仅提交1）</li>
<li>输入之前提交3的哈希值reset后，&quot;git log&quot;回到了未回退的状态（提交1、2和3）</li>
</ul>
<h3 id="thinking-05"><a class="markdownIt-Anchor" href="#thinking-05"></a> Thinking 0.5</h3>
<p>以下是执行命令和结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> first</span></span><br><span class="line">first</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> second &gt; output.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> output.txt</span></span><br><span class="line">second</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> third &gt; output.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> output.txt</span></span><br><span class="line">third</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> forth &gt;&gt; output.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> output.txt</span></span><br><span class="line">third</span><br><span class="line">forth</span><br></pre></td></tr></table></figure>
<h3 id="thinking-06"><a class="markdownIt-Anchor" href="#thinking-06"></a> Thinking 0.6</h3>
<p>以下是command的内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;echo Shell Start...&quot; &gt; test</span><br><span class="line">echo &quot;echo set a = 1&quot; &gt;&gt; test</span><br><span class="line">echo &quot;a=1&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo set b = 2&quot; &gt;&gt; test</span><br><span class="line">echo &quot;b=2&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo set c = a+b&quot; &gt;&gt; test</span><br><span class="line">echo &quot;c=\$[\$a+\$b]&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo c = \$c&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo save c to ./file1&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo \$c&gt;file1&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo save b to ./file2&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo \$b&gt;file2&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo save a to ./file3&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo \$a&gt;file3&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo save file1 file2 file3 to file4&quot; &gt;&gt; test</span><br><span class="line">echo &quot;cat file1&gt;file4&quot; &gt;&gt; test</span><br><span class="line">echo &quot;cat file2&gt;&gt;file4&quot; &gt;&gt; test</span><br><span class="line">echo &quot;cat file3&gt;&gt;file4&quot; &gt;&gt; test</span><br><span class="line">echo &quot;echo save file4 to ./result&quot; &gt;&gt; test</span><br><span class="line">echo &quot;cat file4&gt;&gt;result&quot; &gt;&gt; test</span><br></pre></td></tr></table></figure>
<p>以下是result文件的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>解释说明（按照test中的运行情况描述）：</p>
<ul>
<li>首先为a、b赋值，再根据a+b给c赋值，得到a=1,  b=2, c=3</li>
<li>然后将c, b, a分别写入到file1, file2, file3, 三个文件内容分别为3, 2, 1</li>
<li>然后按file1, file2, file3的顺序依次将内容写入file4，再将file4写入result</li>
</ul>
<p>因此result中分别三行为3，2，1。</p>
<p><strong>echo echo Shell Start 与 echo `echo Shell Start`是否有区别</strong></p>
<p>有区别。前者输出&quot;echo Shell Start&quot;，后者输出&quot;Shell Start&quot;。</p>
<p><strong>echo echo $c&gt;file1 与 echo`echo $c&gt;file1`是否有区别</strong></p>
<p>有区别。前者会写入&quot;echo ${c}“，后者只会写入”${c}“，且前者在shell中没有输出，后者会输出一个空换行，其中”${c}&quot;指shell中变量c的值。</p>
<h2 id="2-难点分析"><a class="markdownIt-Anchor" href="#2-难点分析"></a> 2 难点分析</h2>
<p>本次课下实验中大致可以按知识点分为C部分、Makefile部分和Shell部分。其中C部分均为大一基础知识，不涉及难点。下面主要分析Makefile和Shell涉及的难点。</p>
<h3 id="shell-取第x行内容"><a class="markdownIt-Anchor" href="#shell-取第x行内容"></a> Shell 取第x行内容</h3>
<p>使用 “cat {filename} | tail -n +{x} | head -n 1” 取filename文件的第x行。具体来说是用cat取全文后管道传入tail命令由于带&quot;+&quot;，因此会输出文件从第x行开始一直到结尾的内容进入head，而head会输出所收到内容的第一行，因此得到所需的第x行内容。如果需要第x行开始的共y行内容，将1改为y即可。</p>
<h3 id="shell-变量自增"><a class="markdownIt-Anchor" href="#shell-变量自增"></a> Shell 变量自增</h3>
<p>要写成&quot;a=$[$a+1]“或者&quot;a=$(($a+1))”</p>
<h3 id="grep"><a class="markdownIt-Anchor" href="#grep"></a> grep</h3>
<p>-n可以输出行号在最前，而-o可以只输出正则匹配到的部分。</p>
<h3 id="makefile"><a class="markdownIt-Anchor" href="#makefile"></a> Makefile</h3>
<p>.SUFFIXES可以指定处理某种固定后缀名文件的方式</p>
<h3 id="gcc"><a class="markdownIt-Anchor" href="#gcc"></a> gcc</h3>
<p>多文件编译时先用-c编译到.o，再一同链接</p>
<p>如果include了一些.h文件，需要加-I告诉gcc具体的include目录。</p>
<h2 id="实验体会"><a class="markdownIt-Anchor" href="#实验体会"></a> 实验体会</h2>
<p>Lab0作为引子性质的Lab，在经过CO的洗礼之后倒显得并没有想象的高压力。期待后续的内容！</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Lab1</title>
    <url>/2023/07/05/OS-Lab1/</url>
    <content><![CDATA[<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<h3 id="thinking-11"><a class="markdownIt-Anchor" href="#thinking-11"></a> Thinking 1.1</h3>
<p>向objdump传入参数 -DS，-D代表反汇编所有内容，-S代表在结果中将十六进制汇编码和反汇编结果共同显示。</p>
<p>使用MIPS交叉编译工具链得到的对应main.c的反汇编对应main部分如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000 &lt;main&gt;:</span><br><span class="line">   0:	27bdffe0 	addiu	sp,sp,-32</span><br><span class="line">   4:	afbf001c 	sw	ra,28(sp)</span><br><span class="line">   8:	afbe0018 	sw	s8,24(sp)</span><br><span class="line">   c:	03a0f025 	move	s8,sp</span><br><span class="line">  10:	3c1c0000 	lui	gp,0x0</span><br><span class="line">  14:	279c0000 	addiu	gp,gp,0</span><br><span class="line">  18:	afbc0010 	sw	gp,16(sp)</span><br><span class="line">  1c:	3c020000 	lui	v0,0x0</span><br><span class="line">  20:	24440000 	addiu	a0,v0,0</span><br><span class="line">  24:	8f820000 	lw	v0,0(gp)</span><br><span class="line">  28:	0040c825 	move	t9,v0</span><br><span class="line">  2c:	0320f809 	jalr	t9</span><br><span class="line">  30:	00000000 	nop</span><br><span class="line">  34:	8fdc0010 	lw	gp,16(s8)</span><br><span class="line">  38:	00001025 	move	v0,zero</span><br><span class="line">  3c:	03c0e825 	move	sp,s8</span><br><span class="line">  40:	8fbf001c 	lw	ra,28(sp)</span><br><span class="line">  44:	8fbe0018 	lw	s8,24(sp)</span><br><span class="line">  48:	27bd0020 	addiu	sp,sp,32</span><br><span class="line">  4c:	03e00008 	jr	ra</span><br><span class="line">  50:	00000000 	nop</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<h3 id="thinking-12"><a class="markdownIt-Anchor" href="#thinking-12"></a> Thinking 1.2</h3>
<p>使用我们编写的readelf 解析 target/mos 得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0:0x0</span><br><span class="line">1:0x80010000</span><br><span class="line">2:0x80011d10</span><br><span class="line">3:0x80011d28</span><br><span class="line">4:0x80011d40</span><br><span class="line">5:0x0</span><br><span class="line">6:0x0</span><br><span class="line">7:0x0</span><br><span class="line">8:0x0</span><br><span class="line">9:0x0</span><br><span class="line">10:0x0</span><br><span class="line">11:0x0</span><br><span class="line">12:0x0</span><br><span class="line">13:0x0</span><br><span class="line">14:0x0</span><br><span class="line">15:0x0</span><br><span class="line">16:0x0</span><br></pre></td></tr></table></figure>
<p>我们编写的 readelf 不能解析自身的原因是：hello在编译时加入了 -m32编译选项，而readelf没有，代表hello是按32位程序编译的，而readelf没有指定，按默认的64位编译。使用 objdump -h也能发现：hello 的类别是 ELF32，readelf的类别是 ELF64。</p>
<h3 id="thinking-13"><a class="markdownIt-Anchor" href="#thinking-13"></a> Thinking 1.3</h3>
<p>由指导书附录A.1部分可知，操作系统上电启动需要调用 bootloader 先由 ROM 中刻好的 stage1 初始化硬件，再将存储设备中的 stage2 部分代码放入 RAM 并调用。显然这里的启动入口地址对应 bootloader 的 stage2 所在的地址，而不是操作系统的内核入口。待 stage2 载入内核，设置好启动参数后，才会跳转到在固定的内核地址的内核部分。</p>
<p>实验中，GXemul 本身支持加载 ELF 格式内核，所以启动流程被简化为直接加载内核到内存并跳转到内核的入口（具体内核各节的加载地址也可以由更改 Linker Script 文件来更改），因此只需要将内核放在规定好的内核入口处即可正常启动内核。</p>
<h2 id="难点分析"><a class="markdownIt-Anchor" href="#难点分析"></a> 难点分析</h2>
<h3 id="指针基础"><a class="markdownIt-Anchor" href="#指针基础"></a> 指针基础</h3>
<p>Exercise 1.1中我和其他同学发现一个共性问题，如下代码所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sh_table = ehdr + ehdr-&gt;e_shoff; <span class="comment">// wrong</span></span><br><span class="line">sh_table = binary + ehdr-&gt;e_shoff; <span class="comment">// right</span></span><br></pre></td></tr></table></figure>
<p>前者错误，后者正确。主要是因为C语言的指针运算特性：某type类型的指针+1实际上会让指针地址值增加sizeof(type)，在本题情况下就是sizeof(Elf32_Ehdr)，但这显然不是offset对应的单位，因此应该更换成类型为void *的binary指针，或者采用下列这种写法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sh_table = (<span class="type">void</span> *)ehdr + ehdr-&gt;e_shoff;</span><br></pre></td></tr></table></figure>
<h3 id="linker-script"><a class="markdownIt-Anchor" href="#linker-script"></a> Linker Script</h3>
<p>Exercise 1.2中，需要注意空格和示例内容一样，不能少空格，不然会syntax error。（冒号左右和左右大括号的左右都要加空格）</p>
<h3 id="printk"><a class="markdownIt-Anchor" href="#printk"></a> printk()</h3>
<p>对于Exercise1.4，首先是涉及指针操作，不能搞混fmt和*fmt，即避免出现将fmt作为字符处理或进行类似*fmt++的操作。</p>
<p>其次是注意每次循环间width, long_flag, neg_flag, ladjust, padc五个变量值要记得重置回默认值（可以在循环开头直接赋值默认值，也可以通过保证所有分支结构都写else的方式解决，我使用的是后者）。</p>
<p>最后有一个需要略微阅读其他部分代码的地方：有符号整数对负数的处理。这里如果只是对负值进行判断并赋值neg_flag并传入的话是不够的，需要将num取负，因为print_num接收到的neg_flag仅用于指示是否输出负号，实际打印时永远按无符号数打印，所以需要取负。</p>
<h2 id="实验体会"><a class="markdownIt-Anchor" href="#实验体会"></a> 实验体会</h2>
<p>刚开始阅读Lab1部分的时候还有种不知所云的感受，但是采取“先记住，往后慢慢读”的方式逐渐的也就理解了神奇的操作系统（很小的一部分）。Lab1整体能学到不少东西，不过代码部分还是相对简单，个人认为相比CO略显轻松，期待后续内容。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Lab3</title>
    <url>/2023/07/05/OS-Lab3/</url>
    <content><![CDATA[<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<h3 id="thinking-31"><a class="markdownIt-Anchor" href="#thinking-31"></a> Thinking 3.1</h3>
<p>实验中 UVPT 往上到 ULIM 之间为进程自己的页表，即 UVPT 是页表基地址。这里访问 pgdir[PDX(UVPT)] 即为页目录中页表基地址对应的页目录项，将进程页目录的物理地址赋值到该项，即可保证能正确通过页表项虚拟地址找到物理地址。（这里保证了页目录中自映射的页目录项有效，有效即置位 PTE_V）</p>
<h3 id="thinking-32"><a class="markdownIt-Anchor" href="#thinking-32"></a> Thinking 3.2</h3>
<p>map_page 的参数 data 来自 elf_load_seg 传入的参数 data，调用 elf_load_seg 时传入的 data 是加载 ELF 时的数据地址 struct Env *e。这里这个参数用于在 map_page 中获取当前需要插入新页的页目录地址和 asid，因此不能省略。</p>
<h3 id="thinking-33"><a class="markdownIt-Anchor" href="#thinking-33"></a> Thinking 3.3</h3>
<p>可以根据页面加载起始地址位置和加载内容大致分为四类：</p>
<ul>
<li>从页面中间加载一部分程序段内容（到页面结尾或页面中间）</li>
<li>从页面开始加载一部分程序段内容（到页面结尾或页面中间）</li>
<li>从页面开始加载一部分程序段内容后，余下部分填入0</li>
<li>从页面开始填入0（到页面结尾或页面中间）</li>
</ul>
<p>不论从页面开始还是从页面中间，都需要新分一页来填入内容。</p>
<h3 id="thinking-34"><a class="markdownIt-Anchor" href="#thinking-34"></a> Thinking 3.4</h3>
<p>这里的EPC是给CPU做处理的PC地址，CPU使用的是虚拟地址。</p>
<h3 id="thinking-35"><a class="markdownIt-Anchor" href="#thinking-35"></a> Thinking 3.5</h3>
<ul>
<li>handle_int 在 kern/genex.S 中实现</li>
<li>handle_mod 在 kern/genex.S 中跳转到 do_tlb_mod，在 kern/tlbex.c 中实现</li>
<li>handle_tlb 在 kern/genex.S 中跳转到 do_tlb_refill，在 kern/tlb_asm.S 中实现</li>
<li>handle_sys 在 kern/genex.S 中跳转到 do_syscall，在 lab4 中会实现</li>
</ul>
<h3 id="thinking-36"><a class="markdownIt-Anchor" href="#thinking-36"></a> Thinking 3.6</h3>
<p>enable_irq 用于开启中断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LEAF(enable_irq) // declare leaf function &quot;enable_irq&quot;</span><br><span class="line">	// CU0 = 1 means Coprocessor 0 (CP0) is available</span><br><span class="line">	// IM4 = 1 means CP0 respond to 4th interruption</span><br><span class="line">	// IEc = 1 means allow interruption</span><br><span class="line">	li      t0, (STATUS_CU0 | STATUS_IM4 | STATUS_IEc) // set t0 to these 3 status bits</span><br><span class="line">	mtc0    t0, CP0_STATUS // set these 3 status bits to CP0 status register</span><br><span class="line">	jr      ra // return</span><br><span class="line">END(enable_irq)</span><br></pre></td></tr></table></figure>
<p>timer_irq 用于禁止中断并跳转到 schedule：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">timer_irq:</span><br><span class="line">	sw      zero, (KSEG1 | DEV_RTC_ADDRESS | DEV_RTC_INTERRUPT_ACK) // write 0 to RTC_INTERRUPT_ACK to avoid interruption</span><br><span class="line">	li      a0, 0			// set first parameter to 0 (yield = 0)</span><br><span class="line">	j       schedule	// call schedule()</span><br></pre></td></tr></table></figure>
<h3 id="thinking-37"><a class="markdownIt-Anchor" href="#thinking-37"></a> Thinking 3.7</h3>
<p>硬件按照时钟每次产生时钟中断时：</p>
<ul>
<li>根据 exception_handlers 的指定，是时钟中断，调用 handle_int</li>
<li>检查是否允许所有中断和是否允许时钟中断，如果允许，跳转到 timer_irq 处理时钟中断</li>
<li>暂时禁止中断，调用 schedule() ，参数 yield = 0</li>
<li>如果未调度进程 / 当前进程时间片耗尽 / 当前进程被阻塞或退出则切换进程</li>
<li>调度结束，结束中断处理，允许中断</li>
</ul>
<h2 id="难点分析"><a class="markdownIt-Anchor" href="#难点分析"></a> 难点分析</h2>
<ul>
<li>env_free_list 是 LIST，对应 field 是 env_link，而 env_sched_list 是 TAILQ，对应 field 是env_sched_link，不能混用。</li>
<li>env_alloc 中对没有空闲进程或调用的函数运行错误等情况一定要返回错误值，类似的，所有 int 返回值的函数对于函数内任何可能运行错误的地方都要加以判断并返回对应错误值，调用返回 int 的函数时都要判断返回值并判断是否返回错误值（可以使用 try() ）</li>
<li>有些时候调用函数时会传入 int 等类型作为地址使用，这时函数要求的类型可能是 void *，如果要消除 warning 可以考虑加上类型转换再传入函数</li>
<li>set a to b 的意思是 a = b，即把 b 的值赋值给 a。</li>
<li>没有 parent 的 env，parent_id 是 0。</li>
</ul>
<h2 id="实验感想"><a class="markdownIt-Anchor" href="#实验感想"></a> 实验感想</h2>
<p>lab3 主要学习了进程，核心内容是对于 PCB 的操作处理，同时还简单引入了异常处理的初步流程，但是涉及到异常处理的部分更多是复制粘贴代码，后续还需要在这个基础上再多多了解一下异常处理流程（但其实完成 lab4 的学习之后已经了解了不少异常处理相关的内容）。</p>
<p>进程本身调度想必是很复杂的内容，在考前还需要多多复习练习读代码。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Lab4</title>
    <url>/2023/07/05/OS-Lab4/</url>
    <content><![CDATA[<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<h3 id="thinking-41"><a class="markdownIt-Anchor" href="#thinking-41"></a> Thinking 4.1</h3>
<ul>
<li>内核在保存现场时会使用 SAVE_ALL 宏将所有通用寄存器的值保存在 KSTACKTOP 向下一个 Trapframe 的区域。</li>
<li>刚刚陷入内核后可以，这时会使用 SAVE_ALL 宏保存现场，随后跳转到各个异常处理函数中，异常处理函数会根据后续调用的 C 函数需要的传参更改 $a0-$a3 的值，因此在这之后应当从保存的 Trapframe 中取参数。</li>
<li>我们首先由异常处理函数将 Trapframe 传给 do_syscall 函数，在这个函数中，我们将 Trapframe 中和栈中用户传给 msyscall 的参数取出，作为参数调用对应的系统调用函数。</li>
<li>调用过对应系统调用函数后，内核将返回值赋值给了 Trapframe 上的 $v0，用来向用户态模拟 ”函数返回值“，同时将 EPC += 4，使得返回后用户能运行下一条指令。</li>
</ul>
<h3 id="thinking-42"><a class="markdownIt-Anchor" href="#thinking-42"></a> Thinking 4.2</h3>
<p>为了验证变换是否正确，检查出可能存在的内核其他函数误操作修改了进程的 envid 的情况，或是 alloc 时进程赋值的 envid 不正确的情况，作为一种验证手段，类似其他内核函数内有 “不会被运行到的地方” 放一句 panic 的效果。</p>
<h3 id="thinking-43"><a class="markdownIt-Anchor" href="#thinking-43"></a> Thinking 4.3</h3>
<p>mkenvid 函数对 (1 &lt;&lt; LOG2NENV) 取或，因此返回值一定非零，这是代码上的解释。</p>
<p>应用中，所有 env 相关函数调用时都认为 envid=0 时代表取 curenv （因为 envid2env 是这么处理的），因此不能使其他 envid 是 0。</p>
<h3 id="thinking-44"><a class="markdownIt-Anchor" href="#thinking-44"></a> Thinking 4.4</h3>
<p>C，在父进程返回子进程的 pid，在子进程返回 0。</p>
<h3 id="thinking-45"><a class="markdownIt-Anchor" href="#thinking-45"></a> Thinking 4.5</h3>
<p>对于所有用户空间，应该映射的部分包括虚拟地址从 0 到 USTACKTOP 的部分，这些用户空间包括了用户自己的各种全局变量和栈中局部变量等内存数据。</p>
<p>不应映射的部分包括 UXSTACKTOP（处理写入异常使用），UENVS 和 UPAGES （只读，所有进程相同，映射内核空间的进程和页表数组），UVPT（页目录，每个进程独立）等 USTACKTOP 上的，一般情况下不应被用户进程所操作的页。</p>
<h3 id="thinking-46"><a class="markdownIt-Anchor" href="#thinking-46"></a> Thinking 4.6</h3>
<ul>
<li>vpd 用于给用户访问页目录项，vpt 用于给用户访问各个页表。访问一个虚拟地址 va 对应的页目录用 vpd[PDX(va)]，页表用 vpt[VPN(va)]。</li>
<li>因为所有页表占据了一段连续的内存。</li>
<li>页目录占据的恰好是页表内存中能映射到页表这一段内存的对应页表的地址。(UVPT + (PDX(UVPT) &lt;&lt; PGSHIFT))</li>
<li>不能，页表项对用户态只读。</li>
</ul>
<h3 id="thinking-47"><a class="markdownIt-Anchor" href="#thinking-47"></a> Thinking 4.7</h3>
<ul>
<li>缺页异常处理时响应时钟中断或其他中断，比如在缺页中断时修改有 PTE_COW 标记的页。</li>
<li>因为可能出现异常重入，不保证 KSTACKTOP 处一直是当前异常处理的现场。</li>
</ul>
<h3 id="thinking-48"><a class="markdownIt-Anchor" href="#thinking-48"></a> Thinking 4.8</h3>
<p>得不到许多权限，即使处理有误也不至于产生使操作系统崩溃的错误，不会改变内核所需的重要内存空间。</p>
<h3 id="thinking-49"><a class="markdownIt-Anchor" href="#thinking-49"></a> Thinking 4.9</h3>
<ul>
<li>保证子进程如果在 exofork 之后被创建的过程中如果出现写入异常能够得到正确的处理</li>
<li>会无法处理缺页中断错误，导致写时保护机制不能执行。</li>
</ul>
<h2 id="难点分析"><a class="markdownIt-Anchor" href="#难点分析"></a> 难点分析</h2>
<ul>
<li>
<p>需要充分理解内核态和用户态的区别，用户态只能访问对应的函数和内存空间等，才能进一步理解系统调用。</p>
</li>
<li>
<p>理解系统调用的过程：从 syscall 的函数到 msyscall 到 do_syscall 到 sys 函数的整个过程是如何进行的，参数传递是怎么完成的等。</p>
</li>
<li>
<p>Lab2 的内存映射如果没有理解依然会导致一部分题目出现问题，应当理解虚拟地址通过页表的映射方式，才能理解用户态的 mem_map。</p>
</li>
<li>
<p>IPC的流程应当是先 recv 再 send</p>
</li>
<li>
<p>需要搞清楚写时复制机制和 tlb_mod 异常的联系和 fork 时的处理顺序</p>
</li>
<li>
<p>对 trapframe 的保存和访问需要清楚</p>
</li>
</ul>
<h2 id="实验体会"><a class="markdownIt-Anchor" href="#实验体会"></a> 实验体会</h2>
<p>从 lab4 开始就没有实验讲解，需要认真在课下学习研究，并参加两次课上实验了，压力开始变大，需要更加努力更加专注，对 OS 课程需要投入更大精力，更加用心。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Lab5</title>
    <url>/2023/07/05/OS-Lab5/</url>
    <content><![CDATA[<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<h3 id="thinking-51"><a class="markdownIt-Anchor" href="#thinking-51"></a> Thinking 5.1</h3>
<p>kseg0 中有内核相关的各种数据如 pages 数组、envs 数组等，在kseg0中读写数据可能会对这些内容造成不赢的的修改。</p>
<p>向 cache 的写入会被缓存，直到 cache 缺失进行替换时才会执行写入，这对于一些输出外设如音箱和显示屏等会造成输出信息的大量延迟。类似的，cache 缺失造成的延迟也会拖慢外设输入后的计算机反应速度。</p>
<p>因此磁盘设备会更不容易出现错误，而外设会更容易出现错误。</p>
<h3 id="thinking-52"><a class="markdownIt-Anchor" href="#thinking-52"></a> Thinking 5.2</h3>
<p>一个磁盘块大小为 BY2BLK = BY2PG = 4096。</p>
<p>一个文件控制块大小为 BY2FILE = 256。</p>
<p>一个磁盘块最多存储 BY2BLK / BY2FILE = 4096 / 256 = 16 个文件控制块。</p>
<p>按照 MOS 的简化存储方法，一个文件或目录恰好能存储一个磁盘块能装下的最大指针数量的磁盘块，即一个文件或目录下至多包含 BY2BLK / sizeof(uint32_t) = 4096 / 4 = 1024 个磁盘块。</p>
<p>因此单个文件最大大小为 1024 * BY2BLK = 1024 * 4KB = 4MB。</p>
<p>因此一个目录下至多有 1024 * BY2BLK / BY2FILE = 1024 * 16 = 16384 个文件。</p>
<h3 id="thinking-53"><a class="markdownIt-Anchor" href="#thinking-53"></a> Thinking 5.3</h3>
<p>在 MOS 中，我们相当于将整个磁盘都映射到了虚拟内存空间内，因此最大瓷盘大小为 DISKMAX = 1GB。</p>
<h3 id="thinking-54"><a class="markdownIt-Anchor" href="#thinking-54"></a> Thinking 5.4</h3>
<h4 id="fsservh"><a class="markdownIt-Anchor" href="#fsservh"></a> fs/serv.h</h4>
<p>PTE_DIRTY 在页表项中的 ”磁盘脏” 标记，代表对应的磁盘块已经被修改但未写入磁盘</p>
<p>BY2SECT 单个磁盘扇区的大小（字节数），磁盘必须以扇区为单位读取</p>
<p>SECT2BLK 一个磁盘块内的扇区数目</p>
<p>DISKMAP 文件系统作为用户进程，其虚存空间的一部分与磁盘空间一一映射，该宏定义了映射的开始位置</p>
<p>DISKMAX 该宏定义了映射的总大小（即最大地址位置在 DISKMAP + DISKMAX）</p>
<h4 id="userincludefsh"><a class="markdownIt-Anchor" href="#userincludefsh"></a> user/include/fs.h</h4>
<p>BY2BLK 单个磁盘块的大小（字节数），磁盘的文件管理以块为单位</p>
<p>BIT2BLK 单个磁盘块的大小（位数，比特数）</p>
<p>MAXNAMELEN 文件名的最长大小（char数）</p>
<p>MAXPATHLEN 路径名的最长大小（char数）</p>
<p>NDIRECT 文件直接指针数量</p>
<p>NINDIRECT 文件间接指针数量，由于 MOS 的简化保存法，实际为文件直接和间接指针总和，也即文件对应的最大块数</p>
<p>MAXFILESIZE 文件的最大大小，由 NINDIRECT * BY2BLK 算出</p>
<p>BY2FILE 文件控制块的大小（字节数）</p>
<h3 id="thinking-55"><a class="markdownIt-Anchor" href="#thinking-55"></a> Thinking 5.5</h3>
<p>会共享。文件描述符本质上是内存中的变量，在fork后会复制同样的内容给父子进程，因此文件描述符是相同的。既然是相同的，对应的定位指针也会是同一个定位指针，因此父子进程会共享文件描述符和定位指针。</p>
<h3 id="thinking-56"><a class="markdownIt-Anchor" href="#thinking-56"></a> Thinking 5.6</h3>
<h4 id="struct-fd"><a class="markdownIt-Anchor" href="#struct-fd"></a> struct Fd</h4>
<p>为文件描述符结构体，为单纯内存数据，其中：</p>
<ul>
<li>u_int fd_dev_id 外设 id</li>
<li>u_int fd_offset 读写的当前偏移量</li>
<li>u_int fd_omode 文件打开方式，如只读</li>
</ul>
<h4 id="struct-filefd"><a class="markdownIt-Anchor" href="#struct-filefd"></a> struct Filefd</h4>
<p>为记录文件详细信息的结构体，为单纯内存数据，其中：</p>
<ul>
<li>struct Fd f_fd 对应的文件描述符</li>
<li>u_int f_fileid 文件的 id</li>
<li>struct File f_file 对应的文件系统控制块</li>
</ul>
<h3 id="struct-file"><a class="markdownIt-Anchor" href="#struct-file"></a> struct File</h3>
<p>为描述具体文件的结构体，对应磁盘上的物理实体，其中：</p>
<ul>
<li>char f_name[MAXNAMELEN] 文件名</li>
<li>uint32_t f_size 文件大小，单位字节</li>
<li>uint32_t f_type 文件类型，文件或目录</li>
<li>uint32_t f_direct[NDIRECT] 文件直接对应的十个文件块指针</li>
<li>uint32_t f_inidirect 文件间接对应的文件块指针所在的块</li>
<li>struct File *f_dir 父目录</li>
<li>char f_pad[略] 为了使 File 结构体恰好占用一定大小的 padding 部分</li>
</ul>
<h3 id="thinking-57"><a class="markdownIt-Anchor" href="#thinking-57"></a> Thinking 5.7</h3>
<p>分为两种，同步消息和返回消息。</p>
<p>同步消息以实心三角黑箭头+黑实线表示，消息的发送者会在消息发送后暂停活动，直到收到消息接受者的回应消息，才会继续运作。实现方式为先调用 ipc_send 发送消息后，再调用 ipc_recv 接收返回消息，接收到后才会继续运行。</p>
<p>返回消息以开三角箭头+黑虚线表示，代表消息的发送者只管发送，发送后继续进行自己的相关活动，不等待消息接收者的回应，常用于对同步消息的回应。实现方式为直接调用 ipc_send 发送消息即可。</p>
<h2 id="难点分析"><a class="markdownIt-Anchor" href="#难点分析"></a> 难点分析</h2>
<h3 id="外设相关-syscall"><a class="markdownIt-Anchor" href="#外设相关-syscall"></a> 外设相关 syscall</h3>
<p>主要是 Exercise 5.1～5.2 的部分，本身逻辑不难，按要求完成即可，难点在于判断允许访问的地址范围时需要仔细书写，尤其是不止要检测 pa 的范围，同样也要检测 pa+len 的范围。</p>
<h3 id="ide"><a class="markdownIt-Anchor" href="#ide"></a> ide</h3>
<p>按照汇编代码类似的逻辑进行物理地址的书写即可，需要注意不能搞错 read 和 write。</p>
<h3 id="create_file"><a class="markdownIt-Anchor" href="#create_file"></a> create_file</h3>
<p>需要仔细阅读 struct File 的定义，理解这里的关系。</p>
<h3 id="fsc"><a class="markdownIt-Anchor" href="#fsc"></a> fs.c</h3>
<p>明确文件目录的结构关系以及内存使用即可。</p>
<h3 id="open-函数"><a class="markdownIt-Anchor" href="#open-函数"></a> open 函数</h3>
<p>按照要求调用对应的函数即可。</p>
<h3 id="read-函数"><a class="markdownIt-Anchor" href="#read-函数"></a> read 函数</h3>
<p>参考 write 即可。</p>
<h2 id="实验体会"><a class="markdownIt-Anchor" href="#实验体会"></a> 实验体会</h2>
<p>lab5 的实验并不是很难，但是需要对文件系统的一些思考和理解，虽然代码部分不难，但是具体到理解整个运作其实还是有一定难度的，需要仔细理解认知。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Lab6</title>
    <url>/2023/07/05/OS-Lab6/</url>
    <content><![CDATA[<h2 id="思考题"><a class="markdownIt-Anchor" href="#思考题"></a> 思考题</h2>
<h3 id="thinking-61"><a class="markdownIt-Anchor" href="#thinking-61"></a> Thinking 6.1</h3>
<p>应当如下修改：（仅贴出修改部分，即switch内的代码）</p>
<p>具体来说，交换父子部分的代码即可。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (fork()) &#123; </span><br><span class="line">  <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">/* son process - as writer */</span> </span><br><span class="line">    close(fildes[<span class="number">0</span>]); <span class="comment">/* close read end */</span></span><br><span class="line">    write(fildes[<span class="number">1</span>], <span class="string">&quot;Hello world\n&quot;</span>, <span class="number">12</span>); <span class="comment">/* write data to pipe */</span></span><br><span class="line">    close(fildes[<span class="number">1</span>]); <span class="comment">/* close write end */</span></span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS); <span class="comment">/* exit */</span></span><br><span class="line">  <span class="keyword">default</span>: <span class="comment">/* father process - as reader */</span> </span><br><span class="line">    close(fildes[<span class="number">1</span>]); <span class="comment">/* close write end */</span></span><br><span class="line">    read(fildes[<span class="number">0</span>], buf, <span class="number">100</span>);  <span class="comment">/* read data from pipe */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child-process read:%s&quot;</span>,buf); </span><br><span class="line">    close(fildes[<span class="number">0</span>]);  <span class="comment">/* close read end */</span></span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS); <span class="comment">/* exit */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="thinking-62"><a class="markdownIt-Anchor" href="#thinking-62"></a> Thinking 6.2</h3>
<p>dup 函数的作用的作用是把一个文件描述符的内容映射给另一个文件描述符。</p>
<p>比如有一个管道，各个文件描述符映射次数为 p[0] = p[1] = 1，pipe = 2。</p>
<p>如果此时要映射读端，会先 p[0]<ins>，再 pipe</ins>。</p>
<p>如果这两个操作之间发生中断，则会导致 p[0] == pipe。此时就会错误的认为写端关闭，出现错误。</p>
<h3 id="thinking-63"><a class="markdownIt-Anchor" href="#thinking-63"></a> Thinking 6.3</h3>
<p>准确来说，MOS <strong>通过关中断的方式让系统调用不被中断</strong>，因而对于用户而言，系统调用期间不会发生中断，可以被视为是原子的。</p>
<p>具体来说，代码里涉及到了两个宏，会将 CP0_STATUS 寄存器的 STATUS_CU0 位置位，从而实现开关中断的效果，而每次触发系统调用会首先调用相关宏关中断，结束后再开中断。</p>
<p><em>注：这种方式显然不适用于多核的情况，多核时需要采用硬件提供的操作来进行一些原子操作，或者使用互斥锁等方式保证进程同步。</em></p>
<h3 id="thinking-64"><a class="markdownIt-Anchor" href="#thinking-64"></a> Thinking 6.4</h3>
<ul>
<li>可以。我们通过验证 pageref(fd) == pager(pipe) 来检测管道是否关闭，如果改变上述解除映射顺序，就能一直保证 pageref(fd) &lt; pageref(pipe)，不会出现错误。</li>
<li>可以，通过先将 pageref(pipe)++ ，再将 pageref(fd)++的方式，保证了任何时候都有pageref(fd) &lt; pageref(pipe)，不会出现错误。</li>
</ul>
<h3 id="thinking-65"><a class="markdownIt-Anchor" href="#thinking-65"></a> Thinking 6.5</h3>
<ul>
<li>打开文件的过程包括：用户调用用户库的 open() 函数，进而调用 fsipc_open() 函数向文件管理进程发送 ipc 请求，文件管理进程通过调用 serv_open() 进而调用相关函数，经过查找路径等过程将文件打开，存储文件描述符并通过 ipc 返回给用户。</li>
<li>打开 ELF 是通过 load_icode() 函数完成。函数中解析出每个段的段头 ph 和数据在内存中的起始位置 bin，再通过 elf_load_seg() 加载各个程序段，相关的内存拷贝和映射工作由 load_icode_mapper() 函数进行，通过调用相关的内存处理函数进行映射。</li>
<li>在 elf_load_seg() 函数中，先将 ELF 文件中已有的数据映射进内存，完成之后，还会继续调用 map_page() （即 load_icode_mapper() 函数），将全 0 的页面映射到后续的部分，使得大小能够与 ELF 中设置的大小匹配，保证了 .bss 中的变量也能有足够的空间，且初始化为 0 。</li>
</ul>
<h3 id="thinking-66"><a class="markdownIt-Anchor" href="#thinking-66"></a> Thinking 6.6</h3>
<p>在 usr/init.c 中，调用了 opencons() 函数，打开一个可读写的文件描述符 fd，由于此时并没有任何文件描述符被 alloc ，因此这是第一个即 0 号文件描述符。之后调用 dup(0, 1) 将 0 号复制到 1 号，从而实现了将其定为标准输入和标准输出。</p>
<h3 id="thinking-67"><a class="markdownIt-Anchor" href="#thinking-67"></a> Thinking 6.7</h3>
<p>MOS 中的 shell 命令都是外部命令。</p>
<p>而 cd 命令需要改变当前的进程所在目录即 pwd，如果在外部更改，一旦 fork 了新进程，进程的所在目录会回到根目录下，不能实现正确的 cd 效果。因此在外部无法正确实现 cd，只能在内部实现。</p>
<h3 id="thinking-68"><a class="markdownIt-Anchor" href="#thinking-68"></a> Thinking 6.8</h3>
<ul>
<li>可以观察到两次 spawn，分别对应 ls 和 cat 两个命令。</li>
<li>可以观察到四次进程销毁，分别对应开始时执行命令 fork 出的子 shell 进程，ls 和 cat 两个命令以及管道 fork 出的子进程。</li>
</ul>
<h2 id="难点分析"><a class="markdownIt-Anchor" href="#难点分析"></a> 难点分析</h2>
<ul>
<li>本实验一方面的主要难点在于 pipe 相关函数的思维量，需要一点点思考来使代码能够适应不同初始情况下对管道信息的维护，主要是对读位置和写位置的处理等，需要全面覆盖到各种情况，因此不能马虎随便写。</li>
<li>此外关于管道关闭判断和 pageref 顺序导致的问题，已经在指导书和思考题中说明，并没有太高难度，主要是明确对中断的正确理解即可。</li>
<li>到 spawn 函数部分，则需要充分理解包括 lab2、lab3、lab4、lab5 中的相关知识，熟练使用相关系统调用和其他函数，然后按照提示进行补全即可。</li>
<li>sh 部分，理解重定向的实现方式是通过映射到文件描述符 0 和 1 的原理，在此基础上调用 open 和 dup 等函数即可。</li>
</ul>
<h2 id="实验体会"><a class="markdownIt-Anchor" href="#实验体会"></a> 实验体会</h2>
<p>Lab6 的完成，有一种为半个多学期的努力画上句点的感觉。在看到（虽然大多数代码都不是）自己写的操作系统终于能跑出一个像样的 shell 界面时，还是很有成就感的。相应的，Lab6 的相关内容也显得综合性较强，如果对前面的 Lab 有足够的了解其实实现起来相对轻松，但是如果知识有漏洞可能就不会那么顺利。</p>
<p>祝贺操作系统实验完结！</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>PMP Essay Note</title>
    <url>/2023/07/05/PMP-Essay-Note/</url>
    <content><![CDATA[<p>本文提出了一种通过学习局部动作先验（PMP）的方法来为配备手部的角色生成与复杂的环境交互的动画。核心创新点在于两个，一个是提出在强化学习任务中通过将身体划分为不同的部位来分别训练风格分类器，实现整体动作的泛用性增加，能在更少的训练数据中得到更泛化的结果；一个是提出对一些重要部位（如手部）可以预先进行交互训练，为交互提供内容。</p>
<h3 id="过往工作amp"><a class="markdownIt-Anchor" href="#过往工作amp"></a> 过往工作：AMP</h3>
<p>AMP是通过强化学习训练完成动作生成的方法。其强化学习对应的奖励函数包括两个部分，其一是任务奖励，作为完成给定任务的奖励，其二是风格奖励，用于限制生成动作的风格符合训练数据（通过训练一个判别器D判断是否是符合原数据集的动作来决定给予多少奖励）。这样的生成受限于数据，无法实现生成比较自然的而超出数据之外的运动，又因为现实中的不同动作数量众多，很难通过数据去全部覆盖，因此难以解决。</p>
<h3 id="pmp"><a class="markdownIt-Anchor" href="#pmp"></a> PMP</h3>
<p>PMP通过将现有的动作捕捉数据，对于每个部位先进行训练，获取相关部位的先验知识后，使其在训练阶段探索和动态选择最适合情景的整体动作，或组合不同部位的动作。</p>
<p>具体的想法是将整个身体划分为k个不同的部分，对每个部分分别应用类似AMP的判别器训练，使得每个部分分别贴近训练数据。最后整体的强化学习风格奖励被设置为每个部位的风格奖励的乘积。</p>
<h3 id="交互gym"><a class="markdownIt-Anchor" href="#交互gym"></a> 交互Gym</h3>
<p>针对手部的灵活动作，本文首先设计了一个交互Gym用于预训练手部的动作，以使手部能获得先验。该环境中，每次设置一个手部模型和一个代表性的目标物体，如长圆柱体，强制手部通过均匀接触来抓握，并应用了一个带有手动设计奖励的强化学习算法来训练自然且物理稳定的抓握。在训练过程中，物体被施加以任意力或扭矩来促进训练稳定的抓握。</p>
<h3 id="手部交互状态表示"><a class="markdownIt-Anchor" href="#手部交互状态表示"></a> 手部交互状态表示</h3>
<p>上述手部交互中，一个状态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>s</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">s^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 被定义如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>s</mi><mi>i</mi></msup><mo>=</mo><mrow><mo fence="true">{</mo><msub><mi>q</mi><mi>h</mi></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>q</mi><mo>˙</mo></mover><mi>h</mi></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>p</mi><mo stretchy="true">‾</mo></mover><mi>e</mi></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>p</mi><mo stretchy="true">‾</mo></mover><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>c</mi><mi>e</mi></msub><mo separator="true">,</mo><mo>&lt;</mo><msub><mi>d</mi><mi>h</mi></msub><mo>⋅</mo><msub><mi>d</mi><mi>c</mi></msub><mo>&gt;</mo><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">s^i=\left\{q_h,\dot q_h, \overline p_e, \overline p_r, c_e, &lt;d_h\cdot d_c&gt;\right\} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8746639999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.055550000000000016em;"><span class="mord">˙</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">p</span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">p</span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span></span></p>
<p>前三个代表手的状态，分别代表手部关节的位置、速度和在手腕局部坐标系中指向四指末端的坐标。目标杆子被表示第四个值，为其两端的坐标总计六个维度，最后两项感知交互状态，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">c_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 代表各个指尖的0/1接触标记，最后一个值代表每个构成手部的刚体之间，从手指指向手掌内部的向量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>h</mi></msub></mrow><annotation encoding="application/x-tex">d_h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 与生成的接触力方向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">d_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 之间的余弦相似度。</p>
<h3 id="动作生成"><a class="markdownIt-Anchor" href="#动作生成"></a> 动作生成</h3>
<p>最终，上述的手部动作得到单独预训练的分类器和其他部位的风格分类器一同进行计算，再将交互奖励嵌入奖励函数，使得尽量贴近交互目标成为一个训练目的。</p>
<h3 id="混合技术"><a class="markdownIt-Anchor" href="#混合技术"></a> 混合技术</h3>
<p>当上述分割较多时，由于最后得到奖励函数是所有量之间的乘积形式，如果其中某一个不能模仿对应风格（使得其部分的奖励函数=0），会使得整体奖励为0，拖慢训练。因此本文选择通过每个部位都各自独立地有0.1的概率不参与乘积的方式进行混合（会在分割数大于2时使用），以此保证了训练的有效。</p>
<h3 id="局限性"><a class="markdownIt-Anchor" href="#局限性"></a> 局限性</h3>
<p>局限性。当运动捕捉数据有限或需要特定部分的交互先验时，PMP提供了一个很好的选择。此外，提出的交互先验减少了在多个下游任务中针对抓握相关奖励项进行重复策略优化的工作量。然而，提出的方法仍然没有完全减轻发明一种有效的任务奖励函数来引导代理程序在具有挑战性的场景中正确行为的所有努力。作为未来的工作，PMP可以包括其他演示特征，例如交互场景的视觉输入，从而使代理程序能够自动探索将局部技能与相对简单的任务奖励项相结合的最佳组合。此外，可以在后续的工作中解决自动探索最佳部分分段组合的问题。</p>
]]></content>
      <categories>
        <category>VR</category>
      </categories>
      <tags>
        <tag>VR</tag>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World!</title>
    <url>/2023/07/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2023/07/05/Test/</url>
    <content><![CDATA[<p>This is a <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">test</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span></span></span></span>.<br />
Inline: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a + b - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><br />
111 Aha! <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E = mc^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mi>β</mi><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup><mo>+</mo><mi>c</mi><mrow><mo fence="true">(</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mn>3</mn></munderover><msub><mi>α</mi><mi>n</mi></msub><msub><mi>p</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow><mi>ψ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>i</mi><mi mathvariant="normal">ℏ</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>ψ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\left(\beta m c^2 + c \left(\sum_{n=1}^3\alpha_n p_n\right)\right) \psi(x,t)
= i\hbar \frac{\partial \psi(x,t)}{\partial t}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.068226em;vertical-align:-1.267113em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.882887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.267113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord mathnormal">i</span><span class="mord">ℏ</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
</search>
